{
  "version": 3,
  "sources": ["browser-external:worker_threads", "../../iink-ts/src/Constants.ts", "../../iink-ts/src/utils/DeferredPromise.ts", "../../iink-ts/src/utils/math.ts", "../../iink-ts/src/utils/geometry.ts", "../../iink-ts/src/utils/version.ts", "../../iink-ts/src/utils/crypto.ts", "../../iink-ts/src/utils/units.ts", "../../iink-ts/src/utils/uuid.ts", "../../iink-ts/src/utils/object.ts", "../../iink-ts/src/utils/font.ts", "../../iink-ts/src/utils/language.ts", "../../iink-ts/src/utils/quadratics.ts", "../../iink-ts/src/utils/infos.ts", "../../iink-ts/src/logger/logger.ts", "../../iink-ts/src/logger/LoggerManager.ts", "../../iink-ts/src/logger/LoggerConfiguration.ts", "../../iink-ts/src/editor/EditorEvent.ts", "../../iink-ts/src/model/Export.ts", "../../iink-ts/src/editor/EditorLayer.ts", "../../iink-ts/src/editor/AbstractEditor.ts", "../../iink-ts/src/symbol/Box.ts", "../../iink-ts/src/style/Style.ts", "../../iink-ts/src/style/PenStyle.ts", "../../iink-ts/src/style/Theme.ts", "../../iink-ts/node_modules/json-css/lib/jsoncss.min.js", "../../iink-ts/src/style/StyleHelper.ts", "../../iink-ts/src/style/StyleManager.ts", "../../iink-ts/src/symbol/IIDecorator.ts", "../../iink-ts/src/symbol/Symbol.ts", "../../iink-ts/src/symbol/geometry/IIEdge.ts", "../../iink-ts/src/symbol/geometry/IIShape.ts", "../../iink-ts/src/symbol/recognized/IIRecognizedBase.ts", "../../iink-ts/src/transform/Matrix.ts", "../../iink-ts/src/symbol/IISymbolBase.ts", "../../iink-ts/src/symbol/Point.ts", "../../iink-ts/src/symbol/geometry/IIEdgeArc.ts", "../../iink-ts/src/symbol/geometry/IIEdgeLine.ts", "../../iink-ts/src/symbol/geometry/IIEdgePolyLine.ts", "../../iink-ts/src/symbol/geometry/IIShapeCircle.ts", "../../iink-ts/src/symbol/geometry/IIShapeEllipse.ts", "../../iink-ts/src/symbol/geometry/IIShapePolygon.ts", "../../iink-ts/src/symbol/IIStroke.ts", "../../iink-ts/src/symbol/recognized/IIRecognizedArc.ts", "../../iink-ts/src/symbol/recognized/IIRecognizedCircle.ts", "../../iink-ts/src/symbol/recognized/IIRecognizedEllipse.ts", "../../iink-ts/src/symbol/recognized/IIRecognizedLine.ts", "../../iink-ts/src/symbol/recognized/IIRecognizedPolyLine.ts", "../../iink-ts/src/symbol/recognized/IIRecognizedPolygon.ts", "../../iink-ts/src/symbol/recognized/IIRecognizedText.ts", "../../iink-ts/src/symbol/IISymbolGroup.ts", "../../iink-ts/src/symbol/IIText.ts", "../../iink-ts/src/symbol/IIEraser.ts", "../../iink-ts/src/symbol/Stroke.ts", "../../iink-ts/src/model/Model.ts", "../../iink-ts/src/model/IIModel.ts", "../../iink-ts/src/recognizer/ServerConfiguration.ts", "../../iink-ts/src/recognizer/recognition/EraserConfiguration.ts", "../../iink-ts/src/recognizer/recognition/DiagramConfiguration.ts", "../../iink-ts/src/recognizer/recognition/ExportConfiguration.ts", "../../iink-ts/src/recognizer/recognition/MarginConfiguration.ts", "../../iink-ts/src/recognizer/recognition/MathConfiguration.ts", "../../iink-ts/src/recognizer/recognition/RawContentConfiguration.ts", "../../iink-ts/src/recognizer/recognition/RecognitionRendererConfiguration.ts", "../../iink-ts/src/recognizer/recognition/TextConfiguration.ts", "../../iink-ts/src/recognizer/recognition/TextConfigurationV2.ts", "../../iink-ts/src/recognizer/recognition/ConvertionConfiguration.ts", "../../iink-ts/src/recognizer/recognition/ShapeConfiguration.ts", "../../iink-ts/src/recognizer/RecognizerEvent.ts", "../../iink-ts/src/recognizer/RecognizerError.ts", "../../iink-ts/src/recognizer/RecognizerHTTPV1Configuration.ts", "../../iink-ts/src/recognizer/RecognizerHTTPV1.ts", "../../iink-ts/src/recognizer/RecognizerHTTPV2Configuration.ts", "../../iink-ts/src/recognizer/RecognizerHTTPV2.ts", "../../iink-ts/src/recognizer/RecognizerWebSocketMessage.ts", "../../iink-ts/src/recognizer/RecognizerWebSocketConfiguration.ts", "../../iink-ts/src/recognizer/RecognizerWebSocket.ts", "../../iink-ts/src/recognizer/RecognizerWebSocketSSRConfiguration.ts", "../../iink-ts/src/recognizer/RecognizerWebSocketSSR.ts", "../../iink-ts/src/renderer/canvas/CanvasRendererShape.ts", "../../iink-ts/src/renderer/canvas/CanvasRendererStroke.ts", "../../iink-ts/src/renderer/canvas/CanvasRendererText.ts", "../../iink-ts/src/renderer/canvas/CanvasRenderer.ts", "../../iink-ts/src/renderer/svg/IISVGRendererConst.ts", "../../iink-ts/src/renderer/svg/SVGBuilder.ts", "../../iink-ts/src/renderer/svg/IISVGRendererEdgeUtil.ts", "../../iink-ts/src/renderer/svg/IISVGRendererEraserUtil.ts", "../../iink-ts/src/renderer/svg/IISVGRendererDecoratorUtil.ts", "../../iink-ts/src/renderer/svg/IISVGRendererShapeUtil.ts", "../../iink-ts/src/renderer/svg/IISVGRendererStrokeUtil.ts", "../../iink-ts/src/renderer/svg/IISVGRendererTextUtil.ts", "../../iink-ts/src/renderer/svg/IISVGRendererRecognizedUtil.ts", "../../iink-ts/src/renderer/svg/IISVGRendererGroupUtil.ts", "../../iink-ts/src/renderer/svg/IISVGRenderer.ts", "../../iink-ts/src/renderer/svg/SVGStroker.ts", "../../iink-ts/src/renderer/svg/InteractiveInkSSRSVGRenderer.ts", "../../iink-ts/src/renderer/RendererConfiguration.ts", "../../iink-ts/src/manager/IIConversionManager.ts", "../../iink-ts/src/manager/IIResizeManager.ts", "../../iink-ts/src/manager/IIRotationManager.ts", "../../iink-ts/src/grabber/GrabberConfiguration.ts", "../../iink-ts/src/grabber/PointerEventGrabber.ts", "../../iink-ts/src/manager/IISelectionManager.ts", "../../iink-ts/src/manager/IITextManager.ts", "../../iink-ts/src/manager/IITranslateManager.ts", "../../iink-ts/src/manager/IIWriteManager.ts", "../../iink-ts/src/manager/IIEraseManager.ts", "../../iink-ts/src/manager/IIDebugSVGManager.ts", "../../iink-ts/src/manager/IIMoveManager.ts", "../../iink-ts/src/history/HistoryContext.ts", "../../iink-ts/src/history/HistoryManager.ts", "../../iink-ts/src/history/IIHistoryManager.ts", "../../iink-ts/src/history/HistoryConfiguration.ts", "../../iink-ts/src/menu/IIMenu.ts", "../../iink-ts/src/gesture/Gesture.ts", "../../iink-ts/src/gesture/GestureConfiguration.ts", "../../iink-ts/src/gesture/IIGestureManager.ts", "../../iink-ts/src/menu/IIMenuSub.ts", "../../iink-ts/src/menu/IIMenuAction.ts", "../../iink-ts/src/menu/IIMenuTool.ts", "../../iink-ts/src/menu/IIMenuStyle.ts", "../../iink-ts/src/menu/IIMenuContext.ts", "../../iink-ts/src/menu/MenuConfiguration.ts", "../../iink-ts/src/menu/IIMenuManager.ts", "../../iink-ts/src/snap/IISnapConfiguration.ts", "../../iink-ts/src/snap/IISnapManager.ts", "../../iink-ts/src/editor/InteractiveInkEditorConfiguration.ts", "../../iink-ts/src/editor/InteractiveInkEditor.ts", "../../iink-ts/src/editor/EditorTriggerConfiguration.ts", "../../iink-ts/src/editor/InkEditorDeprecatedConfiguration.ts", "../../iink-ts/src/editor/InkEditorDeprecated.ts", "../../iink-ts/src/smartguide/InteractiveInkSSRSmartGuide.ts", "../../iink-ts/src/editor/InteractiveInkSSREditorConfiguration.ts", "../../iink-ts/src/editor/InteractiveInkSSREditor.ts", "../../iink-ts/src/editor/InkEditorConfiguration.ts", "../../iink-ts/src/editor/InkEditor.ts", "../../iink-ts/src/editor/Editor.ts"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"worker_threads\" has been externalized for browser compatibility. Cannot access \"worker_threads.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "/**\n * @group Editor\n * @summary\n * List the possibilities of interactions\n */\nexport enum EditorTool\n{\n  Write = \"write\",\n  Erase = \"erase\",\n  /**\n   * @remarks only usable in the case of offscreen\n   */\n  Select = \"select\",\n  /**\n   * @remarks only usable in the case of offscreen\n   */\n  Move = \"move\"\n}\n\n/**\n * @group Editor\n * @summary\n * List all the shapes that can be drawn\n * @remarks\n * only usable in the case of offscreen\n */\nexport enum EditorWriteTool\n{\n  Pencil = \"pencil\",\n  Rectangle = \"rectangle\",\n  Rhombus = \"rhombus\",\n  Circle = \"circle\",\n  Ellipse = \"ellipse\",\n  Triangle = \"triangle\",\n  Parallelogram = \"parallelogram\",\n  Line = \"line\",\n  Arrow = \"arrow\",\n  DoubleArrow = \"double-arrow\",\n}\n\n/**\n * @group Renderer\n * @summary\n * List all svg elements roles\n * @remarks\n * only usable in the case of offscreen\n */\nexport enum SvgElementRole\n{\n  Guide = \"guide\",\n  InteractElementsGroup = \"interact-elements-group\",\n  Translate = \"translate\",\n  Resize = \"resize\",\n  Rotate = \"rotate\",\n}\n\n/**\n * @group Renderer\n * @summary\n * List all svg elements resize direction\n * @remarks\n * only usable in the case of offscreen\n */\nexport const enum ResizeDirection\n{\n  North = \"n-resize\",\n  East = \"e-resize\",\n  South = \"s-resize\",\n  West = \"w-resize\",\n  NorthEast = \"ne-resize\",\n  NorthWest = \"nw-resize\",\n  SouthEast = \"se-resize\",\n  SouthWest = \"sw-resize\"\n}\n\n/**\n * @group Renderer\n */\nexport const SELECTION_MARGIN = 10 as const\n", "\n/**\n * @group Utils\n */\nexport class DeferredPromise<T> {\n  promise: Promise<T>\n  resolve!: (value: T) => void\n  reject!: (value: Error | string) => void\n\n  isFullFilled: boolean\n  isPending: boolean\n\n\n  constructor()\n  {\n    this.isFullFilled = false\n    this.isPending = true\n\n    this.promise = new Promise((resolve, reject) =>\n    {\n      this.reject = async (v: unknown) =>\n      {\n        this.isFullFilled = true\n        this.isPending = false\n        return reject(v)\n      }\n      this.resolve = async (v: unknown) =>\n      {\n        this.isFullFilled = true\n        this.isPending = false\n        return resolve(v as T)\n      }\n    })\n  }\n}\n", "/**\n * @group Utils\n */\nexport function isValidNumber(x: unknown): boolean\n{\n  if (x === undefined || x === null) return false\n  return !isNaN(parseFloat(x.toString())) && isFinite(+x)\n}\n/**\n * @group Utils\n */\nexport function isBetween(val: number, min: number, max: number): boolean\n{\n  return val >= min && val <= max\n}\n\n/**\n * @group Utils\n */\nexport function computeAverage(arr: number[]): number\n{\n  return arr.reduce((p, c) => p + c, 0) / (arr.length || 1)\n}\n", "import { TBox, TPoint, TSegment } from \"../symbol\"\nimport { isBetween } from \"./math\"\n\n/**\n * @group Utils\n */\nexport function computeDistance(p1: TPoint, p2: TPoint): number\n{\n  const distance = Math.hypot(p2.y - p1.y, p2.x - p1.x)\n  return isNaN(distance) ? 0 : distance\n}\n\n/**\n * @group Utils\n */\nexport function computeAngleAxeRadian(begin: TPoint, end: TPoint): number\n{\n  return Math.atan2(end.y - begin.y, end.x - begin.x)\n}\n\n/**\n * @group Utils\n */\nexport function createPointsOnSegment(p1: TPoint, p2: TPoint, spaceBetweenPoint = 1): TPoint[]\n{\n  const points: TPoint[] = []\n  const globalDistance = computeDistance(p1, p2)\n  let spaceWithP1 = spaceBetweenPoint\n  while (spaceWithP1 < globalDistance) {\n    const p = {\n      x: p1.x + (spaceWithP1 * (p2.x - p1.x)) / globalDistance,\n      y: p1.y + (spaceWithP1 * (p2.y - p1.y)) / globalDistance\n    }\n    points.push(p)\n    spaceWithP1 += spaceBetweenPoint\n  }\n  return points\n}\n\n/**\n * @group Utils\n */\nexport function scalaire(v1: TPoint, v2: TPoint): number\n{\n  return v1.x * v2.x + v1.y * v2.y\n}\n\n/**\n * @group Utils\n */\nexport function computeNearestPointOnSegment(p: TPoint, seg: TSegment): TPoint\n{\n  const vectP1P = { x: p.x - seg.p1.x, y: p.y - seg.p1.y }\n  const vectP1P2 = { x: seg.p2.x - seg.p1.x, y: seg.p2.y - seg.p1.y }\n  if (vectP1P2.x === 0 && vectP1P2.y === 0) {\n    return seg.p1\n  }\n  const scalaireP1P_P1P2 = scalaire(vectP1P, vectP1P2)\n  const scalaireP1P2_P1P2 = scalaire(vectP1P2, vectP1P2)\n\n  const t = Math.min(1, Math.max(0, scalaireP1P_P1P2 / scalaireP1P2_P1P2))\n  return { x: seg.p1.x + (vectP1P2.x * t), y: seg.p1.y + (vectP1P2.y * t) }\n}\n\n/**\n * @group Utils\n */\nexport function isPointInsideBox(point: TPoint, box: TBox): boolean\n{\n  return isBetween(point.x, box.x, box.x + box.width) && isBetween(point.y, box.y, box.y + box.height)\n}\n\n/**\n * @group Utils\n */\nexport function convertRadianToDegree(radian: number): number\n{\n  return +((radian % (2 * Math.PI)) / Math.PI * 180).toFixed(4)\n}\n\n/**\n * @group Utils\n */\nexport function convertDegreeToRadian(degree: number): number\n{\n  return +((degree % 360) / 180 * Math.PI).toFixed(4)\n}\n\n/**\n * @group Utils\n */\nexport function computeRotatedPoint(point: TPoint, center: TPoint, radian: number): TPoint\n{\n  const dx = point.x - center.x\n  const dy = point.y - center.y\n  const cos = Math.cos(radian)\n  const sin = Math.sin(radian)\n  return {\n    x: +(center.x + cos * dx - sin * dy).toFixed(3),\n    y: +(center.y + sin * dx + cos * dy).toFixed(3)\n  }\n}\n\n/**\n * @group Utils\n */\nexport function computePointOnEllipse(center: TPoint, radiusX: number, radiusY: number, phi: number, theta: number): TPoint\n{\n  const cosPhi = Math.cos(phi)\n  const sinPhi = Math.sin(phi)\n\n  const M = Math.abs(radiusX) * Math.cos(theta)\n  const N = Math.abs(radiusY) * Math.sin(theta)\n\n  return {\n    x: +(center.x + cosPhi * M - sinPhi * N).toFixed(3),\n    y: +(center.y + sinPhi * M + cosPhi * N).toFixed(3)\n  }\n}\n\n/**\n * @group Utils\n */\nexport function computeDistanceBetweenPointAndSegment(p: TPoint, seg: TSegment): number\n{\n  return computeDistance(p, computeNearestPointOnSegment(p, seg))\n}\n\n/**\n * @group Utils\n */\nexport function findIntersectionBetween2Segment(seg1: TSegment, seg2: TSegment): TPoint | undefined\n{\n\n  if (seg1.p1.x === seg2.p1.x && seg1.p1.y === seg2.p1.y) return seg1.p1\n  if (seg1.p1.x === seg2.p2.x && seg1.p1.y === seg2.p2.y) return seg1.p1\n\n  if (seg1.p2.x === seg2.p1.x && seg1.p2.y === seg2.p1.y) return seg1.p2\n  if (seg1.p2.x === seg2.p2.x && seg1.p2.y === seg2.p2.y) return seg1.p2\n\n  const S1dx = seg1.p2.x - seg1.p1.x\n  const S1dy = seg1.p2.y - seg1.p1.y\n\n  const S2dx = seg2.p2.x - seg2.p1.x\n  const S2dy = seg2.p2.y - seg2.p1.y\n\n  const S1S2dx = seg1.p1.x - seg2.p1.x\n  const S1S2dy = seg1.p1.y - seg2.p1.y\n\n  const ua_t = S2dx * S1S2dy - S2dy * S1S2dx\n  const ub_t = S1dx * S1S2dy - S1dy * S1S2dx\n  const u_b = S2dy * S1dx - S2dx * S1dy\n\n  if (ua_t === 0 || ub_t === 0 || u_b === 0) return\n\n  const ua = ua_t / u_b\n  const ub = ub_t / u_b\n  if (isBetween(ua, 0, 1) && isBetween(ub, 0, 1)) {\n    return {\n      x: seg1.p1.x + ua * S1dx,\n      y: seg1.p1.y + ua * S1dy\n    }\n  }\n  return\n}\n\n/**\n * @group Utils\n */\nexport function findIntersectBetweenSegmentAndCircle(seg: TSegment, c: TPoint, r: number): TPoint[]\n{\n  const result: TPoint[] = []\n\n  const a = Math.pow(seg.p2.x - seg.p1.x, 2) + Math.pow(seg.p2.y - seg.p1.y, 2)\n  const b = 2 * ((seg.p2.x - seg.p1.x) * (seg.p1.x - c.x) + (seg.p2.y - seg.p1.y) * (seg.p1.y - c.y))\n  const cc = Math.pow(c.x, 2) + Math.pow(c.y, 2) + Math.pow(seg.p1.x, 2) + Math.pow(seg.p1.y, 2) - 2 * (c.x * seg.p1.x + c.y * seg.p1.y) - Math.pow(r, 2)\n  const deter = Math.pow(b, 2) - 4 * a * cc\n\n  if (deter <= 0) return []\n\n  const e = Math.sqrt(deter)\n  const u1 = (-b + e) / (2 * a)\n  const u2 = (-b - e) / (2 * a)\n\n  if ((u1 < 0 || u1 > 1) && (u2 < 0 || u2 > 1)) {\n    return result\n  }\n\n  if (isBetween(u1, 0, 1)) {\n    result.push({\n      x: (seg.p2.x - seg.p1.x) * u1 + seg.p1.x,\n      y: (seg.p2.y - seg.p1.y) * u1 + seg.p1.y\n    })\n  }\n\n  if (isBetween(u2, 0, 1)) {\n    result.push({\n      x: (seg.p2.x - seg.p1.x) * u2 + seg.p1.x,\n      y: (seg.p2.y - seg.p1.y) * u2 + seg.p1.y\n    })\n  }\n\n  return result\n}\n\n/**\n * @group Utils\n */\nexport function computeAngleRadian(p1: TPoint, center: TPoint, p2: TPoint): number\n{\n  const p1c = Math.sqrt(Math.pow(center.x - p1.x, 2) + Math.pow(center.y - p1.y, 2))\n  const p2c = Math.sqrt(Math.pow(center.x - p2.x, 2) + Math.pow(center.y - p2.y, 2))\n  const p1p2 = Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2))\n  return Math.acos((p2c * p2c + p1c * p1c - p1p2 * p1p2) / (2 * p2c * p1c))\n}\n\n/**\n * @group Utils\n */\nexport function getClosestPoints(points1: TPoint[], points2: TPoint[]): { p1: TPoint, p2: TPoint }\n{\n  let p1 = points1[0]\n  let p2 = points2[0]\n  let minDistance = Number.MAX_SAFE_INTEGER\n  points1.forEach(_p1 =>\n  {\n    points2.forEach(_p2 =>\n    {\n      const d = computeDistance(_p1, _p2)\n      if (minDistance > d) {\n        minDistance = d\n        p1 = _p1\n        p2 = _p2\n      }\n    })\n  })\n  return { p1, p2 }\n}\n\n/**\n * @group Utils\n */\nexport function getClosestPoint(points: TPoint[], point: TPoint): { point?: TPoint, index: number }\n{\n  let minDistance = Number.MAX_SAFE_INTEGER\n  let closest: TPoint | undefined\n  let index = -1\n  points.forEach((p, i) =>\n  {\n    const d = computeDistance(p, point)\n    if (minDistance > d) {\n      minDistance = d\n      closest = p\n      index = i\n    }\n  })\n  return {\n    point: closest,\n    index\n  }\n}\n\n/**\n * @group Utils\n */\nexport function isPointInsidePolygon(point: TPoint, points: TPoint[])\n{\n  let inside = false\n  for (let i = 0, j = points.length - 1; i < points.length; j = i++) {\n    const p1 = points[i]\n    const p2 = points[j]\n    const intersect = ((p1.y > point.y) != (p2.y > point.y))\n      && (point.x < (p2.x - p1.x) * (point.y - p1.y) / (p2.y - p1.y) + p1.x)\n    if (intersect) inside = !inside\n  }\n\n  return inside\n}\n", "\n/**\n * @group Utils\n */\nexport const isVersionSuperiorOrEqual = (source: string, target: string): boolean =>\n{\n  const sourceParts = source.split(\".\")\n  const targetParts = target.split(\".\")\n\n  for (let i = 0; i < targetParts.length; i++) {\n    const a = Number(targetParts[i])\n    const b = Number(sourceParts[i])\n    if (a > b) return false\n    if (a < b) return true\n  }\n  return true\n}\n", "/**\n * @group Utils\n */\nexport async function computeHmac(message: string, applicationKey: string, hmacKey: string): Promise<string>\n{\n  const enc = new TextEncoder()\n  const messageEncoded = enc.encode(message)\n  const keyEncoded = enc.encode(applicationKey + hmacKey)\n\n  const key = await crypto.subtle.importKey(\n    \"raw\",\n    keyEncoded,\n    {\n      name: \"HMAC\",\n      hash: { name: \"SHA-512\" }\n    },\n    false,\n    [\"sign\"]\n  )\n\n  const signature = await crypto.subtle.sign(\n    \"HMAC\",\n    key,\n    messageEncoded\n  )\n\n  const buffer = new Uint8Array(signature)\n  return Array.prototype.map.call(buffer, x => x.toString(16).padStart(2, \"0\")).join(\"\")\n}\n", "import { TBox } from \"../symbol\"\n\n/**\n * @group Utils\n */\nexport function convertMillimeterToPixel(mm: number): number\n{\n  return +(mm * 96 / 25.4).toFixed(3)\n}\n\n/**\n * @group Utils\n */\nexport function convertPixelToMillimeter(px: number): number\n{\n  return +(px / 96 * 25.4).toFixed(3)\n}\n\n/**\n * @group Utils\n */\nexport function convertBoundingBoxMillimeterToPixel(box?: TBox): TBox\n{\n  if (!box) {\n    return { height: 0, width: 0, x: 0, y: 0}\n  }\n  return {\n    x: convertMillimeterToPixel(box.x),\n    y: convertMillimeterToPixel(box.y),\n    width: convertMillimeterToPixel(box.width),\n    height: convertMillimeterToPixel(box.height),\n  }\n}\n", "\n/**\n * @group Utils\n */\nexport function createUUID(): string\n{\n  let dt = Date.now()\n  const uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c)\n  {\n    const r = (dt + Math.random() * 16) % 16 | 0\n    dt = Math.floor(dt / 16)\n    return (c == \"x\" ? r : (r & 0x3 | 0x8)).toString(16)\n  })\n  return uuid\n}\n", "\n/**\n * @group Utils\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const mergeDeep = (target: any, ...sources: any[]): any =>\n{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const isObject = (item: any) =>\n  {\n    return (item && typeof item === \"object\" && !Array.isArray(item))\n  }\n  if (!sources.length) return target\n  const source = sources.shift()\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} })\n        }\n        mergeDeep(target[key], source[key])\n      }\n      else if (Array.isArray(target[key]) && Array.isArray(source[key])) {\n        target[key] = target[key].concat(source[key])\n      }\n      else {\n        Object.assign(target, { [key]: source[key] })\n      }\n    }\n  }\n  else if (Array.isArray(target) && Array.isArray(source)) {\n    target = target.concat(source)\n  }\n  else if (source) {\n    target = source\n  }\n\n  return mergeDeep(target, ...sources)\n}\n\n/**\n * @group Utils\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isDeepEqual = (object1: any, object2: any) =>\n{\n  const objKeys1 = Object.keys(object1)\n  const objKeys2 = Object.keys(object2)\n\n  if (objKeys1.length !== objKeys2.length) return false\n\n  for (const key of objKeys1) {\n    const value1 = object1[key]\n    const value2 = object2[key]\n\n    const isObjects = isObject(value1) && isObject(value2)\n\n    if (\n      (isObjects && !isDeepEqual(value1, value2)) ||\n      (!isObjects && value1 !== value2)\n    ) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * @group Utils\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isObject = (object: any) =>\n{\n  return object && typeof object === \"object\"\n}\n", "import { TServerHTTPConfiguration } from \"../recognizer\"\nimport { PartialDeep } from \"./types\"\n\n/**\n * @group Utils\n */\nexport async function getAvailableFontList(configuration: PartialDeep<{ server: TServerHTTPConfiguration, recognition: { lang: string }}>): Promise<Array<string>>\n{\n  if (!configuration?.server?.scheme && !configuration?.server?.host) {\n    return Promise.reject(\"Failed to get fonts: configuration.server.scheme & configuration.server.host are required!\")\n  }\n  if (!configuration?.recognition?.lang) {\n    return Promise.reject(\"Failed to get fonts: configuration.recognition.lang is required!\")\n  }\n  const serverConfig = configuration.server\n  const response = await fetch(`${ serverConfig.scheme }://${ serverConfig.host }/api/v4.0/iink/font/google/language/` + configuration.recognition.lang)\n  const { result } = await response.json()\n  return result.sort()\n}\n", "import { TServerHTTPConfiguration } from \"../recognizer\"\nimport { PartialDeep } from \"./types\"\n\n/**\n * @group Utils\n */\nexport async function getAvailableLanguageList(configuration: PartialDeep<{ server: TServerHTTPConfiguration }>): Promise<{ result: { [key: string]: string } }>\n{\n  if (configuration?.server?.scheme && configuration?.server?.host) {\n    const serverConfig = configuration.server\n    const response = await fetch(`${ serverConfig.scheme }://${ serverConfig.host }/api/v4.0/iink/availableLanguageList`)\n    return response.json()\n  } else {\n    return Promise.reject(\"Failed to get languages: configuration.server.scheme & configuration.server.host are required!\")\n  }\n}\n", "import { TPoint, TPointer } from \"../symbol\"\n\n/**\n * @group Utils\n */\nexport function computeLinksPointers(point: TPointer, angle: number, width: number): TPoint[]\n{\n  const radius = point.p * width\n  return [\n    {\n      x: +(point.x - (Math.sin(angle) * radius)).toFixed(3),\n      y: +(point.y + (Math.cos(angle) * radius)).toFixed(3)\n    },\n    {\n      x: +(point.x + (Math.sin(angle) * radius)).toFixed(3),\n      y: +(point.y - (Math.cos(angle) * radius)).toFixed(3),\n    }\n  ]\n}\n\n/**\n * @group Utils\n */\nexport function computeMiddlePointer(point1: TPointer, point2: TPointer): TPointer\n{\n  return {\n    x: +((point2.x + point1.x) / 2).toFixed(3),\n    y: +((point2.y + point1.y) / 2).toFixed(3),\n    p: +((point2.p + point1.p) / 2).toFixed(3),\n    t: +((point2.t + point1.t) / 2).toFixed(3),\n  }\n}\n", "import { TServerHTTPConfiguration } from \"../recognizer\"\nimport { PartialDeep } from \"./types\"\n\n/**\n * @group Utils\n */\nexport type TApiInfos = {\n  version: string,\n  gitCommit: string,\n  nativeVersion: string\n}\n\n/**\n * @group Utils\n */\nexport async function getApiInfos(configuration?: PartialDeep<{ server: TServerHTTPConfiguration }>): Promise<TApiInfos>\n{\n  try {\n    if (!configuration?.server?.scheme && !configuration?.server?.host) {\n      return Promise.reject(\"Failed to get infos: configuration.server.scheme & configuration.server.host are required!\")\n    }\n    const response = await fetch(`${ configuration.server.scheme }://${ configuration.server.host }/api/v4.0/iink/version`)\n    if (response.ok) {\n      const version = await response.json() as TApiInfos\n      return version\n    }\n    else {\n      //latest version published before this endpoint\n      return { version: \"3.1.3\", gitCommit: \"unknown\", nativeVersion: \"<=3.1.1\" }\n    }\n\n  } catch {\n    //latest version published before this endpoint\n    return { version: \"3.1.3\", gitCommit: \"7e148bd566438ca77dc83cb4edcc6ed0f51a8a15\", nativeVersion: \"<=3.1.1\" }\n   }\n\n}\n", "/**\n * @group Logger\n */\nexport enum LoggerLevel\n{\n  DEBUG = \"1\",\n  INFO = \"2\",\n  WARN = \"3\",\n  ERROR = \"4\"\n}\n\n/**\n * @group Logger\n */\nexport enum LoggerCategory\n{\n  EDITOR = \"EDITOR\",\n  RECOGNIZER = \"RECOGNIZER\",\n  GRABBER = \"GRABBER\",\n  GESTURE = \"GESTURE\",\n  EDITOR_EVENT = \"EDITOR_EVENT\",\n  MODEL = \"MODEL\",\n  RENDERER = \"RENDERER\",\n  SMARTGUIDE = \"SMARTGUIDE\",\n  STYLE = \"STYLE\",\n  HISTORY = \"HISTORY\",\n  SYMBOL = \"SYMBOL\",\n  WRITE = \"WRITE\",\n  TRANSFORMER = \"TRANSFORMER\",\n  CONVERTER = \"CONVERTER\",\n  SELECTION = \"SELECTION\",\n  SVGDEBUG = \"SVGDEBUG\",\n  MENU = \"MENU\"\n}\n\n/**\n * @group Logger\n */\nexport class Logger\n{\n  category: LoggerCategory\n  level: LoggerLevel\n\n  constructor(category: LoggerCategory, level: LoggerLevel)\n  {\n    this.category = category\n    this.level = level\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  debug(functionName: string, ...data: any)\n  {\n    if (LoggerLevel.DEBUG >= this.level) {\n      const dataLog = {\n        level: \"debug\",\n        from: `${ this.category }.${ functionName }`,\n        message: data,\n      }\n      console.debug(dataLog)\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  info(functionName: string, ...data: any)\n  {\n    if (LoggerLevel.INFO >= this.level) {\n      const dataLog = {\n        level: \"info\",\n        from: `${ this.category }.${ functionName }`,\n        message: data,\n      }\n      console.info(dataLog)\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  warn(functionName: string, ...data: any)\n  {\n    if (LoggerLevel.WARN >= this.level) {\n      const dataLog = {\n        level: \"warn\",\n        from: `${ this.category }.${ functionName }`,\n        message: data,\n      }\n      console.warn(dataLog)\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error(functionName: string, ...error: any)\n  {\n    const dataLog = {\n      level: \"error\",\n      from: `${ this.category }.${ functionName }`,\n      message: error,\n    }\n    console.error(dataLog)\n  }\n}\n", "import { TLoggerConfiguration } from \"./LoggerConfiguration\"\nimport { Logger, LoggerCategory, LoggerLevel } from \"./logger\"\n\n/**\n * @group Logger\n */\nexport class LoggerManager\n{\n  static #loggerMap: Map<LoggerCategory, Logger> = new Map()\n\n  static getLogger(name: LoggerCategory): Logger\n  {\n    if (!this.#loggerMap.has(name)) {\n      this.#loggerMap.set(name, new Logger(name, LoggerLevel.ERROR))\n    }\n    return this.#loggerMap.get(name) as Logger\n  }\n\n  static setLoggerLevel(config: TLoggerConfiguration)\n  {\n    Object.keys(config).forEach((lc) =>\n    {\n      LoggerManager.getLogger(lc as LoggerCategory).level = config[lc as LoggerCategory]\n    })\n  }\n}\n", "import { LoggerCategory, LoggerLevel } from \"./logger\"\n\n/**\n * @group Logger\n */\nexport type TLoggerConfiguration = {\n  [key in keyof typeof LoggerCategory]: LoggerLevel\n}\n\n/**\n * @group Logger\n * @source\n */\nexport const DefaultLoggerConfiguration: TLoggerConfiguration = {\n  [LoggerCategory.EDITOR]: LoggerLevel.ERROR,\n  [LoggerCategory.RECOGNIZER]: LoggerLevel.ERROR,\n  [LoggerCategory.GRABBER]: LoggerLevel.ERROR,\n  [LoggerCategory.RENDERER]: LoggerLevel.ERROR,\n  [LoggerCategory.EDITOR_EVENT]: LoggerLevel.ERROR,\n  [LoggerCategory.MODEL]: LoggerLevel.ERROR,\n  [LoggerCategory.SYMBOL]: LoggerLevel.ERROR,\n  [LoggerCategory.SMARTGUIDE]: LoggerLevel.ERROR,\n  [LoggerCategory.GESTURE]: LoggerLevel.ERROR,\n  [LoggerCategory.STYLE]: LoggerLevel.ERROR,\n  [LoggerCategory.HISTORY]: LoggerLevel.ERROR,\n  [LoggerCategory.TRANSFORMER]: LoggerLevel.ERROR,\n  [LoggerCategory.CONVERTER]: LoggerLevel.ERROR,\n  [LoggerCategory.WRITE]: LoggerLevel.ERROR,\n  [LoggerCategory.SELECTION]: LoggerLevel.ERROR,\n  [LoggerCategory.SVGDEBUG]: LoggerLevel.ERROR,\n  [LoggerCategory.MENU]: LoggerLevel.ERROR,\n}\n", "import { EditorTool } from \"../Constants\"\nimport { LoggerManager, LoggerCategory } from \"../logger\"\nimport { TExport } from \"../model\"\nimport { IIStroke, TIISymbol, TSymbol } from \"../symbol\"\nimport { THistoryContext } from \"../history\"\nimport { TGestureType } from \"../gesture\"\n\n/**\n * @group Editor\n * @remarks Lists all events that can be listened to on the editor or DOM element\n * @example\n * You can run code on \"EditorEventName\" raised by using\n * ```ts\n * editor.event.addEventListener(EditorEventName.CHANGED, (evt) => console.log(evt.detail))\n * ```\n */\nexport enum EditorEventName\n{\n  /**\n   * @remarks event emitted when history has changed i.e. the context of undo-redo\n   */\n  CHANGED = \"changed\",\n  /**\n   * @remarks event emitted when clearing is complete\n   */\n  CLEARED = \"cleared\",\n  /**\n   * @remarks event emitted after the conversion is complete\n   */\n  CONVERTED = \"converted\",\n  /**\n   * @remarks event emitted when the editor encounters an error\n   */\n  ERROR = \"error\",\n  /**\n   * @remarks event emitted on click on pointer events\n   */\n  POINTEREVENTS = \"pointer_events\",\n  /**\n   * @remarks event emitted after\n   */\n  NOTIF = \"notif\",\n  /**\n   * @remarks event emitted after the end of the export\n   */\n  EXPORTED = \"exported\",\n  /**\n   * @remarks event emitted after the end of the import\n   */\n  IMPORTED = \"imported\",\n  /**\n   * @remarks event emitted when the server is idle after a job\n   */\n  IDLE = \"idle\",\n  /**\n   * @remarks event emitted after full editor initialization\n   */\n  LOADED = \"loaded\",\n  /**\n   * @remarks event emitted session opened\n   */\n  SESSION_OPENED = \"session-opened\",\n  /**\n   * @remarks event emitted after selection change\n   */\n  SELECTED = \"selected\",\n  /**\n   * @remarks event emitted after tool change\n   */\n  TOOL_CHANGED = \"tool-changed\",\n  /**\n   * @remarks event emitted after mode change\n   */\n  UI_UPDATED = \"ui-updated\",\n  /**\n   * @remarks event emitted after stroke synchronized with jiix\n   */\n  SYNCHRONIZED = \"synchronized\",\n  /**\n   * @remarks event emitted after applying a gesture\n   */\n  GESTURED = \"gestured\"\n}\n\n/**\n * @group Editor\n */\nexport class EditorEvent extends EventTarget\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.EDITOR_EVENT);\n  protected abortController: AbortController\n  element: Element\n\n  constructor(element: Element)\n  {\n    super()\n    this.#logger.info(\"constructor\", { element })\n    this.abortController = new AbortController()\n    this.element = element\n  }\n\n  removeAllListeners(): void\n  {\n    this.#logger.info(\"removeAllListeners\")\n    this.abortController.abort()\n    this.abortController = new AbortController()\n  }\n\n  protected emit(type: string, data?: unknown): void\n  {\n    const evt = new CustomEvent(type, Object.assign({ bubbles: true, composed: true }, data ? { detail: data } : undefined))\n    this.dispatchEvent(evt)\n    this.element?.dispatchEvent(evt)\n  }\n\n  emitSessionOpened(sessionId: string): void\n  {\n    this.#logger.info(\"emitSessionOpened\")\n    this.emit(EditorEventName.SESSION_OPENED, sessionId)\n  }\n  addSessionOpenedListener(callback: (sessionId: string) => void): void\n  {\n    this.#logger.info(\"addSessionOpenedListener\", { callback })\n    this.addEventListener(\n      EditorEventName.SESSION_OPENED,\n      (evt: unknown) => callback((evt as CustomEvent).detail as string),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitLoaded(): void\n  {\n    this.#logger.info(\"emitLoaded\")\n    this.emit(EditorEventName.LOADED)\n  }\n  addLoadedListener(callback: () => void): void\n  {\n    this.#logger.info(\"addLoadedListener\", { callback })\n    this.addEventListener(\n      EditorEventName.LOADED,\n      () => callback(),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitNotif(notif: { message: string; timeout?: number }): void\n  {\n    this.#logger.info(\"emitNotif\", { notif })\n    this.emit(EditorEventName.NOTIF, notif)\n  }\n  addNotifListener(callback: (notif: { message: string; timeout?: number }) => void): void\n  {\n    this.#logger.info(\"addNotifListener\", { callback })\n    this.addEventListener(\n      EditorEventName.NOTIF,\n      (evt: unknown) => callback((evt as CustomEvent).detail as { message: string; timeout?: number }),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitError(err: Error): void\n  {\n    this.#logger.info(\"emitError\", { err })\n    this.emit(EditorEventName.ERROR, err)\n  }\n  addErrorListener(callback: (err: Error) => void): void\n  {\n    this.#logger.info(\"addErrorListener\", { callback })\n    this.addEventListener(\n      EditorEventName.ERROR,\n      (evt: unknown) => callback((evt as CustomEvent).detail as Error),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitExported(exports: TExport): void\n  {\n    this.#logger.info(\"emitExported\", { exports })\n    this.emit(EditorEventName.EXPORTED, exports)\n  }\n  addExportedListener(callback: (exports: TExport) => void): void\n  {\n    this.#logger.info(\"addExportedListener\", { callback })\n    this.addEventListener(\n      EditorEventName.EXPORTED,\n      (evt: unknown) => callback((evt as CustomEvent).detail as TExport),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitChanged(undoRedoContext: THistoryContext): void\n  {\n    this.#logger.info(\"emitChanged\", { undoRedoContext })\n    this.emit(EditorEventName.CHANGED, {\n      ...undoRedoContext,\n      canClear: !undoRedoContext.empty\n    })\n  }\n  addChangedListener(callback: (context: THistoryContext) => void): void\n  {\n    this.#logger.info(\"addChangedListener\", { callback })\n    this.addEventListener(\n      EditorEventName.CHANGED,\n      (evt: unknown) => callback((evt as CustomEvent).detail as THistoryContext),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitIdle(idle: boolean): void\n  {\n    this.#logger.info(\"emitIdle\", { idle })\n    this.emit(EditorEventName.IDLE, idle)\n  }\n  addIdleListener(callback: (idle: boolean) => void): void\n  {\n    this.#logger.info(\"addIdleListener\", { callback })\n    this.addEventListener(\n      EditorEventName.IDLE,\n      (evt: unknown) => callback((evt as CustomEvent).detail as boolean),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitCleared(): void\n  {\n    this.#logger.info(\"emitCleared\")\n    this.emit(EditorEventName.CLEARED)\n  }\n  addClearedListener(callback: () => void): void\n  {\n    this.#logger.info(\"addClearedListener\", { callback })\n    this.addEventListener(\n      EditorEventName.CLEARED,\n      () => callback(),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitConverted(exports: TExport): void\n  {\n    this.#logger.info(\"emitConverted\", { exports })\n    this.emit(EditorEventName.CONVERTED, exports)\n  }\n  addConvertedListener(callback: (exports: TExport) => void): void\n  {\n    this.#logger.info(\"addConvertedListener\", { callback })\n    this.addEventListener(\n      EditorEventName.CONVERTED,\n      (evt: unknown) => callback((evt as CustomEvent).detail as TExport),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitImported(exports: TExport): void\n  {\n    this.#logger.info(\"emitImported\", { exports })\n    this.emit(EditorEventName.IMPORTED, exports)\n  }\n  addImportedListener(callback: (exports: TExport) => void): void\n  {\n    this.#logger.info(\"addImportedListener\", { callback })\n    this.addEventListener(\n      EditorEventName.IMPORTED,\n      (evt: unknown) => callback((evt as CustomEvent).detail as TExport),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitSelected(symbols: TSymbol[]): void\n  {\n    this.#logger.info(\"emitSelected\")\n    this.emit(EditorEventName.SELECTED, symbols)\n  }\n  addSelectedListener(callback: (symbols: TIISymbol[]) => void): void\n  {\n    this.#logger.info(\"addSelectedListener\", { callback })\n    this.addEventListener(\n      EditorEventName.SELECTED,\n      (evt: unknown) => callback((evt as CustomEvent).detail as TIISymbol[]),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitToolChanged(mode: EditorTool): void\n  {\n    this.#logger.info(\"emitToolChanged\")\n    this.emit(EditorEventName.TOOL_CHANGED, mode)\n  }\n  addToolChangedListener(callback: (mode: EditorTool) => void): void\n  {\n    this.#logger.info(\"addToolChangedListener\", { callback })\n    this.addEventListener(\n      EditorEventName.TOOL_CHANGED,\n      (evt: unknown) => callback((evt as CustomEvent).detail as EditorTool),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitUIpdated(): void\n  {\n    this.#logger.info(\"emitUIpdated\")\n    this.emit(EditorEventName.UI_UPDATED)\n  }\n  addUIpdatedListener(callback: () => void): void\n  {\n    this.#logger.info(\"addUIpdatedListener\", { callback })\n    this.addEventListener(\n      EditorEventName.UI_UPDATED,\n      () => callback(),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitSynchronized(): void\n  {\n    this.#logger.info(\"emitSynchronized\")\n    this.emit(EditorEventName.SYNCHRONIZED)\n  }\n  addSynchronizedListener(callback: () => void): void\n  {\n    this.#logger.info(\"addSynchronizedListener\", { callback })\n    this.addEventListener(\n      EditorEventName.SYNCHRONIZED,\n      () => callback(),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitGestured(gesture: { gestureType: TGestureType, stroke: IIStroke }): void\n  {\n    this.#logger.info(\"emitSynchronized\")\n    this.emit(EditorEventName.GESTURED, gesture)\n  }\n  addGesturedListener(callback: (gesture: { gestureType: TGestureType, stroke: IIStroke }) => void): void\n  {\n    this.#logger.info(\"addSynchronizedListener\", { callback })\n    this.addEventListener(\n      EditorEventName.GESTURED,\n      (evt) => callback((evt as CustomEvent).detail as { gestureType: TGestureType, stroke: IIStroke }),\n      { signal: this.abortController.signal }\n    )\n  }\n}\n", "import { EdgeDecoration, TBox, TPoint } from \"../symbol\"\n\n/**\n * @group Exports\n * @remarks List all supported MIME types for export. Please note, the MIME types supported depend on the recognition type configured\n */\nexport enum ExportType\n{\n  JIIX = \"application/vnd.myscript.jiix\",\n  TEXT = \"text/plain\",\n  LATEX = \"application/x-latex\",\n  MATHML = \"application/mathml+xml\",\n  SVG = \"image/svg+xml\",\n  OFFICE_DOCUMENT = \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"\n}\n\n/**\n * @group Exports\n * @remarks {@link https://developer.preprod.myscript.com/docs/interactive-ink/latest/reference/jiix  Element type}\n */\nexport enum JIIXELementType\n{\n  Text = \"Text\",\n  Node = \"Node\",\n  Edge = \"Edge\",\n  RawContent = \"Raw Content\",\n}\n\n/**\n * @group Exports\n * @remarks {@link https://developer.preprod.myscript.com/docs/interactive-ink/latest/reference/jiix/#diagram-item-blocks | Element node kind}\n */\nexport enum JIIXNodeKind\n{\n  Circle = \"circle\",\n  Ellipse = \"ellipse\",\n  Rectangle = \"rectangle\",\n  Triangle = \"triangle\",\n  Parallelogram = \"parallelogram\",\n  Polygon = \"polygon\",\n  Rhombus = \"rhombus\",\n}\n\n/**\n * @group Exports\n */\nexport enum JIIXEdgeKind\n{\n  Line = \"line\",\n  PolyEdge = \"polyedge\",\n  Arc = \"arc\",\n}\n\n/**\n * @group Exports\n * @remarks {@link https://developer.preprod.myscript.com/docs/interactive-ink/latest/reference/jiix/#stroke-item | Stroke item}\n */\nexport type TJIIXStrokeItem = {\n  type: \"stroke\"\n  id: string\n  \"full-id\"?: string\n  timestamp?: string\n  X?: number[]\n  Y?: number[]\n  F?: number[]\n  T?: number[]\n}\n\n/**\n * @group Exports\n */\nexport type TJIIXBase = {\n  \"bounding-box\"?: TBox\n  items?: TJIIXStrokeItem[]\n}\n\n/**\n * @group Exports\n */\nexport type TJIIXElementBase<T = string> = TJIIXBase & {\n  id: string\n  type: T\n}\n\n/**\n * @group Exports\n * @remarks {@link https://developer.preprod.myscript.com/docs/interactive-ink/latest/reference/jiix/#word-object | Word object}\n */\nexport type TJIIXWord = TJIIXBase & {\n  id?: string\n  label: string\n  candidates?: string[]\n  \"first-char\"?: number\n  \"last-char\"?: number\n}\n\n/**\n * @group Exports\n * @remarks {@link https://developer.preprod.myscript.com/docs/interactive-ink/latest/reference/jiix/#character-object | Character object}\n */\nexport type TJIIXChar = TJIIXBase & {\n  label: string\n  candidates?: string[]\n  word: number\n  grid: TPoint[]\n}\n\n/**\n * @group Exports\n * @remarks {@link https://developer.preprod.myscript.com/docs/interactive-ink/latest/reference/jiix/#text-interpretation | Text Element }\n */\nexport type TJIIXLine = {\n  \"baseline-y\": number\n  \"first-char\"?: number\n  \"last-char\"?: number\n  \"x-height\": number\n}\n\n/**\n * @group Exports\n * @remarks {@link https://developer.preprod.myscript.com/docs/interactive-ink/latest/reference/jiix/#text-interpretation | Text Element }\n */\nexport type TJIIXTextElement = TJIIXElementBase<JIIXELementType.Text> & {\n  id: string\n  \"bounding-box\"?: TBox\n  label: string\n  words?: TJIIXWord[]\n  chars?: TJIIXChar[]\n  lines?: TJIIXLine[]\n}\n\n/**\n * @group Exports\n */\nexport type TJIIXNodeElementBase<K = string> = TJIIXElementBase<JIIXELementType.Node> & {\n  id: string\n  kind: K\n}\n\n/**\n * @group Exports\n */\nexport type TJIIXNodeCircle = TJIIXNodeElementBase<JIIXNodeKind.Circle> & {\n  id: string\n  cx: number\n  cy: number\n  r: number\n}\n\n/**\n * @group Exports\n */\nexport type TJIIXNodeEllipse = TJIIXNodeElementBase<JIIXNodeKind.Ellipse> & {\n  id: string\n  cx: number\n  cy: number\n  rx: number\n  ry: number\n  orientation: number\n}\n\n/**\n * @group Exports\n */\nexport type TJIIXNodeRectangle = TJIIXNodeElementBase<JIIXNodeKind.Rectangle> & {\n  id: string\n  height: number\n  width: number\n  x: number\n  y: number\n}\n\n/**\n * @group Exports\n */\nexport type TJIIXNodeTriangle = TJIIXNodeElementBase<JIIXNodeKind.Triangle> & {\n  id: string\n  points: number[]\n}\n\n/**\n * @group Exports\n */\nexport type TJIIXNodeParrallelogram = TJIIXNodeElementBase<JIIXNodeKind.Parallelogram> & {\n  id: string\n  points: number[]\n}\n\n/**\n * @group Exports\n */\nexport type TJIIXNodePolygon = TJIIXNodeElementBase<JIIXNodeKind.Polygon> & {\n  id: string\n  points: number[]\n}\n\n/**\n * @group Exports\n */\nexport type TJIIXNodeRhombus = TJIIXNodeElementBase<JIIXNodeKind.Rhombus> & {\n  id: string\n  points: number[]\n}\n\n/**\n * @group Exports\n */\nexport type TJIIXNodeElement =\n  TJIIXNodeCircle |\n  TJIIXNodeEllipse |\n  TJIIXNodeRectangle |\n  TJIIXNodeTriangle |\n  TJIIXNodeParrallelogram |\n  TJIIXNodePolygon |\n  TJIIXNodeRhombus\n\n/**\n * @group Exports\n */\nexport type TJIIXEdgeElementBase<K = string> = TJIIXElementBase<JIIXELementType.Edge> & {\n  kind: K\n}\n\n/**\n * @group Exports\n * @remarks {@link https://developer.preprod.myscript.com/docs/interactive-ink/latest/reference/jiix/#line-item | Element line}\n */\nexport type TJIIXEdgeLine = TJIIXEdgeElementBase<JIIXEdgeKind.Line> & {\n  x1: number\n  x2: number\n  y1: number\n  y2: number\n  p1Decoration?: EdgeDecoration\n  p2Decoration?: EdgeDecoration\n}\n\n/**\n * @group Exports\n */\nexport type TJIIXEdgePolyEdge = TJIIXEdgeElementBase<JIIXEdgeKind.PolyEdge> & {\n  edges: TJIIXEdgeLine[]\n}\n\n/**\n * @group Exports\n * @remarks {@link https://developer.preprod.myscript.com/docs/interactive-ink/latest/reference/jiix/#arc-item | Element arc}\n */\nexport type TJIIXEdgeArc = TJIIXEdgeElementBase<JIIXEdgeKind.Arc> & {\n  cx: number,\n  cy: number,\n  rx: number,\n  ry: number,\n  phi: number,\n  startAngle: number,\n  sweepAngle: number\n  startDecoration?: EdgeDecoration\n  endDecoration?: EdgeDecoration\n}\n\n/**\n * @group Exports\n */\nexport type TJIIXEdgeElement =\n  TJIIXEdgeLine |\n  TJIIXEdgePolyEdge |\n  TJIIXEdgeArc\n\n/**\n * @group Exports\n * @remarks {@link https://developer.preprod.myscript.com/docs/interactive-ink/latest/reference/web/jiix | Exports}\n */\nexport type TJIIXElement =\n  TJIIXTextElement |\n  TJIIXNodeElement |\n  TJIIXEdgeElement\n\n/**\n * @group Exports\n */\nexport type TJIIXExport = {\n  type: string\n  id: string\n  \"bounding-box\"?: TBox\n  version: string\n  elements?: TJIIXElement[]\n  label?: string\n  words?: TJIIXWord[]\n  chars?: TJIIXChar[]\n}\n\n/**\n * @group Exports\n * @remarks\n * List all supported MIME types for export.\n *\n * Attention the MIME types supported depend on the {@link TRecognitionType | type of recognition}\n *\n * {@link https://developer.preprod.myscript.com/docs/interactive-ink/latest/reference/jiix | Documentation}\n */\nexport type TExport = {\n  /** @hidden */\n  [key: string]: unknown\n  /**\n   * @remarks vnd.myscript.jiix is used for text and raw-content exports\n   */\n  \"application/vnd.myscript.jiix\"?: TJIIXExport\n  /**\n   * @remarks text/plain is only use for text export\n   */\n  \"text/plain\"?: string\n  /**\n   * @remarks x-latex is only use for math export\n   * @see {@link https://katex.org/docs/browser.html | katex} to render\n   */\n  \"application/x-latex\"?: string\n  /**\n   * @remarks mathml+xml is only use for math export\n   * @see {@link https://www.w3.org/Math/whatIsMathML.html | Mathematical Markup Language}\n   */\n  \"application/mathml+xml\"?: string\n  /**\n   * @remarks svg+xml is only use for diagram export\n   */\n  \"image/svg+xml\"?: string\n  /**\n   * @remarks vnd.openxmlformats-officedocument.presentationml.presentation is only use for diagram export\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Blob | Blob}\n   */\n  \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"?: Blob\n}\n", "\nimport style from \"../iink.css\"\n/**\n * @group Editor\n */\nexport type EditorLayerUIInfoModal = {\n  root: HTMLDivElement,\n  text: HTMLParagraphElement\n}\n\n/**\n * @group Editor\n */\nexport type EditorLayerUIMessage = {\n  root: HTMLDivElement\n  overlay: HTMLDivElement\n  modal: EditorLayerUIInfoModal\n}\n\n/**\n * @group Editor\n */\nexport type EditorLayerUIState = {\n  root: HTMLDivElement\n  busy: HTMLDivElement\n}\n\n/**\n * @group Editor\n */\nexport type EditorLayerUI = {\n  root: HTMLDivElement\n  loader: HTMLDivElement\n  message: EditorLayerUIMessage\n  state: EditorLayerUIState\n}\n\n/**\n * @group Editor\n */\nexport class EditorLayer\n{\n  root: HTMLElement\n  ui: EditorLayerUI\n  rendering: HTMLElement\n\n  onCloseModal?: (inError?: boolean) => void\n\n  constructor(root: HTMLElement, rootClassCss: string = \"ms-editor\")\n  {\n    this.root = root\n    this.root.classList.add(rootClassCss)\n    this.rendering = this.createLayerRender()\n    this.ui = this.createLayerUI()\n  }\n\n  render(): void\n  {\n    const styleElement = document.createElement(\"style\")\n    styleElement.appendChild(document.createTextNode(style as string))\n    this.root.prepend(styleElement)\n\n    this.root.appendChild(this.rendering)\n    this.root.appendChild(this.ui.root)\n  }\n\n  createLoader(): HTMLDivElement\n  {\n    const loaderHTML = document.createElement(\"div\")\n    loaderHTML.classList.add(\"loader\")\n    loaderHTML.style.display = \"none\"\n    return loaderHTML\n  }\n  showLoader(): void\n  {\n    this.ui.loader.style.display = \"block\"\n  }\n  hideLoader(): void\n  {\n    this.ui.loader.style.display = \"none\"\n  }\n\n  createMessageOverlay(): HTMLDivElement\n  {\n    const overlay = document.createElement(\"div\")\n    overlay.classList.add(\"message-overlay\")\n    return overlay\n  }\n  closeMessageModal(): void\n  {\n    this.onCloseModal?.(this.ui.message.modal.root.classList.contains(\"error-msg\"))\n    this.hideMessageModal()\n  }\n\n  hideMessageModal(): void\n  {\n    this.ui.message.root.style.display = \"none\"\n    this.ui.message.modal.text.innerText = \"\"\n    this.ui.message.modal.root.classList.remove(\"error-msg\")\n    this.ui.message.modal.root.classList.remove(\"info-msg\")\n  }\n  createMessageModal(): EditorLayerUIInfoModal\n  {\n    const element = document.createElement(\"div\")\n    element.classList.add(\"message-modal\")\n\n    const closeBtn = document.createElement(\"button\")\n    closeBtn.classList.add(\"ms-button\", \"close\")\n    closeBtn.addEventListener(\"pointerup\", this.closeMessageModal.bind(this))\n    element.appendChild(closeBtn)\n\n    const text = document.createElement(\"p\")\n    element.appendChild(text)\n    return { root: element, text }\n  }\n  createMessage(): EditorLayerUIMessage\n  {\n    const root = document.createElement(\"div\")\n    root.classList.add(\"message-container\")\n    root.style.display = \"none\"\n\n    const overlay = this.createMessageOverlay()\n    root.appendChild(overlay)\n\n    const modal = this.createMessageModal()\n    root.appendChild(modal.root)\n\n    return {\n      root,\n      overlay,\n      modal\n    }\n  }\n  showMessageInfo(notif: { message: string, timeout?: number })\n  {\n    this.ui.message.modal.root.classList.add(\"info-msg\")\n    this.ui.message.modal.root.classList.remove(\"error-msg\")\n    this.ui.message.root.style.display = \"block\"\n    this.ui.message.modal.text.innerText = notif.message\n    setTimeout(() =>\n    {\n      this.closeMessageModal()\n    }, notif.timeout || 2500)\n  }\n  showMessageError(err: Error | string)\n  {\n    this.ui.message.modal.root.classList.add(\"error-msg\")\n    this.ui.message.modal.root.classList.remove(\"info-msg\")\n    this.ui.message.root.style.display = \"block\"\n    this.ui.message.modal.text.innerText = typeof err === \"string\" ? err : err.message\n  }\n\n  createBusy(): HTMLDivElement\n  {\n    const busy = document.createElement(\"div\")\n    busy.classList.add(\"busy\")\n    return busy\n  }\n  createState(): EditorLayerUIState\n  {\n    const root = document.createElement(\"div\")\n    root.classList.add(\"state\")\n    root.style.display = \"none\"\n\n    const busy = this.createBusy()\n    root.appendChild(busy)\n\n    return {\n      root,\n      busy\n    }\n  }\n  showState(): void\n  {\n    this.ui.state.root.style.display = \"block\"\n  }\n  hideState(): void\n  {\n    this.ui.state.root.style.display = \"none\"\n  }\n  updateState(idle: boolean): void\n  {\n    if (idle) {\n      this.hideState()\n    }\n    else {\n      this.showState()\n    }\n  }\n\n  createLayerUI(): EditorLayerUI\n  {\n    const root = document.createElement(\"div\")\n    root.classList.add(\"ms-layer-ui\")\n\n    const loader = this.createLoader()\n    root.appendChild(loader)\n\n    const message = this.createMessage()\n    root.appendChild(message.root)\n\n    const state = this.createState()\n    root.appendChild(state.root)\n\n    return {\n      root,\n      loader,\n      message,\n      state\n    }\n  }\n\n  createLayerRender(): HTMLDivElement\n  {\n    const render = document.createElement(\"div\")\n    render.classList.add(\"ms-layer-rendering\")\n    return render\n  }\n\n  destroy(): void\n  {\n    while (this.root.lastChild) {\n      this.root.removeChild(this.root.lastChild)\n    }\n  }\n}\n", "import { getApiInfos, PartialDeep, TApiInfos } from \"../utils\"\nimport {\n  LoggerCategory,\n  LoggerManager,\n  DefaultLoggerConfiguration,\n  TLoggerConfiguration\n} from \"../logger\"\nimport { TServerHTTPConfiguration } from \"../recognizer\"\nimport { EditorEvent } from \"./EditorEvent\"\nimport { EditorLayer } from \"./EditorLayer\"\n\n/**\n * @hidden\n * @group Editor\n */\nexport type TEditorConfiguration = {\n  logger: TLoggerConfiguration\n}\n\n/**\n * @group Editor\n * @remarks \"INKV1\" is deprecated use \"INKV2\" instead.\n */\nexport type EditorType = \"INTERACTIVEINK\" | \"INKV1\" | \"INTERACTIVEINKSSR\" | \"INKV2\"\n\n/**\n * @hidden\n * @group Editor\n */\nexport type EditorOptionsBase = {\n  configuration: TEditorConfiguration\n  override?: {\n    cssClass?: string\n  }\n}\n\n/**\n * @hidden\n * @group Editor\n */\nexport abstract class AbstractEditor\n{\n  logger = LoggerManager.getLogger(LoggerCategory.EDITOR)\n  layers: EditorLayer\n  event: EditorEvent\n  info?: TApiInfos\n\n  #loggerConfiguration!: TLoggerConfiguration\n\n  constructor(rootElement: HTMLElement, options?: PartialDeep<EditorOptionsBase>)\n  {\n    this.loggerConfiguration = Object.assign({}, DefaultLoggerConfiguration, options?.configuration?.logger)\n    this.logger.info(\"constructor\", { rootElement, options })\n\n    this.event = new EditorEvent(rootElement)\n    this.layers = new EditorLayer(rootElement, options?.override?.cssClass || \"ms-editor\")\n\n    //@ts-ignore\n    rootElement.editor = this\n  }\n\n  get loggerConfiguration(): TLoggerConfiguration\n  {\n    return this.#loggerConfiguration\n  }\n\n  set loggerConfiguration(loggerConfig: TLoggerConfiguration)\n  {\n    this.#loggerConfiguration = Object.assign({}, DefaultLoggerConfiguration, loggerConfig)\n    LoggerManager.setLoggerLevel(this.#loggerConfiguration)\n  }\n\n  abstract initialize(): Promise<void>\n\n  abstract clear(): Promise<void>\n\n  abstract destroy(): Promise<void>\n\n  async loadInfo(server: TServerHTTPConfiguration): Promise<TApiInfos>\n  {\n    if (!this.info) {\n      this.info = await getApiInfos({ server })\n    }\n    return this.info\n  }\n}\n", "import { isBetween } from \"../utils\"\nimport { TPoint, TSegment } from \"./Point\"\n\n/**\n * @group Symbol\n */\nexport type TBox = {\n  x: number,\n  y: number,\n  width: number,\n  height: number\n}\n\n/**\n * @group Symbol\n */\nexport class Box implements TBox\n{\n  x: number\n  y: number\n  width: number\n  height: number\n\n  constructor(boundindBox: TBox)\n  {\n    if (boundindBox.width < 0) throw new Error(\"width must be positive\")\n    if (boundindBox.height < 0) throw new Error(\"height must be positive\")\n    this.height = boundindBox.height\n    this.width = boundindBox.width\n    this.x = boundindBox.x\n    this.y = boundindBox.y\n  }\n\n  static createFromBoxes(boxes: TBox[]): Box\n  {\n    if (!boxes?.length) {\n      return new Box({ height: 0, width: 0, x: 0, y: 0 })\n    }\n    const x = Math.min(...boxes.map(b => b.x))\n    const width = Math.max(...boxes.map(b => b.x + b.width)) - x\n    const y = Math.min(...boxes.map(b => b.y))\n    const height = Math.max(...boxes.map(b => b.y + b.height)) - y\n    return new Box({ x, y, width, height })\n  }\n\n  static createFromPoints(points: TPoint[]): Box\n  {\n    if (!points?.length) {\n      return new Box({ height: 0, width: 0, x: 0, y: 0 })\n    }\n    const x = Math.min(...points.map(p => p.x))\n    const width = Math.max(...points.map(p => p.x)) - x\n    const y = Math.min(...points.map(p => p.y))\n    const height = Math.max(...points.map(p => p.y)) - y\n    return new Box({ x, y, width, height })\n  }\n\n  static getCorners(box: TBox): TPoint[]\n  {\n    return [\n      { x: box.x, y: box.y },\n      { x: box.x + box.width, y: box.y },\n      { x: box.x + box.width, y: box.y + box.height },\n      { x: box.x, y: box.y + box.height }\n    ]\n  }\n\n  static getCenter(box: TBox): TPoint\n  {\n    return { x: box.x + box.width / 2, y: box.y + box.height / 2 }\n  }\n\n  static getSides(box: TBox): TSegment[]\n  {\n    const vertices = Box.getCorners(box)\n    return vertices.map((p, i) =>\n    {\n      if (i === 3) {\n        return { p1: vertices[0], p2: p }\n      }\n      else {\n        return { p1: p, p2: vertices[i + 1] }\n      }\n    })\n  }\n\n  static isContained(box: TBox, wrapper: TBox): boolean\n  {\n    return isBetween(box.x, wrapper.x, wrapper.x + wrapper.width) &&\n      isBetween(box.x + box.width, wrapper.x, wrapper.x + wrapper.width) &&\n      isBetween(box.y, wrapper.y, wrapper.y + wrapper.height) &&\n      isBetween(box.y + box.height, wrapper.y, wrapper.y + wrapper.height)\n  }\n\n  static containsPoint(box: TBox, point: TPoint): boolean\n  {\n    return isBetween(point.x, box.x, box.x + box.width) &&\n      isBetween(point.y, box.y, box.y + box.height)\n  }\n\n  static contains(box: TBox, child: TBox): boolean\n  {\n    return isBetween(child.x, box.x, box.x + box.width) &&\n      isBetween(child.x + child.width, box.x, box.x + box.width) &&\n      isBetween(child.y, box.y, box.y + box.height) &&\n      isBetween(child.y + child.height, box.y, box.y + box.height)\n  }\n\n  static overlaps(box1: TBox, box2: TBox): boolean\n  {\n    if (box1.x > box2.x + box2.width) return false\n    if (box1.x + box1.width < box2.x) return false\n    if (box1.y > box2.y + box2.height) return false\n    if (box1.y + box1.height < box2.y) return false\n\n    return true\n  }\n\n  get xMin(): number\n  {\n    return this.x\n  }\n\n  get xMid(): number\n  {\n    return this.x + this.width / 2\n  }\n\n  get xMax(): number\n  {\n    return this.x + this.width\n  }\n\n  get yMin(): number\n  {\n    return this.y\n  }\n\n  get yMid(): number\n  {\n    return this.y + this.height / 2\n  }\n\n  get yMax(): number\n  {\n    return this.y + this.height\n  }\n\n  get corners(): TPoint[]\n  {\n    return Box.getCorners(this)\n  }\n\n  get center(): TPoint\n  {\n    return Box.getCenter(this)\n  }\n\n  get snapPoints(): TPoint[]\n  {\n    return [\n      ...this.corners,\n      this.center\n    ]\n  }\n\n  isContained(wrapper: TBox): boolean\n  {\n    return Box.isContained(this, wrapper)\n  }\n\n  contains(child: TBox): boolean\n  {\n    return Box.contains(this, child)\n  }\n\n  containsPoint(point: TPoint): boolean\n  {\n    return Box.containsPoint(this, point)\n  }\n\n  overlaps(boundaries: TBox): boolean\n  {\n    return Box.overlaps(this, boundaries)\n  }\n}\n", "/**\n * @group Style\n * @property {String} color=#000000 Color (supported formats rgb() rgba() hsl() hsla() #rgb #rgba #rrggbb #rrggbbaa)\n * @property {String} width in px\n\n */\nexport type TStyle = {\n  [key: string]: string | number | undefined\n  width: number\n  color: string\n  opacity?: number\n  fill?: string\n}\n\n/**\n * @group Style\n * @source\n */\nexport const DefaultStyle: TStyle = {\n  width: 2,\n  color: \"#000000\",\n//   opacity: 1,\n//   fill: \"transparent\",\n} as const\n", "import { PartialDeep } from \"../utils\"\nimport { TStyle } from \"./Style\"\n\n/**\n * @group Style\n * @property {String} -myscript-pen-width=1 Width of strokes and primitives in mm (no other unit is supported yet)\n * @property {String} -myscript-pen-fill-style=none\n * @property {String} -myscript-pen-fill-color=#FFFFFF00 Color filled inside the area delimited by strokes and primitives\n */\nexport type TPenStyle = PartialDeep<TStyle> & {\n  \"-myscript-pen-width\"?: number\n  \"-myscript-pen-fill-style\"?: string\n  \"-myscript-pen-fill-color\"?: string\n}\n\n/**\n * @group Style\n * @source\n */\nexport const DefaultPenStyle: TPenStyle = {\n}\n", "import { TPenStyle } from \"./PenStyle\"\n\n/**\n * @group Style\n */\nexport type TThemeMath = {\n  \"font-family\": string\n}\n\n/**\n * @group Style\n */\nexport type TThemeMathSolved = {\n  \"font-family\": string\n  color: string\n}\n\n/**\n * @group Style\n */\nexport type TThemeText = {\n  \"font-family\": string,\n  \"font-size\": number\n}\n\n/**\n * @group Style\n */\nexport type TTheme = {\n  ink: TPenStyle\n  \".math\": TThemeMath\n  \".math-solved\": TThemeMathSolved\n  \".text\": TThemeText\n  [key: string]: unknown\n}\n\n/**\n * @group Style\n * @source\n */\nexport const DefaultTheme: TTheme = {\n  ink: {\n    color: \"#000000\",\n    width: 1,\n    \"-myscript-pen-width\": 1,\n    \"-myscript-pen-fill-style\": \"none\",\n    \"-myscript-pen-fill-color\": \"#FFFFFF00\"\n  },\n  \".math\": {\n    \"font-family\": \"STIXGeneral\"\n  },\n  \".math-solved\": {\n    \"font-family\": \"STIXGeneral\",\n    color: \"#A8A8A8FF\"\n  },\n  \".text\": {\n    \"font-family\": \"MyScriptInter\",\n    \"font-size\": 10\n  }\n}\n", "!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define([],e):\"object\"==typeof exports?exports.JsonCSS=e():t.JsonCSS=e()}(this,function(){return function(t){function e(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var n={};return e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:o})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,\"a\",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p=\"\",e(e.s=1)}([function(t,e,n){\"use strict\";function o(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}Object.defineProperty(e,\"__esModule\",{value:!0});var r=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},i=function t(e){var n=this;o(this,t),this.toJSON=function(t){if(\"string\"!=typeof t)return console.error(\"Need a CSS string but given \",void 0===t?\"undefined\":r(t),t),\"Not a valid CSS..!\";var e={},o=void 0,i=void 0,u=void 0;try{t.split(\"{\").forEach(function(t){if(i=t.trim())if(-1===i.indexOf(\"}\"))e[i]={},o=i;else{i.substring(0,i.indexOf(\"}\")).split(\";\").forEach(function(t){(u=t.split(\":\"))&&2===u.length&&(e[o][u[0].trim().replace(/^\\\"|\\\"$/g,\"\")]=n._trimSemiColon(u[1].trim().replace(/^\\\"|\\\"$/g,\"\")))});try{o=i.split(\"}\")[1].trim(),o&&(e[o]={})}catch(t){}}})}catch(t){return\"Not a valid CSS..!\"}return e},this.toCSS=function(t){if(\"object\"!==(void 0===t?\"undefined\":r(t)))return console.error(\"Need a JSON object but given \",void 0===t?\"undefined\":r(t),t),\"Not a valid JSON..!\";var e=\"\";try{for(var n in t)if(t.hasOwnProperty(n)){e+=n+\" {\\n\";for(var o in t[n])t[n].hasOwnProperty(o)&&(e+=o+\": \"+t[n][o]+\";\\n\");e+=\"}\\n\"}}catch(t){return\"Not a valid JSON..!\"}return e},this._trimSemiColon=function(t){return\";\"===t.slice(-1)?t.slice(0,n.length-1):t}};e.default=i},function(t,e,n){\"use strict\";t.exports=n(0).default}])});", "import JsonCSS from \"json-css\"\nimport { TTheme } from \"./Theme\"\nimport { TPenStyle } from \"./PenStyle\"\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst parser: any = new JsonCSS()\n\n/**\n * @group Style\n */\nexport const StyleHelper = {\n  themeToCSS(json: TTheme): string\n  {\n    return parser.toCSS(json) as string\n    // css = css.replace( /[\\r\\n]+/gm, \"\" )\n    // return css\n  },\n  themeToJSON(style: string): TTheme\n  {\n    const theme = parser.toJSON(style) as TTheme\n    theme[\".text\"][\"font-size\"] = Number(theme[\".text\"][\"font-size\"])\n    theme.ink[\"-myscript-pen-width\"] = Number(theme.ink[\"-myscript-pen-width\"])\n    theme.ink.width = Number(theme.ink.width)\n    return theme\n  },\n  penStyleToCSS (penStyle: TPenStyle): string {\n    let css = parser.toCSS({ css: penStyle }) as string\n    css = css.substring(6, css.length - 3)\n    return css\n  },\n  penStyleToJSON (penStyleString: string): TPenStyle {\n    const penStyle = parser.toJSON(`css {${penStyleString}}`).css as TPenStyle\n    if (penStyle.width) {\n      penStyle.width = Number(penStyle.width)\n    } else {\n      delete penStyle.width\n    }\n    if (penStyle[\"-myscript-pen-width\"]) {\n      penStyle[\"-myscript-pen-width\"] = Number(penStyle[\"-myscript-pen-width\"])\n    } else {\n      delete penStyle[\"-myscript-pen-width\"]\n    }\n    return penStyle\n  },\n\n  stringToJSON(style: string): {[key: string]: string}\n  {\n    return parser.toJSON(`css {${style}}`).css\n  },\n  JSONToString(style: {[key: string]: string}): string\n  {\n    return Object.entries(style).map(([k, v]) => `${k}:${v}`).join(\";\")\n  }\n}\n", "import { LoggerCategory, LoggerManager } from \"../logger\"\nimport { PartialDeep, mergeDeep } from \"../utils\"\nimport { DefaultPenStyle, TPenStyle } from \"./PenStyle\"\nimport { DefaultTheme, TTheme } from \"./Theme\"\n\n/**\n * @group Style\n */\nexport class StyleManager\n{\n  #penStyle!: TPenStyle\n  #theme!: TTheme\n  #penStyleClasses!: string\n  #currentPenStyle!: TPenStyle\n  #logger =  LoggerManager.getLogger(LoggerCategory.STYLE)\n\n  constructor(penStyle?: PartialDeep<TPenStyle>, theme?: PartialDeep<TTheme>)\n  {\n    this.#logger.info(\"constructor\", { penStyle, theme })\n    this.setTheme(theme)\n    this.setPenStyleClasses()\n    this.setPenStyle(penStyle)\n  }\n\n  get currentPenStyle(): TPenStyle\n  {\n    return this.#currentPenStyle || this.#penStyle\n  }\n\n  get penStyle(): TPenStyle\n  {\n    return this.#penStyle\n  }\n  setPenStyle(style?: PartialDeep<TPenStyle>)\n  {\n    this.#logger.info(\"setPenStyle\", { style })\n    this.#penStyle = mergeDeep(structuredClone(DefaultPenStyle), style || {}) as TPenStyle\n    this.#currentPenStyle = style || (this.theme[`.${ this.#penStyleClasses }`]) as TPenStyle\n    this.#logger.debug(\"setPenStyle\", this.#currentPenStyle)\n  }\n\n  get theme(): TTheme\n  {\n    return this.#theme\n  }\n  setTheme(theme?: PartialDeep<TTheme>)\n  {\n    this.#logger.info(\"setTheme\", { theme })\n    this.#theme = mergeDeep(structuredClone(DefaultTheme), theme || {}) as TTheme\n    this.#logger.debug(\"setTheme\", this.#theme)\n  }\n\n  get penStyleClasses(): string\n  {\n    return this.#penStyleClasses\n  }\n  setPenStyleClasses(penStyleClass = \"\")\n  {\n    this.#logger.info(\"setPenStyleClasses\", { penStyleClass })\n    this.#penStyleClasses = penStyleClass\n    this.#currentPenStyle = (this.theme[`.${ this.#penStyleClasses }`]) as TPenStyle\n    this.#logger.debug(\"setPenStyleClasses\", this.#currentPenStyle)\n  }\n\n}\n", "import { createUUID, mergeDeep, PartialDeep } from \"../utils\"\nimport { DefaultStyle, TStyle } from \"../style\"\n\n/**\n * @group Symbol\n */\nexport enum DecoratorKind\n{\n  Highlight = \"highlight\",\n  Surround = \"surround\",\n  Underline = \"underline\",\n  Strikethrough = \"strikethrough\",\n}\n\n/**\n * @group Symbol\n */\nexport class IIDecorator\n{\n  id: string\n  kind: DecoratorKind\n  style: TStyle\n\n  constructor(kind: DecoratorKind, style: PartialDeep<TStyle>)\n  {\n    this.id = `${ kind }-${ createUUID() }`\n    this.style = structuredClone(mergeDeep({}, DefaultStyle ,style))\n    this.kind = kind\n  }\n\n  clone(): IIDecorator\n  {\n    const clone = new IIDecorator(this.kind, structuredClone(this.style))\n    clone.id = this.id\n    return clone\n  }\n\n}\n", "import { TStyle } from \"../style\"\nimport { PartialDeep } from \"../utils\"\n\n/**\n * @group Symbol\n */\nexport enum SymbolType\n{\n  Stroke = \"stroke\",\n  Group = \"group\",\n  Shape = \"shape\",\n  Edge = \"edge\",\n  Text = \"text\",\n  Eraser = \"eraser\",\n  Recognized = \"recognized\"\n}\n\n/**\n * @group Symbol\n */\nexport interface TSymbol {\n  id: string\n  creationTime: number\n  modificationDate: number\n  type: string\n  style: PartialDeep<TStyle>\n}\n", "import { SELECTION_MARGIN } from \"../../Constants\"\nimport { TStyle } from \"../../style\"\nimport { findIntersectionBetween2Segment, PartialDeep } from \"../../utils\"\nimport { Box, TBox } from \"../Box\"\nimport { IISymbolBase } from \"../IISymbolBase\"\nimport { TPoint } from \"../Point\"\nimport { SymbolType } from \"../Symbol\"\n\n/**\n * @group Symbol\n */\nexport enum EdgeKind\n{\n  Line = \"line\",\n  PolyEdge = \"polyedge\",\n  Arc = \"arc\",\n}\n\n/**\n * @group Symbol\n */\nexport enum EdgeDecoration\n{\n  Arrow = \"arrow-head\"\n}\n\n/**\n * @group Symbol\n */\nexport abstract class OIEdgeBase<K = EdgeKind> extends IISymbolBase<SymbolType.Edge>\n{\n  readonly kind: K\n  readonly isClosed = false\n\n  startDecoration?: EdgeDecoration\n  endDecoration?: EdgeDecoration\n\n  constructor(\n    kind: K,\n    startDecoration?: EdgeDecoration,\n    endDecoration?: EdgeDecoration,\n    style?: PartialDeep<TStyle>\n  )\n  {\n    super(SymbolType.Edge, style)\n    this.kind = kind\n\n    this.startDecoration = startDecoration\n    this.endDecoration = endDecoration\n  }\n\n  abstract get vertices(): TPoint[]\n\n  get bounds(): Box\n  {\n    const bb = Box.createFromPoints(this.vertices)\n    bb.x -= SELECTION_MARGIN / 2\n    bb.y -= SELECTION_MARGIN / 2\n    bb.height += SELECTION_MARGIN\n    bb.width += SELECTION_MARGIN\n    if (this.startDecoration || this.endDecoration) {\n      bb.x -= ((this.style.width || 1) * 2.5)\n      bb.y -= ((this.style.width || 1) * 2.5)\n      bb.height += ((this.style.width || 1) * 5)\n      bb.width += ((this.style.width || 1) * 5)\n    }\n    return bb\n  }\n\n  get snapPoints(): TPoint[]\n  {\n    return this.vertices\n  }\n\n  overlaps(box: TBox): boolean\n  {\n    return this.bounds.isContained(box) ||\n      this.edges.some(e1 => Box.getSides(box).some(e2 => !!findIntersectionBetween2Segment(e1, e2)))\n  }\n\n  abstract clone(): OIEdgeBase\n}\n", "import { TStyle } from \"../../style\"\nimport { findIntersectionBetween2Segment, PartialDeep } from \"../../utils\"\nimport { Box, TBox } from \"../Box\"\nimport { IISymbolBase } from \"../IISymbolBase\"\nimport { TPoint } from \"../Point\"\nimport { SymbolType } from \"../Symbol\"\n\n/**\n * @group Symbol\n */\nexport enum ShapeKind\n{\n  Circle = \"circle\",\n  Ellipse = \"ellipse\",\n  Polygon = \"polygon\",\n  Table = \"table\"\n}\n\n/**\n * @group Symbol\n */\nexport abstract class OIShapeBase<K = ShapeKind> extends IISymbolBase<SymbolType.Shape>\n{\n  readonly kind: K\n  readonly isClosed = true\n\n  constructor(kind: K, style?: PartialDeep<TStyle>)\n  {\n    super(SymbolType.Shape, style)\n    this.kind = kind\n  }\n\n  get bounds(): Box\n  {\n    return Box.createFromPoints(this.vertices)\n  }\n\n  get snapPoints(): TPoint[]\n  {\n    return this.bounds.snapPoints\n  }\n\n  overlaps(box: TBox): boolean\n  {\n    return this.bounds.isContained(box) ||\n      this.edges.some(e1 => Box.getSides(box).some(e2 => !!findIntersectionBetween2Segment(e1, e2)))\n  }\n}\n", "import { TStyle } from \"../../style\"\nimport { PartialDeep } from \"../../utils\"\nimport { Box, TBox } from \"../Box\"\nimport { IIStroke } from \"../IIStroke\"\nimport { IISymbolBase } from \"../IISymbolBase\"\nimport { TPoint } from \"../Point\"\nimport { SymbolType } from \"../Symbol\"\n\n/**\n * @group Symbol\n */\nexport enum RecognizedKind\n{\n  Text = \"text\",\n  Line = \"line\",\n  PolyEdge = \"polyedge\",\n  Arc = \"arc\",\n  Circle = \"circle\",\n  Ellipse = \"ellipse\",\n  Polygone = \"polygone\",\n}\n\n/**\n * @group Symbol\n */\nexport abstract class IIRecognizedBase<K = RecognizedKind> extends IISymbolBase<SymbolType.Recognized>\n{\n  readonly kind: K\n\n  strokes: IIStroke[]\n\n  constructor(\n    kind: K,\n    strokes: IIStroke[],\n    style?: PartialDeep<TStyle>\n  )\n  {\n    super(SymbolType.Recognized, style)\n    this.kind = kind\n    this.strokes = strokes\n  }\n\n  get vertices(): TPoint[]\n  {\n    return this.strokes.flatMap(s => s.vertices)\n  }\n\n  get bounds(): Box\n  {\n    return Box.createFromBoxes(this.strokes.map(c => c.bounds))\n  }\n\n  get snapPoints(): TPoint[]\n  {\n    return this.bounds.snapPoints\n  }\n\n  updateChildrenStyle(): void\n  {\n    this.strokes.forEach(child => child.style = Object.assign({}, child.style, this.style))\n  }\n\n  overlaps(box: TBox): boolean\n  {\n    return this.strokes.some(s => s.overlaps(box))\n  }\n\n  containsStroke(strokeId: string): boolean\n  {\n    return this.strokes.some(s => s.id === strokeId)\n  }\n\n  removeStrokes(strokeIds: string[]): IIStroke[]\n  {\n    const strokeRemoved = this.strokes.filter(s => strokeIds.includes(s.id))\n    this.strokes = this.strokes.filter(s => !strokeIds.includes(s.id))\n    return strokeRemoved\n  }\n}\n", "import { TPoint } from \"../symbol\"\n\n/**\n * @group Transform\n * @remarks Represents a 2D affine transform, defined as a 3x3 matrix with an implicit third raw of <code>[ 0 0 1 ]</code>\n */\nexport type TMatrixTransform = {\n  /**\n   * @remarks scaling x\n   */\n  xx: number,\n  /**\n   * @remarks shearing x\n   */\n  yx: number,\n  /**\n   * @remarks translation x\n   */\n  tx: number,\n  /**\n   * @remarks shearing y\n   */\n  xy: number,\n  /**\n   * @remarks scaling y\n   */\n  yy: number,\n  /**\n   * @remarks translation y\n   */\n  ty: number,\n}\n\n/**\n * @group Transform\n * @remarks Represents a 2D affine transform, defined as a 3x3 matrix with an implicit third raw of <code>[ 0 0 1 ]</code>\n */\nexport class MatrixTransform implements TMatrixTransform\n{\n  xx: number\n  yx: number\n  xy: number\n  yy: number\n  tx: number\n  ty: number\n\n  constructor(xx: number, yx: number, xy: number, yy: number, tx: number, ty: number)\n  {\n    this.xx = xx\n    this.yx = yx\n    this.xy = xy\n    this.yy = yy\n    this.tx = tx\n    this.ty = ty\n  }\n\n  static identity(): MatrixTransform\n  {\n    return new MatrixTransform(1, 0, 0, 1, 0, 0)\n  }\n\n  static applyToPoint(mat: TMatrixTransform, point: TPoint): TPoint\n  {\n    return {\n      x: mat.xx * point.x + mat.xy * point.y + mat.tx,\n      y: mat.yx * point.x + mat.yy * point.y + mat.ty,\n    }\n  }\n\n  static rotation(mat: TMatrixTransform): number\n  {\n    let rotation\n\n    if (mat.xx !== 0 || mat.xy !== 0) {\n      const hypotAc = Math.hypot(mat.xx, mat.xy)\n      rotation = Math.acos(mat.xx / hypotAc) * (mat.xy > 0 ? -1 : 1)\n    } else if (mat.yx !== 0 || mat.yy !== 0) {\n      const hypotBd = Math.hypot(mat.yx, mat.yy)\n      rotation = Math.PI / 2 + Math.acos(mat.yx / hypotBd) * (mat.yy > 0 ? -1 : 1)\n    } else {\n      rotation = 0\n    }\n\n    return rotation\n  }\n\n  static toCssString(matrix: TMatrixTransform): string\n  {\n    return `matrix(${ matrix.xx }, ${ matrix.yx }, ${ matrix.xy }, ${ matrix.yy }, ${ matrix.tx }, ${ matrix.ty })`\n  }\n\n\tinvert() {\n\t\tconst { xx, yx, xy, yy, tx, ty } = this\n\t\tconst denom = xx * yy - yx * xy\n\t\tthis.xx = yy / denom\n\t\tthis.yx = yx / -denom\n\t\tthis.xy = xy / -denom\n\t\tthis.yy = xx / denom\n\t\tthis.tx = (yy * tx - xy * ty) / -denom\n\t\tthis.ty = (yx * tx - xx * ty) / denom\n\t\treturn this\n\t}\n\n  multiply(m: TMatrixTransform): MatrixTransform\n  {\n    const { xx, yx, xy, yy, tx, ty } = this\n    this.xx = xx * m.xx + xy * m.yx\n    this.yx = yx * m.xx + yy * m.yx\n    this.xy = xx * m.xy + xy * m.yy\n    this.yy = yx * m.xy + yy * m.yy\n    this.tx = xx * m.tx + xy * m.ty + tx\n    this.ty = yx * m.tx + yy * m.ty + ty\n    return this\n  }\n\n  translate(tx: number, ty: number): MatrixTransform\n  {\n    return this.multiply({ xx: 1, yx: 0, xy: 0, yy: 1, tx, ty })\n  }\n\n  rotate(radian: number, center?: TPoint): MatrixTransform\n  {\n    if (center) {\n      this.translate(center.x, center.y)\n    }\n    const cosAngle = Math.round(Math.cos(radian) * 1000) / 1000\n    const sinAngle = Math.round(Math.sin(radian) * 1000) / 1000\n    this.multiply({\n      xx: cosAngle,\n      yx: sinAngle,\n      xy: -sinAngle,\n      yy: cosAngle,\n      tx: 0,\n      ty: 0\n    })\n    if (center) {\n      this.translate(-center.x, -center.y)\n    }\n    return this\n  }\n\n  scale(x: number, y: number, center?: TPoint): MatrixTransform\n  {\n    if (center) {\n      this.translate(center.x, center.y)\n    }\n    this.multiply({\n      xx: x,\n      yx: 0,\n      xy: 0,\n      yy: y,\n      tx: 0,\n      ty: 0\n    })\n    if (center) {\n      this.translate(-center.x, -center.y)\n    }\n    return this\n  }\n\n  applyToPoint(point: TPoint): TPoint\n  {\n    return MatrixTransform.applyToPoint(this, point)\n  }\n\n  clone(): MatrixTransform\n  {\n    return new MatrixTransform(this.xx, this.yx, this.xy, this.yy, this.tx, this.ty)\n  }\n\n  toCssString(): string\n  {\n    return MatrixTransform.toCssString(this)\n  }\n\n}\n", "import { PartialDeep, createUUID, findIntersectionBetween2Segment } from \"../utils\"\nimport { TBox } from \"./Box\"\nimport { TPoint, TSegment } from \"./Point\"\nimport { SymbolType, TSymbol } from \"./Symbol\"\nimport { DefaultStyle, TStyle } from \"../style\"\nimport { MatrixTransform } from \"../transform\"\n\n/**\n * @group Symbol\n */\nexport abstract class IISymbolBase<T extends string = SymbolType> implements TSymbol\n{\n  readonly type: T\n  abstract readonly isClosed: boolean\n  style: TStyle\n\n  id: string\n  creationTime: number\n  modificationDate: number\n  selected: boolean\n  deleting: boolean\n  transform: MatrixTransform\n\n  constructor(type: T, style?: PartialDeep<TStyle>)\n  {\n    this.type = type\n    this.id = `${ this.type }-${ createUUID() }`\n\n    this.creationTime = Date.now()\n    this.modificationDate = this.creationTime\n    this.selected = false\n    this.deleting = false\n\n    this.transform = MatrixTransform.identity()\n\n    this.style = Object.assign({}, DefaultStyle, style)\n    if (this.style.opacity) {\n      this.style.opacity = +this.style.opacity\n    }\n    this.style.width = +this.style.width\n  }\n\n  abstract get vertices(): TPoint[]\n\n  abstract get snapPoints(): TPoint[]\n\n  get edges(): TSegment[]\n  {\n    if (this.isClosed) {\n      return this.vertices.map((p, i) =>\n      {\n        if (i === this.vertices.length - 1) {\n          return { p1: p, p2: this.vertices[0] }\n        }\n        else {\n          return { p1: p, p2: this.vertices[i + 1] }\n        }\n      })\n    }\n    else {\n      return this.vertices.slice(0, -1).map((p, i) =>\n      {\n        return { p1: p, p2: this.vertices[i + 1] }\n      })\n    }\n  }\n\n  abstract overlaps(box: TBox): boolean\n\n  abstract clone(): IISymbolBase\n\n  abstract toJSON(): PartialDeep<IISymbolBase>\n\n  isIntersected(seg: TSegment): boolean\n  {\n    return this.edges.some(edge =>\n    {\n      return findIntersectionBetween2Segment(edge, seg)\n    })\n  }\n}\n", "import { PartialDeep, isValidNumber } from \"../utils\"\n\n/**\n * @group Symbol\n */\nexport type TPoint = {\n  x: number\n  y: number\n}\n\n/**\n * @group Symbol\n */\nexport type TPointer = TPoint & {\n  t: number\n  p: number\n}\n\n/**\n * @group Symbol\n */\nexport type TSegment = {\n  p1: TPoint\n  p2: TPoint\n}\n\n/**\n * @group Symbol\n */\nexport function isValidPoint(p?: PartialDeep<TPoint>): boolean\n{\n  if (!p) return false\n  if (!isValidNumber(p.x)) return false\n  if (!isValidNumber(p.y)) return false\n  return true\n}\n", "import { SELECTION_MARGIN } from \"../../Constants\"\nimport { TStyle } from \"../../style\"\nimport { PartialDeep, computePointOnEllipse, isValidNumber } from \"../../utils\"\nimport { EdgeDecoration, EdgeKind, OIEdgeBase } from \"./IIEdge\"\nimport { TPoint, isValidPoint } from \"../Point\"\n\n/**\n * @group Symbol\n */\nexport class IIEdgeArc extends OIEdgeBase<EdgeKind.Arc>\n{\n  center: TPoint\n  startAngle: number\n  sweepAngle: number\n  radiusX: number\n  radiusY: number\n  phi: number\n  protected _vertices: Map<string, TPoint[]>\n\n  constructor(\n    center: TPoint,\n    startAngle: number,\n    sweepAngle: number,\n    radiusX: number,\n    radiusY: number,\n    phi: number,\n    startDecoration?: EdgeDecoration,\n    endDecoration?: EdgeDecoration,\n    style?: PartialDeep<TStyle>,\n  )\n  {\n    super(EdgeKind.Arc, startDecoration, endDecoration, style)\n    this.center = center\n    this.startAngle = startAngle\n    this.sweepAngle = sweepAngle\n    this.radiusX = radiusX\n    this.radiusY = radiusY\n    this.phi = phi\n    this._vertices = new Map<string, TPoint[]>()\n    this._vertices.set(this.verticesId, this.computedVertices())\n  }\n\n  protected get verticesId(): string\n  {\n    return `${ this.center.x }-${ this.center.y }-${ this.startAngle }-${ this.sweepAngle }-${ this.radiusX }-${ this.radiusY }-${ this.phi }`\n  }\n\n  protected computedVertices(): TPoint[]\n  {\n    const length = Math.abs(this.sweepAngle) * Math.sqrt((Math.pow(this.radiusX, 2) + Math.pow(this.radiusY, 2)) / 2)\n    const nbVertices = Math.max(8, Math.round(length / SELECTION_MARGIN))\n    const angleStep = this.sweepAngle / nbVertices\n    const v: TPoint[] = []\n    const endAngle = this.startAngle + this.sweepAngle\n    if (this.sweepAngle > 0) {\n      for (let angle = this.startAngle; angle < endAngle; angle += angleStep) {\n        v.push(computePointOnEllipse(this.center, this.radiusX, this.radiusY, this.phi, angle))\n      }\n    } else {\n      for (let angle = this.startAngle; angle > endAngle; angle += angleStep) {\n        v.push(computePointOnEllipse(this.center, this.radiusX, this.radiusY, this.phi, angle))\n      }\n    }\n    v.push(computePointOnEllipse(this.center, this.radiusX, this.radiusY, this.phi, endAngle))\n    return v\n  }\n\n  get vertices(): TPoint[]\n  {\n    if (!this._vertices.has(this.verticesId)) {\n      this._vertices.set(this.verticesId, this.computedVertices())\n    }\n    return this._vertices.get(this.verticesId)!\n  }\n\n  get snapPoints(): TPoint[]\n  {\n    return [\n      this.vertices[0],\n      this.vertices.at(-1)!\n    ]\n  }\n\n  clone(): IIEdgeArc\n  {\n    const clone = new IIEdgeArc(\n      structuredClone(this.center),\n      this.startAngle,\n      this.sweepAngle,\n      this.radiusX,\n      this.radiusY,\n      this.phi,\n      this.startDecoration,\n      this.endDecoration,\n      structuredClone(this.style)\n    )\n    clone.id = this.id\n    clone.selected = this.selected\n    clone.deleting = this.deleting\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    return clone\n  }\n\n  toJSON(): PartialDeep<IIEdgeArc>\n  {\n    return {\n      id: this.id,\n      type: this.type,\n      kind: this.kind,\n      center: this.center,\n      startAngle: this.startAngle,\n      sweepAngle: this.sweepAngle,\n      radiusX: this.radiusX,\n      radiusY: this.radiusY,\n      phi: this.phi,\n      startDecoration: this.startDecoration,\n      style: this.style,\n      endDecoration: this.endDecoration,\n    }\n  }\n\n  static create(partial: PartialDeep<IIEdgeArc>): IIEdgeArc\n  {\n    if (!isValidPoint(partial?.center)) throw new Error(`Unable to create a arc, center point is invalid`)\n    if (!isValidNumber(partial?.startAngle)) throw new Error(`Unable to create a arc, startAngle is invalid`)\n    if (!isValidNumber(partial?.sweepAngle)) throw new Error(`Unable to create a arc, sweepAngle is invalid`)\n    if (!isValidNumber(partial?.radiusX)) throw new Error(`Unable to create a arc, radiusX is invalid`)\n    if (!isValidNumber(partial?.radiusY)) throw new Error(`Unable to create a arc, radiusY is invalid`)\n    const arc = new IIEdgeArc(\n      partial?.center as TPoint,\n      partial.startAngle!,\n      partial.sweepAngle!,\n      partial.radiusX!,\n      partial.radiusY!,\n      partial.phi || 0,\n      partial.startDecoration,\n      partial.endDecoration,\n      partial.style\n    )\n    if (partial.id) {\n      arc.id = partial.id\n    }\n    return arc\n  }\n}\n", "import { TStyle } from \"../../style\"\nimport { PartialDeep } from \"../../utils\"\nimport { EdgeDecoration, EdgeKind, OIEdgeBase } from \"./IIEdge\"\nimport { TPoint, isValidPoint } from \"../Point\"\n\n/**\n * @group Symbol\n */\nexport class IIEdgeLine extends OIEdgeBase<EdgeKind.Line>\n{\n  start: TPoint\n  end: TPoint\n\n  constructor(\n    start: TPoint,\n    end: TPoint,\n    startDecoration?: EdgeDecoration,\n    endDecoration?: EdgeDecoration,\n    style?: PartialDeep<TStyle>\n  )\n  {\n    super(EdgeKind.Line, startDecoration, endDecoration, style)\n    this.start = start\n    this.end = end\n  }\n\n  get vertices(): TPoint[]\n  {\n    return [\n      this.start,\n      this.end\n    ]\n  }\n\n  clone(): IIEdgeLine\n  {\n    const clone = new IIEdgeLine(structuredClone(this.start), structuredClone(this.end), this.startDecoration, this.endDecoration, structuredClone(this.style))\n    clone.id = this.id\n    clone.selected = this.selected\n    clone.deleting = this.deleting\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    return clone\n  }\n\n  toJSON(): PartialDeep<IIEdgeLine>\n  {\n    return {\n      id: this.id,\n      type: this.type,\n      kind: this.kind,\n      start: this.start,\n      end: this.end,\n      style: this.style,\n      startDecoration: this.startDecoration,\n      endDecoration: this.endDecoration,\n    }\n  }\n\n  static create(partial: PartialDeep<IIEdgeLine>): IIEdgeLine\n  {\n    if (!isValidPoint(partial?.start)) throw new Error(`Unable to create a arc, start point is invalid`)\n    if (!isValidPoint(partial?.end)) throw new Error(`Unable to create a arc, end point is invalid`)\n    const line = new IIEdgeLine(partial?.start as TPoint, partial?.end as TPoint, partial.startDecoration, partial.endDecoration, partial.style)\n    if (partial.id) {\n      line.id = partial.id\n    }\n    return line\n  }\n}\n", "import { TStyle } from \"../../style\"\nimport { PartialDeep } from \"../../utils\"\nimport { EdgeDecoration, EdgeKind, OIEdgeBase } from \"./IIEdge\"\nimport { TPoint, isValidPoint } from \"../Point\"\n\n/**\n * @group Symbol\n */\nexport class IIEdgePolyLine extends OIEdgeBase<EdgeKind.PolyEdge>\n{\n  points: TPoint[]\n\n  constructor(\n    points: TPoint[],\n    startDecoration?: EdgeDecoration,\n    endDecoration?: EdgeDecoration,\n    style?: PartialDeep<TStyle>\n  )\n  {\n    super(EdgeKind.PolyEdge, startDecoration, endDecoration, style)\n    this.points = points\n  }\n\n  get vertices(): TPoint[]\n  {\n    return this.points\n  }\n\n  clone(): IIEdgePolyLine\n  {\n    const clone = new IIEdgePolyLine(structuredClone(this.points),this.startDecoration, this.endDecoration, structuredClone(this.style))\n    clone.id = this.id\n    clone.selected = this.selected\n    clone.deleting = this.deleting\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    return clone\n  }\n\n  toJSON(): PartialDeep<IIEdgePolyLine>\n  {\n    return {\n      id: this.id,\n      type: this.type,\n      kind: this.kind,\n      points: this.points,\n      style: this.style,\n      startDecoration: this.startDecoration,\n      endDecoration: this.endDecoration,\n    }\n  }\n\n  static create(partial: PartialDeep<IIEdgePolyLine>): IIEdgePolyLine\n  {\n    if (!partial?.points?.map(p => isValidPoint(p))) throw new Error(`Unable to create a PolyLine, points are invalid`)\n    const polyline = new IIEdgePolyLine(partial?.points as TPoint[], partial.startDecoration, partial.endDecoration, partial.style)\n    if (partial.id) {\n      polyline.id = partial.id\n    }\n    return polyline\n  }\n}\n", "import { SELECTION_MARGIN } from \"../../Constants\"\nimport { TStyle } from \"../../style\"\nimport { PartialDeep, findIntersectBetweenSegmentAndCircle, isValidNumber, computeRotatedPoint } from \"../../utils\"\nimport { TPoint, isValidPoint } from \"../Point\"\nimport { OIShapeBase, ShapeKind } from \"./IIShape\"\nimport { Box, TBox } from \"../Box\"\n\n/**\n * @group Symbol\n */\nexport class IIShapeCircle extends OIShapeBase<ShapeKind.Circle>\n{\n  center: TPoint\n  radius: number\n  protected _vertices: Map<string, TPoint[]>\n  protected _bounds: Map<string, Box>\n\n  constructor(\n    center: TPoint,\n    radius: number,\n    style?: PartialDeep<TStyle>\n  )\n  {\n    super(ShapeKind.Circle, style)\n    this.center = center\n    this.radius = radius\n    this._vertices = new Map<string, TPoint[]>()\n    this._vertices.set(this.verticesId, this.computedVertices())\n    this._bounds = new Map<string, Box>()\n    this._bounds.set(this.verticesId, this.computedBondingBox())\n  }\n\n  protected get verticesId(): string\n  {\n    return `${ this.center.x }-${ this.center.y }-${ this.radius }`\n  }\n\n  protected computedVertices(): TPoint[]\n  {\n    const firstPoint: TPoint = {\n      x: this.center.x,\n      y: this.radius + this.center.y\n    }\n    const perimeter = 2 * Math.PI * this.radius\n    const nbPoint = Math.max(8, Math.round(perimeter / SELECTION_MARGIN))\n    const points: TPoint[] = []\n    for (let i = 0; i < nbPoint; i++) {\n      const rad = 2 * Math.PI * (i / nbPoint)\n      points.push(computeRotatedPoint(firstPoint, this.center, rad))\n    }\n    return points\n  }\n\n  protected computedBondingBox(): Box\n  {\n    const boundingBox: TBox = {\n      x: this.center.x - this.radius,\n      y: this.center.y - this.radius,\n      height: this.radius * 2,\n      width: this.radius * 2\n    }\n    return new Box(boundingBox)\n  }\n\n  get bounds(): Box\n  {\n    if (!this._bounds.has(this.verticesId)) {\n      this._bounds.set(this.verticesId, this.computedBondingBox())\n    }\n    return this._bounds.get(this.verticesId)!\n  }\n\n  get vertices(): TPoint[]\n  {\n    if (!this._vertices.has(this.verticesId)) {\n      this._vertices.set(this.verticesId, this.computedVertices())\n    }\n    return this._vertices.get(this.verticesId)!\n  }\n\n  overlaps(box: TBox): boolean\n  {\n    return this.bounds.isContained(box) ||\n      Box.getSides(box).some(seg => findIntersectBetweenSegmentAndCircle(seg, this.center, this.radius).length)\n  }\n\n  clone(): IIShapeCircle\n  {\n    const clone = new IIShapeCircle(structuredClone(this.center), this.radius, structuredClone(this.style))\n    clone.id = this.id\n    clone.selected = this.selected\n    clone.deleting = this.deleting\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    return clone\n  }\n\n  toJSON(): PartialDeep<IIShapeCircle>\n  {\n    return {\n      id: this.id,\n      type: this.type,\n      kind: this.kind,\n      center: this.center,\n      radius: this.radius,\n      style: this.style,\n    }\n  }\n\n  static createBetweenPoints(origin: TPoint, target: TPoint, style?: PartialDeep<TStyle>): IIShapeCircle\n  {\n    const center = {\n      x: (origin.x + target.x) / 2,\n      y: (origin.y + target.y) / 2\n    }\n\n    const width = Math.abs(origin.x - target.x)\n    const height = Math.abs(origin.y - target.y)\n    const radius = Math.min(width, height) / 2\n    return new IIShapeCircle(center, radius, style)\n  }\n\n  static updateBetweenPoints(circle: IIShapeCircle, origin: TPoint, target: TPoint): IIShapeCircle\n  {\n    circle.center = {\n      x: (origin.x + target.x) / 2,\n      y: (origin.y + target.y) / 2\n    }\n    const width = Math.abs(origin.x - target.x)\n    const height = Math.abs(origin.y - target.y)\n    circle.radius = Math.min(width, height) / 2\n    return circle\n  }\n\n  static create(partial: PartialDeep<IIShapeCircle>): IIShapeCircle\n  {\n    if (!isValidPoint(partial.center)) throw new Error(`Unable to create circle, center is invalid`)\n    if (!isValidNumber(partial.radius)) throw new Error(`Unable to create circle, radius is undefined`)\n    const circle = new IIShapeCircle(partial.center as TPoint, partial.radius!, partial.style)\n    if (partial.id) {\n      circle.id = partial.id\n    }\n    return circle\n  }\n}\n", "import { SELECTION_MARGIN } from \"../../Constants\"\nimport { TStyle } from \"../../style\"\nimport { PartialDeep, computePointOnEllipse, findIntersectionBetween2Segment, isValidNumber, } from \"../../utils\"\nimport { TPoint, isValidPoint } from \"../Point\"\nimport { OIShapeBase, ShapeKind } from \"./IIShape\"\nimport { Box, TBox } from \"../Box\"\n\n/**\n * @group Symbol\n */\nexport class IIShapeEllipse extends OIShapeBase<ShapeKind.Ellipse>\n{\n  center: TPoint\n  radiusX: number\n  radiusY: number\n  orientation: number\n  protected _vertices: Map<string, TPoint[]>\n\n  constructor(\n    center: TPoint,\n    radiusX: number,\n    radiusY: number,\n    orientation: number,\n    style?: PartialDeep<TStyle>\n  )\n  {\n    super(ShapeKind.Ellipse, style)\n    this.center = center\n    this.radiusX = radiusX\n    this.radiusY = radiusY\n    this.orientation = orientation\n    this._vertices = new Map<string, TPoint[]>()\n  }\n\n  protected get verticesId(): string\n  {\n    return `${ this.center.x }-${ this.center.y }-${ this.radiusX }-${ this.radiusY }-${ this.orientation }`\n  }\n\n  protected computedVertices(): TPoint[]\n  {\n    const points: TPoint[] = []\n    const perimeter = 2 * Math.PI * Math.sqrt((Math.pow(this.radiusX, 2) + Math.pow(this.radiusY, 2)) / 2)\n    const nbPoint = Math.max(8, Math.round(perimeter / SELECTION_MARGIN))\n    for (let i = 0; i < nbPoint; i++) {\n      const theta = 2 * Math.PI * (i / nbPoint)\n      points.push(computePointOnEllipse(this.center, this.radiusX, this.radiusY, this.orientation, theta))\n    }\n\n    return points\n  }\n\n  get vertices(): TPoint[]\n  {\n    if (!this._vertices.has(this.verticesId)) {\n      this._vertices.set(this.verticesId, this.computedVertices())\n    }\n    return this._vertices.get(this.verticesId)!\n  }\n\n  overlaps(box: TBox): boolean\n  {\n\n    return this.bounds.isContained(box) ||\n      this.edges.some(e1 => Box.getSides(box).some(e2 => !!findIntersectionBetween2Segment(e1, e2)))\n  }\n\n  clone(): IIShapeEllipse\n  {\n    const clone = new IIShapeEllipse(structuredClone(this.center), this.radiusX, this.radiusY, this.orientation, structuredClone(this.style))\n    clone.id = this.id\n    clone.selected = this.selected\n    clone.deleting = this.deleting\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    return clone\n  }\n\n  toJSON(): PartialDeep<IIShapeEllipse>\n  {\n    return {\n      id: this.id,\n      type: this.type,\n      kind: this.kind,\n      center: this.center,\n      orientation: this.orientation,\n      radiusX: this.radiusX,\n      radiusY: this.radiusY,\n      style: this.style,\n    }\n  }\n\n  static createBetweenPoints(origin: TPoint, target: TPoint, style?: PartialDeep<TStyle>): IIShapeEllipse\n  {\n    const center = {\n      x: (origin.x + target.x) / 2,\n      y: (origin.y + target.y) / 2\n    }\n    const radiusX = Math.abs(origin.x - target.x) / 2\n    const radiusY = Math.abs(origin.y - target.y) / 2\n    return new IIShapeEllipse(center, radiusX, radiusY, 0, style)\n  }\n\n  static updateBetweenPoints(ellipse: IIShapeEllipse, origin: TPoint, target: TPoint): IIShapeEllipse\n  {\n    ellipse.center = {\n      x: (origin.x + target.x) / 2,\n      y: (origin.y + target.y) / 2\n    }\n    ellipse.radiusX = Math.abs(origin.x - target.x) / 2\n    ellipse.radiusY = Math.abs(origin.y - target.y) / 2\n    return ellipse\n  }\n\n  static create(partial: PartialDeep<IIShapeEllipse>): IIShapeEllipse\n  {\n    if (!isValidPoint(partial.center)) throw new Error(`Unable to create ellipse, center is undefined`)\n    if (!isValidNumber(partial.radiusX)) throw new Error(`Unable to create ellipse, radiusX is undefined`)\n    if (!isValidNumber(partial.radiusY)) throw new Error(`Unable to create ellipse, radiusY is undefined`)\n    const ellipse = new IIShapeEllipse(partial.center as TPoint, partial.radiusX!, partial.radiusY!, partial.orientation || 0, partial.style)\n    if (partial.id) {\n      ellipse.id = partial.id\n    }\n    return ellipse\n  }\n}\n", "import { TStyle } from \"../../style\"\nimport { TPoint, isValidPoint } from \"../Point\"\nimport { OIShapeBase, ShapeKind } from \"./IIShape\"\nimport { Box } from \"../Box\"\nimport { PartialDeep } from \"../../utils\"\n\n/**\n * @group Symbol\n */\nexport class IIShapePolygon extends OIShapeBase<ShapeKind.Polygon>\n{\n  points: TPoint[]\n\n  constructor(points: TPoint[], style?: PartialDeep<TStyle>)\n  {\n    super(ShapeKind.Polygon, style)\n    this.points = points\n  }\n\n  get vertices(): TPoint[]\n  {\n    return this.points\n  }\n\n  get bounds(): Box\n  {\n    return Box.createFromPoints(this.vertices)\n  }\n\n  clone(): IIShapePolygon\n  {\n    const clone = new IIShapePolygon(structuredClone(this.points), structuredClone(this.style))\n    clone.id = this.id\n    clone.selected = this.selected\n    clone.deleting = this.deleting\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    return clone\n  }\n\n  toJSON(): PartialDeep<IIShapePolygon>\n  {\n    return {\n      id: this.id,\n      type: this.type,\n      kind: this.kind,\n      points: this.points,\n      style: this.style,\n    }\n  }\n\n  static create(partial: PartialDeep<IIShapePolygon>): IIShapePolygon\n  {\n    if (!partial?.points || partial?.points?.length < 3) throw new Error(`Unable to create polygon at least 3 points required`)\n    if (partial?.points?.some(p => !isValidPoint(p))) throw new Error(`Unable to create a polygon, one or more points are invalid`)\n    const polygon = new IIShapePolygon(partial.points as TPoint[], partial.style)\n    if (partial.id) {\n      polygon.id = partial.id\n    }\n    return polygon\n  }\n\n  static createTriangleBetweenPoints(origin: TPoint, target: TPoint, style?: PartialDeep<TStyle>): IIShapePolygon\n  {\n    const points: TPoint[] = [\n      { x: origin.x, y: origin.y },\n      { x: target.x, y: origin.y },\n      { x: (origin.x + target.x) / 2, y: target.y }\n    ]\n    return new IIShapePolygon(points, style)\n  }\n  static updateTriangleBetweenPoints(poly: IIShapePolygon, origin: TPoint, target: TPoint): IIShapePolygon\n  {\n    poly.points = [\n      { x: origin.x, y: origin.y },\n      { x: target.x, y: origin.y },\n      { x: (origin.x + target.x) / 2, y: target.y }\n    ]\n    poly.modificationDate = Date.now()\n    return poly\n  }\n\n  static createParallelogramBetweenPoints(origin: TPoint, target: TPoint, style?: PartialDeep<TStyle>): IIShapePolygon\n  {\n    const points: TPoint[] = [\n      { x: origin.x, y: origin.y },\n      { x: origin.x + (target.x - origin.x) * 0.75, y: origin.y },\n      { x: target.x, y: target.y },\n      { x: origin.x + (target.x - origin.x) * 0.25, y: target.y },\n    ]\n    return new IIShapePolygon(points, style)\n  }\n  static updateParallelogramBetweenPoints(poly: IIShapePolygon, origin: TPoint, target: TPoint): IIShapePolygon\n  {\n    const points: TPoint[] = [\n      { x: origin.x, y: origin.y },\n      { x: origin.x + (target.x - origin.x) * 0.75, y: origin.y },\n      { x: target.x, y: target.y },\n      { x: origin.x + (target.x - origin.x) * 0.25, y: target.y },\n    ]\n    poly.points = points\n    poly.modificationDate = Date.now()\n    return poly\n  }\n\n  static createRectangleBetweenPoints(origin: TPoint, target: TPoint, style?: PartialDeep<TStyle>): IIShapePolygon\n  {\n    const box = Box.createFromPoints([origin, target])\n    const points: TPoint[] = [\n      { x: box.xMin, y: box.yMin },\n      { x: box.xMax, y: box.yMin },\n      { x: box.xMax, y: box.yMax },\n      { x: box.xMin, y: box.yMax },\n    ]\n    return new IIShapePolygon(points, style)\n  }\n  static updateRectangleBetweenPoints(poly: IIShapePolygon, origin: TPoint, target: TPoint): IIShapePolygon\n  {\n    const box = Box.createFromPoints([origin, target])\n    const points: TPoint[] = [\n      { x: box.xMin, y: box.yMin },\n      { x: box.xMax, y: box.yMin },\n      { x: box.xMax, y: box.yMax },\n      { x: box.xMin, y: box.yMax },\n    ]\n    poly.points = points\n    poly.modificationDate = Date.now()\n    return poly\n  }\n\n  static createRhombusBetweenPoints(origin: TPoint, target: TPoint, style?: PartialDeep<TStyle>): IIShapePolygon\n  {\n    const box = Box.createFromPoints([origin, target])\n    const points: TPoint[] = [\n      { x: box.xMid, y: box.yMin },\n      { x: box.xMax, y: box.yMid },\n      { x: box.xMid, y: box.yMax },\n      { x: box.xMin, y: box.yMid },\n    ]\n    return new IIShapePolygon(points, style)\n  }\n\n  static updateRhombusBetweenPoints(poly: IIShapePolygon, origin: TPoint, target: TPoint): IIShapePolygon\n  {\n    const box = Box.createFromPoints([origin, target])\n    const points: TPoint[] = [\n      { x: box.xMid, y: box.yMin },\n      { x: box.xMax, y: box.yMid },\n      { x: box.xMid, y: box.yMax },\n      { x: box.xMin, y: box.yMid },\n    ]\n    poly.points = points\n    poly.modificationDate = Date.now()\n    return poly\n  }\n}\n", "import { TStyle } from \"../style\"\nimport { PartialDeep, computeDistance, getClosestPoint } from \"../utils\"\nimport { TStroke, TStrokeToSend } from \"./Stroke\"\nimport { TPoint, TPointer } from \"./Point\"\nimport { Box, TBox } from \"./Box\"\nimport { SymbolType } from \"./Symbol\"\nimport { IIDecorator } from \"./IIDecorator\"\nimport { IISymbolBase } from \"./IISymbolBase\"\n\n/**\n * @group Symbol\n */\nexport class IIStroke extends IISymbolBase<SymbolType.Stroke>\n{\n  readonly isClosed = false\n\n  pointerType: string\n  length: number\n  decorators: IIDecorator[]\n  pointers: Array<TPointer>\n\n  constructor(style?: PartialDeep<TStyle>, pointerType = \"pen\")\n  {\n    super(SymbolType.Stroke, style)\n\n    this.pointerType = pointerType\n    this.pointers = []\n    this.decorators = []\n    this.length = 0\n  }\n\n  get bounds(): Box\n  {\n    return Box.createFromPoints(this.vertices)\n  }\n\n  static split(strokeToSplit: IIStroke, i: number): { before: IIStroke, after: IIStroke }\n  {\n    const before = new IIStroke(strokeToSplit.style, strokeToSplit.pointerType)\n    before.pointers = strokeToSplit.pointers.slice(0, i)\n\n    const after = new IIStroke(strokeToSplit.style, strokeToSplit.pointerType)\n    after.pointers = strokeToSplit.pointers.slice(i)\n\n    return { before, after }\n  }\n\n  static substract(stroke: IIStroke, partStroke: IIStroke): { before?: IIStroke, after?: IIStroke }\n  {\n    if (!partStroke.length) return { before: stroke }\n    const result: { before?: IIStroke, after?: IIStroke } = {}\n    const lastPointBeforeStroke = {\n      x: partStroke.pointers[0].x as number,\n      y: partStroke.pointers[0].y as number\n    }\n    const closestLastPointBeforeStroke = getClosestPoint(stroke.pointers, lastPointBeforeStroke)\n    if (closestLastPointBeforeStroke.index > -1) {\n      const newStrokes = IIStroke.split(stroke, closestLastPointBeforeStroke.index)\n      result.before = newStrokes.before\n      result.after = newStrokes.after\n    }\n    const strokeAfter = result.after || stroke\n    const firstPointAfterStroke = {\n      x: partStroke.pointers.at(-1)!.x as number,\n      y: partStroke.pointers.at(-1)!.y as number\n    }\n    const closestFirstPointStrokeAfter = getClosestPoint(strokeAfter.pointers, firstPointAfterStroke)\n    if (closestFirstPointStrokeAfter.index > -1) {\n      const newStrokes = IIStroke.split(strokeAfter, closestFirstPointStrokeAfter.index)\n      result.after = newStrokes.after\n    }\n    if (!result.before?.pointers.length) result.before = undefined\n    if (!result.after?.pointers.length) result.after = undefined\n    return result\n  }\n\n  get snapPoints(): TPoint[]\n  {\n    return this.bounds.snapPoints\n  }\n\n  get vertices(): TPoint[]\n  {\n    return this.pointers\n  }\n\n  protected computePressure(distance: number): number\n  {\n    let ratio = 1.0\n    if (distance === this.length) {\n      ratio = 1.0\n    } else if (distance < 10) {\n      ratio = 0.2 + Math.pow(0.1 * distance, 0.4)\n    } else if (distance > this.length - 10) {\n      ratio = 0.2 + Math.pow(0.1 * (this.length - distance), 0.4)\n    }\n    const pressure = ratio * Math.max(0.1, 1.0 - (0.1 * Math.sqrt(distance)))\n    return isNaN(pressure) ? 0.5 : Math.round(pressure * 100) / 100\n  }\n\n  protected filterPointByAcquisitionDelta(point: TPointer): boolean\n  {\n    const lastPointer = this.pointers.at(-1)\n    const delta: number = (2 + ((this.style.width || 1) / 4))\n    return !lastPointer ||\n      Math.abs(lastPointer.x - point.x) >= delta ||\n      Math.abs(lastPointer.y - point.y) >= delta\n  }\n\n  addPointer(pointer: TPointer): void\n  {\n    if (this.filterPointByAcquisitionDelta(pointer)) {\n      const lastPointer = this.pointers.at(-1)\n      const distance = lastPointer ? computeDistance(pointer, lastPointer) : 0\n      this.length += distance\n      pointer.p = this.computePressure(distance)\n      this.pointers.push(pointer)\n      this.modificationDate = Date.now()\n    }\n  }\n\n  overlaps(box: TBox): boolean\n  {\n    return this.pointers.some(p =>\n    {\n      return p.x >= box.x && p.x <= box.x + box.width\n        && p.y >= box.y && p.y <= box.y + box.height\n    })\n  }\n\n  clone(): IIStroke\n  {\n    const clone = new IIStroke(this.style, this.pointerType)\n    clone.id = this.id\n    clone.selected = this.selected\n    clone.deleting = this.deleting\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    clone.pointers = structuredClone(this.pointers)\n    clone.decorators = this.decorators.map(d => d.clone())\n    clone.length = this.length\n    return clone\n  }\n\n  formatToSend(): TStrokeToSend\n  {\n    const json: TStrokeToSend = {\n      id: this.id,\n      pointerType: this.pointerType,\n      p: [],\n      t: [],\n      x: [],\n      y: []\n    }\n    this.pointers.forEach(p =>\n    {\n      json.p.push(p.p)\n      json.t.push(p.t)\n      json.x.push(p.x)\n      json.y.push(p.y)\n    })\n    return json\n  }\n\n  toJSON(): PartialDeep<IIStroke>\n  {\n    return {\n      id: this.id,\n      type: this.type,\n      pointers: this.pointers,\n      style: this.style,\n      decorators: this.decorators.length ? this.decorators : undefined\n    }\n  }\n\n  static create(partial: PartialDeep<IIStroke>): IIStroke\n  {\n    if (!partial.pointers?.length) {\n      throw new Error(`not pointers`)\n    }\n    const stroke = new IIStroke(partial.style, partial.pointerType)\n    if (partial.id) {\n      stroke.id = partial.id\n    }\n    const errors: string[] = []\n    let flag = true\n    partial.pointers?.forEach((pp, pIndex) =>\n    {\n      if (!pp) {\n        errors.push(`no pointer at ${ pIndex }`)\n        flag = false\n        return\n      }\n      const pointer: TPointer = {\n        p: pp.p || 1,\n        t: pp.t || pIndex,\n        x: 0,\n        y: 0\n      }\n      if (pp?.x == undefined || pp?.x == null) {\n        errors.push(`no x at pointer at ${ pIndex }`)\n        flag = false\n        return\n      }\n      else {\n        pointer.x = pp.x\n      }\n      if (pp?.y == undefined || pp?.y == null) {\n        errors.push(`no y at pointer at ${ pIndex }`)\n        flag = false\n        return\n      }\n      else {\n        pointer.y = pp.y\n      }\n      if (flag) {\n        stroke.addPointer(pointer)\n      }\n    })\n\n    if (errors.length) {\n      throw new Error(errors.join(\" and \"))\n    }\n    if (partial.decorators?.length) {\n      partial.decorators.forEach(d => {\n        if(d?.kind) {\n          stroke.decorators.push(new IIDecorator(d.kind, Object.assign({}, stroke.style, d.style)))\n        }\n      })\n    }\n    return stroke\n  }\n}\n\n/**\n * @group Symbol\n * @group Utils\n */\nexport function convertPartialStrokesToOIStrokes(json: PartialDeep<TStroke>[]): IIStroke[]\n{\n  const errors: string[] = []\n  const strokes: IIStroke[] = []\n  json.forEach((j, i) =>\n  {\n    try {\n      strokes.push(IIStroke.create(j as PartialDeep<IIStroke>))\n    } catch (e) {\n      errors.push(`stroke ${ i + 1 } has ${ (e as Error).message }`)\n    }\n  })\n\n  if (errors.length) {\n    throw new Error(errors.join(\"\\n\"))\n  }\n\n  return strokes\n}\n", "import { TStyle } from \"../../style\"\nimport { PartialDeep } from \"../../utils\"\nimport { IIRecognizedBase, RecognizedKind } from \"./IIRecognizedBase\"\nimport { IIStroke } from \"../IIStroke\"\n\n/**\n * @group Symbol\n */\nexport class IIRecognizedArc extends IIRecognizedBase<RecognizedKind.Arc>\n{\n  readonly isClosed = false\n\n  constructor(\n    strokes: IIStroke[],\n    style?: PartialDeep<TStyle>\n  )\n  {\n    super(RecognizedKind.Arc, strokes, style)\n  }\n\n  clone(): IIRecognizedArc\n  {\n    const clone = new IIRecognizedArc(this.strokes.map(s => s.clone()), structuredClone({ ...this.style }))\n    clone.id = this.id\n    clone.selected = this.selected\n    clone.deleting = this.deleting\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    return clone\n  }\n\n  toJSON(): PartialDeep<IIRecognizedArc>\n  {\n    return {\n      id: this.id,\n      type: this.type,\n      kind: this.kind,\n      strokes: JSON.parse(JSON.stringify(this.strokes)),\n    }\n  }\n\n  static create(partial: PartialDeep<IIRecognizedArc>): IIRecognizedArc\n  {\n    if (!partial.strokes?.length) {\n      throw new Error(`no strokes`)\n    }\n    const strokes = partial.strokes.map(s => IIStroke.create(s!))\n    const ws = new IIRecognizedArc(strokes, partial.style)\n\n    if (partial.id) {\n      ws.id = partial.id\n    }\n    return ws\n  }\n}\n", "import { TStyle } from \"../../style\"\nimport { PartialDeep } from \"../../utils\"\nimport { IIRecognizedBase, RecognizedKind } from \"./IIRecognizedBase\"\nimport { IIStroke } from \"../IIStroke\"\n\n/**\n * @group Symbol\n */\nexport class IIRecognizedCircle extends IIRecognizedBase<RecognizedKind.Circle>\n{\n  readonly isClosed = true\n\n  constructor(\n    strokes: IIStroke[],\n    style?: PartialDeep<TStyle>\n  )\n  {\n    super(RecognizedKind.Circle, strokes, style)\n  }\n\n  clone(): IIRecognizedCircle\n  {\n    const clone = new IIRecognizedCircle(this.strokes.map(s => s.clone()), structuredClone({ ...this.style }))\n    clone.id = this.id\n    clone.selected = this.selected\n    clone.deleting = this.deleting\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    return clone\n  }\n\n  toJSON(): PartialDeep<IIRecognizedCircle>\n  {\n    return {\n      id: this.id,\n      type: this.type,\n      kind: this.kind,\n      strokes: JSON.parse(JSON.stringify(this.strokes)),\n    }\n  }\n\n  static create(partial: PartialDeep<IIRecognizedCircle>): IIRecognizedCircle\n  {\n    if (!partial.strokes?.length) {\n      throw new Error(`no strokes`)\n    }\n    const strokes = partial.strokes.map(s => IIStroke.create(s!))\n\n    const ws = new IIRecognizedCircle(strokes, partial.style)\n\n    if (partial.id) {\n      ws.id = partial.id\n    }\n    return ws\n  }\n}\n", "import { TStyle } from \"../../style\"\nimport { PartialDeep } from \"../../utils\"\nimport { IIRecognizedBase, RecognizedKind } from \"./IIRecognizedBase\"\nimport { IIStroke } from \"../IIStroke\"\n\n/**\n * @group Symbol\n */\nexport class IIRecognizedEllipse extends IIRecognizedBase<RecognizedKind.Ellipse>\n{\n  readonly isClosed = true\n\n  constructor(\n    strokes: IIStroke[],\n    style?: PartialDeep<TStyle>\n  )\n  {\n    super(RecognizedKind.Ellipse, strokes, style)\n  }\n\n  clone(): IIRecognizedEllipse\n  {\n    const clone = new IIRecognizedEllipse(this.strokes.map(s => s.clone()), structuredClone({ ...this.style }))\n    clone.id = this.id\n    clone.selected = this.selected\n    clone.deleting = this.deleting\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    return clone\n  }\n\n  toJSON(): PartialDeep<IIRecognizedEllipse>\n  {\n    return {\n      id: this.id,\n      type: this.type,\n      kind: this.kind,\n      strokes: JSON.parse(JSON.stringify(this.strokes)),\n    }\n  }\n\n  static create(partial: PartialDeep<IIRecognizedEllipse>): IIRecognizedEllipse\n  {\n    if (!partial.strokes?.length) {\n      throw new Error(`no strokes`)\n    }\n    const strokes = partial.strokes.map(s => IIStroke.create(s!))\n\n    const ws = new IIRecognizedEllipse(strokes, partial.style)\n\n    if (partial.id) {\n      ws.id = partial.id\n    }\n    return ws\n  }\n}\n", "import { TStyle } from \"../../style\"\nimport { PartialDeep } from \"../../utils\"\nimport { IIRecognizedBase, RecognizedKind } from \"./IIRecognizedBase\"\nimport { IIStroke } from \"../IIStroke\"\n\n/**\n * @group Symbol\n */\nexport class IIRecognizedLine extends IIRecognizedBase<RecognizedKind.Line>\n{\n  readonly isClosed = false\n\n  constructor(\n    strokes: IIStroke[],\n    style?: PartialDeep<TStyle>\n  )\n  {\n    super(RecognizedKind.Line, strokes, style)\n  }\n\n  clone(): IIRecognizedLine\n  {\n    const clone = new IIRecognizedLine(this.strokes.map(s => s.clone()), structuredClone({ ...this.style }))\n    clone.id = this.id\n    clone.selected = this.selected\n    clone.deleting = this.deleting\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    return clone\n  }\n\n  toJSON(): PartialDeep<IIRecognizedLine>\n  {\n    return {\n      id: this.id,\n      type: this.type,\n      kind: this.kind,\n      strokes: JSON.parse(JSON.stringify(this.strokes)),\n    }\n  }\n\n  static create(partial: PartialDeep<IIRecognizedLine>): IIRecognizedLine\n  {\n    if (!partial.strokes?.length) {\n      throw new Error(`no strokes`)\n    }\n    const strokes = partial.strokes.map(s => IIStroke.create(s!))\n\n    const ws = new IIRecognizedLine(strokes, partial.style)\n\n    if (partial.id) {\n      ws.id = partial.id\n    }\n    return ws\n  }\n}\n", "import { TStyle } from \"../../style\"\nimport { PartialDeep } from \"../../utils\"\nimport { IIRecognizedBase, RecognizedKind } from \"./IIRecognizedBase\"\nimport { IIStroke } from \"../IIStroke\"\n\n/**\n * @group Symbol\n */\nexport class IIRecognizedPolyLine extends IIRecognizedBase<RecognizedKind.PolyEdge>\n{\n  readonly isClosed = false\n\n  constructor(\n    strokes: IIStroke[],\n    style?: PartialDeep<TStyle>\n  )\n  {\n    super(RecognizedKind.PolyEdge, strokes, style)\n  }\n\n  clone(): IIRecognizedPolyLine\n  {\n    const clone = new IIRecognizedPolyLine(this.strokes.map(s => s.clone()), structuredClone({ ...this.style }))\n    clone.id = this.id\n    clone.selected = this.selected\n    clone.deleting = this.deleting\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    return clone\n  }\n\n  toJSON(): PartialDeep<IIRecognizedPolyLine>\n  {\n    return {\n      id: this.id,\n      type: this.type,\n      kind: this.kind,\n      strokes: JSON.parse(JSON.stringify(this.strokes)),\n    }\n  }\n\n  static create(partial: PartialDeep<IIRecognizedPolyLine>): IIRecognizedPolyLine\n  {\n    if (!partial.strokes?.length) {\n      throw new Error(`no strokes`)\n    }\n    const strokes = partial.strokes.map(s => IIStroke.create(s!))\n\n    const ws = new IIRecognizedPolyLine(strokes, partial.style)\n\n    if (partial.id) {\n      ws.id = partial.id\n    }\n    return ws\n  }\n}\n", "import { TStyle } from \"../../style\"\nimport { PartialDeep } from \"../../utils\"\nimport { IIRecognizedBase, RecognizedKind } from \"./IIRecognizedBase\"\nimport { IIStroke } from \"../IIStroke\"\n\n/**\n * @group Symbol\n */\nexport class IIRecognizedPolygon extends IIRecognizedBase<RecognizedKind.Polygone>\n{\n  readonly isClosed = true\n\n  constructor(\n    strokes: IIStroke[],\n    style?: PartialDeep<TStyle>\n  )\n  {\n    super(RecognizedKind.Polygone, strokes, style)\n  }\n\n  clone(): IIRecognizedPolygon\n  {\n    const clone = new IIRecognizedPolygon(this.strokes.map(s => s.clone()), structuredClone({ ...this.style }))\n    clone.id = this.id\n    clone.selected = this.selected\n    clone.deleting = this.deleting\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    return clone\n  }\n\n  toJSON(): PartialDeep<IIRecognizedPolygon>\n  {\n    return {\n      id: this.id,\n      type: this.type,\n      kind: this.kind,\n      strokes: JSON.parse(JSON.stringify(this.strokes)),\n    }\n  }\n\n  static create(partial: PartialDeep<IIRecognizedPolygon>): IIRecognizedPolygon\n  {\n    if (!partial.strokes?.length) {\n      throw new Error(`no strokes`)\n    }\n    const strokes = partial.strokes.map(s => IIStroke.create(s!))\n\n    const ws = new IIRecognizedPolygon(strokes, partial.style)\n\n    if (partial.id) {\n      ws.id = partial.id\n    }\n    return ws\n  }\n}\n", "import { TStyle } from \"../../style\"\nimport { PartialDeep } from \"../../utils\"\nimport { IIDecorator } from \"../IIDecorator\"\nimport { IIRecognizedBase, RecognizedKind } from \"./IIRecognizedBase\"\nimport { IIStroke } from \"../IIStroke\"\n\n/**\n * @group Symbol\n */\nexport class IIRecognizedText extends IIRecognizedBase<RecognizedKind.Text>\n{\n  readonly isClosed = false\n\n  decorators: IIDecorator[]\n\n  baseline: number\n  xHeight: number\n  label?: string\n\n  constructor(\n    strokes: IIStroke[],\n    lines: { baseline: number, xHeight: number },\n    style?: PartialDeep<TStyle>\n  )\n  {\n    super(RecognizedKind.Text, strokes, style)\n    this.baseline = lines.baseline\n    this.xHeight = lines.xHeight\n    this.decorators = []\n  }\n\n  clone(): IIRecognizedText\n  {\n    const clone = new IIRecognizedText(this.strokes.map(s => s.clone()), { baseline: this.baseline, xHeight: this.xHeight }, structuredClone({ ...this.style }))\n    clone.id = this.id\n    clone.label = this.label\n    clone.selected = this.selected\n    clone.deleting = this.deleting\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    clone.decorators = this.decorators.map(d => d.clone())\n    return clone\n  }\n\n  toJSON(): PartialDeep<IIRecognizedText>\n  {\n    return {\n      id: this.id,\n      type: this.type,\n      kind: this.kind,\n      label: this.label,\n      baseline: this.baseline,\n      xHeight: this.xHeight,\n      strokes: JSON.parse(JSON.stringify(this.strokes)),\n      decorators: this.decorators.length ? JSON.parse(JSON.stringify(this.decorators)) : undefined\n    }\n  }\n\n  static create(partial: PartialDeep<IIRecognizedText>): IIRecognizedText\n  {\n    if (!partial.strokes?.length) {\n      throw new Error(`no strokes`)\n    }\n    const strokes = partial.strokes.map(s => IIStroke.create(s!))\n    const line = {\n      baseline: partial.baseline || 0,\n      xHeight: partial.xHeight || 0\n    }\n    const ws = new IIRecognizedText(strokes, line, partial.style)\n\n    if (partial.decorators?.length) {\n      partial.decorators.forEach(d =>\n      {\n        if (d?.kind) {\n          ws.decorators.push(new IIDecorator(d.kind, Object.assign({}, ws.style, d.style)))\n        }\n      })\n    }\n    if (partial.id) {\n      ws.id = partial.id\n    }\n    return ws\n  }\n}\n", "import { TStyle } from \"../style\"\nimport { PartialDeep } from \"../utils\"\nimport { TPoint } from \"./Point\"\nimport { Box, TBox } from \"./Box\"\nimport { SymbolType } from \"./Symbol\"\nimport { IIDecorator } from \"./IIDecorator\"\nimport { IISymbolBase } from \"./IISymbolBase\"\nimport { IIStroke } from \"./IIStroke\"\nimport { IIText } from \"./IIText\"\nimport { TIISymbol } from \".\"\n\n/**\n * @group Symbol\n */\nexport class IISymbolGroup extends IISymbolBase<SymbolType.Group>\n{\n  readonly isClosed = false\n\n  children: TIISymbol[]\n  decorators: IIDecorator[]\n\n  constructor(\n    children: TIISymbol[],\n    style?: PartialDeep<TStyle>\n  )\n  {\n    super(SymbolType.Group, style)\n    this.children = children\n    this.decorators = []\n  }\n\n  get snapPoints(): TPoint[]\n  {\n    return this.bounds.snapPoints\n  }\n\n  get vertices(): TPoint[]\n  {\n    return this.children.flatMap(s => s.vertices)\n  }\n\n  get bounds(): Box\n  {\n    return Box.createFromBoxes(this.children.map(c => c.bounds))\n  }\n\n  updateChildrenStyle(): void\n  {\n    this.children.forEach(child => {\n      child.style = Object.assign({}, child.style, this.style)\n      switch (child.type) {\n        case SymbolType.Group:\n          child.updateChildrenStyle()\n          break\n        case SymbolType.Text:\n          child.chars.forEach(c =>\n          {\n            if (child.style.color) {\n              c.color = child.style.color\n            }\n          })\n          break\n        case SymbolType.Recognized:\n          child.updateChildrenStyle()\n          break\n      }\n\n    })\n  }\n\n  overlaps(box: TBox): boolean\n  {\n    return this.children.some(s => s.overlaps(box))\n  }\n\n  containsSymbol(strokeId: string): boolean\n  {\n    return IISymbolGroup.containsSymbol(this, strokeId)\n  }\n\n  containsOnlyStroke(): boolean\n  {\n    return IISymbolGroup.containsOnlyStroke(this)\n  }\n\n  extractText(): IIText[]\n  {\n    return IISymbolGroup.extractText(this)\n  }\n\n  extractStrokes(): IIStroke[]\n  {\n    return IISymbolGroup.extractStrokes(this)\n  }\n\n  removeChilds(symbolIds: string[]): IISymbolGroup\n  {\n    return IISymbolGroup.removeChilds(this, symbolIds)\n  }\n\n  static containsOnlyStroke(group: IISymbolGroup): boolean\n  {\n    return group.children.every(s =>\n    {\n      if (s.type === SymbolType.Group) {\n        return IISymbolGroup.containsOnlyStroke(s as IISymbolGroup)\n      }\n      if (s.type === SymbolType.Stroke) {\n        return true\n      }\n      return false\n    })\n  }\n\n  static extractText(group: IISymbolGroup): IIText[]\n  {\n    const texts: IIText[] = []\n    group.children.forEach(s =>\n    {\n      switch (s.type) {\n        case SymbolType.Text:\n          texts.push(s)\n          break;\n        case SymbolType.Group:\n          texts.push(...IISymbolGroup.extractText(s))\n          break;\n      }\n    })\n    return texts\n  }\n\n  static extractStrokes(group: IISymbolGroup): IIStroke[]\n  {\n    const strokes: IIStroke[] = []\n    group.children.forEach(s =>\n    {\n      switch (s.type) {\n        case SymbolType.Stroke:\n          strokes.push(s)\n          break;\n        case SymbolType.Recognized:\n          strokes.push(...s.strokes)\n          break;\n        case SymbolType.Group:\n          strokes.push(...IISymbolGroup.extractStrokes(s))\n          break;\n      }\n    })\n    return strokes\n  }\n\n  static containsSymbol(group: IISymbolGroup, symbolId: string): boolean\n  {\n    return group.children.some(symbol =>\n    {\n      if (symbol.id === symbolId) return true\n      if (symbol.type === SymbolType.Group) {\n        return IISymbolGroup.containsSymbol(symbol, symbolId)\n      }\n      else if (symbol.type === SymbolType.Recognized) {\n        return symbol.containsStroke(symbolId)\n      }\n      return false\n    })\n  }\n\n  static removeChilds(group: IISymbolGroup, symbolIds: string[]): IISymbolGroup\n  {\n    group.children = group.children.filter(s => !symbolIds.includes(s.id))\n    const symbolsToRemove = group.children.slice()\n    symbolsToRemove.forEach(s =>\n    {\n      if (s.type === SymbolType.Group) {\n        if (!s.removeChilds(symbolIds).children.length) {\n          group.children = group.children.filter(s1 => s1.id !== s.id)\n        }\n      }\n      else if (s.type === SymbolType.Recognized) {\n        s.removeStrokes(symbolIds)\n        if (!s.strokes.length) {\n          group.removeChilds([s.id])\n        }\n      }\n    })\n    return group\n  }\n\n  clone(): IISymbolGroup\n  {\n    const clone = new IISymbolGroup(this.children.map(s => s.clone()), structuredClone({ ...this.style }))\n    clone.id = this.id\n    clone.selected = this.selected\n    clone.deleting = this.deleting\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    clone.decorators = this.decorators.map(d => d.clone())\n    return clone\n  }\n\n  toJSON(): PartialDeep<IISymbolGroup>\n  {\n    return {\n      id: this.id,\n      type: this.type,\n      children: JSON.parse(JSON.stringify(this.children)),\n      decorators: this.decorators.length ? JSON.parse(JSON.stringify(this.decorators)) : undefined\n    }\n  }\n}\n", "import { TStyle } from \"../style\"\nimport { PartialDeep, convertDegreeToRadian, findIntersectionBetween2Segment, isPointInsidePolygon, computeRotatedPoint } from \"../utils\"\nimport { TPoint, isValidPoint } from \"./Point\"\nimport { SymbolType } from \"./Symbol\"\nimport { Box, TBox } from \"./Box\"\nimport { IIDecorator } from \"./IIDecorator\"\nimport { IISymbolBase } from \"./IISymbolBase\"\n\n/**\n * @group Symbol\n */\nexport type TIISymbolChar = {\n  id: string\n  label: string\n  fontSize: number\n  fontWeight: \"normal\" | \"bold\"\n  color: string\n  bounds: TBox\n}\n\n/**\n * @group Symbol\n */\nexport class IIText extends IISymbolBase<SymbolType.Text>\n{\n  readonly isClosed = true\n\n  point: TPoint\n  chars: TIISymbolChar[]\n  decorators: IIDecorator[]\n  bounds: Box\n  rotation?: {\n    degree: number,\n    center: TPoint\n  }\n\n  constructor(\n    chars: TIISymbolChar[],\n    point: TPoint,\n    bounds: TBox,\n    style?: PartialDeep<TStyle>\n  )\n  {\n    super(SymbolType.Text, style)\n    this.point = point\n    this.bounds = new Box(bounds)\n    this.chars = chars\n    this.decorators = []\n  }\n\n  get label(): string\n  {\n    return this.chars.map(c => c.label).join(\"\")\n  }\n\n  get vertices(): TPoint[]\n  {\n    if (this.rotation) {\n      const center = this.rotation.center\n      const rad = convertDegreeToRadian(-this.rotation.degree)\n      return this.bounds.corners\n        .map(p =>\n        {\n          return computeRotatedPoint(p, center, rad)\n        })\n    }\n    else {\n      return this.bounds.corners\n    }\n  }\n\n  get snapPoints(): TPoint[]\n  {\n    const offsetY = this.bounds.yMax - this.point.y\n    const points = [\n      { x: this.bounds.x, y: this.bounds.yMin + offsetY },\n      { x: this.bounds.xMax, y: this.bounds.yMin + offsetY },\n      { x: this.bounds.xMax, y: this.bounds.yMax - offsetY },\n      { x: this.bounds.x, y: this.bounds.yMax - offsetY },\n      this.bounds.center\n    ]\n    if (this.rotation) {\n      const center = this.rotation.center\n      const rad = convertDegreeToRadian(-this.rotation.degree)\n      return points\n        .map(p =>\n        {\n          return computeRotatedPoint(p, center, rad)\n        })\n    }\n    return points\n  }\n\n  protected getCharCorners(char: TIISymbolChar): TPoint[]\n  {\n    const boxBox = new Box(char.bounds)\n    if (this.rotation) {\n      const center = this.rotation.center\n      const rad = convertDegreeToRadian(-this.rotation.degree)\n      return boxBox.corners\n        .map(p =>\n        {\n          return computeRotatedPoint(p, center, rad)\n        })\n    }\n    return boxBox.corners\n  }\n\n  updateChildrenStyle(): void\n  {\n    this.chars.forEach(c => {\n      if (this.style.color) {\n        c.color = this.style.color\n      }\n    })\n    this.modificationDate = Date.now()\n  }\n\n  updateChildrenFont( { fontSize, fontWeight }: { fontSize?: number, fontWeight?: \"normal\" | \"bold\" }): void\n  {\n    this.chars.forEach(c => {\n      if (fontSize) {\n        c.fontSize = fontSize\n      }\n      if (fontWeight) {\n        c.fontWeight = fontWeight\n      }\n    })\n    this.modificationDate = Date.now()\n  }\n\n  getCharsOverlaps(points: TPoint[]): TIISymbolChar[]\n  {\n    return this.chars.filter(c =>\n    {\n      const charCorners = this.getCharCorners(c)\n      return points.some(p => isPointInsidePolygon(p, charCorners))\n    })\n  }\n\n  overlaps(box: TBox): boolean\n  {\n    return this.vertices.some(p => Box.containsPoint(box, p)) ||\n      this.edges.some(e1 => Box.getSides(box).some(e2 => !!findIntersectionBetween2Segment(e1, e2)))\n  }\n\n  clone(): IIText\n  {\n    const clone = new IIText(structuredClone(this.chars), structuredClone(this.point), this.bounds, structuredClone(this.style))\n    clone.id = this.id\n    clone.selected = this.selected\n    clone.deleting = this.deleting\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    clone.decorators = this.decorators.map(d => d.clone())\n    clone.rotation = this.rotation ? structuredClone(this.rotation) : undefined\n    return clone\n  }\n\n  toJSON(): PartialDeep<IIText>\n  {\n    return {\n      id: this.id,\n      type: this.type,\n      point: this.point,\n      chars: this.chars,\n      style: this.style,\n      rotation: this.rotation,\n      bounds: this.bounds,\n      decorators: this.decorators.length ? this.decorators : undefined\n    }\n  }\n\n  static create(partial: PartialDeep<IIText>): IIText\n  {\n    if (!isValidPoint(partial?.point)) throw new Error(`Unable to create a IIText, point are invalid`)\n    if (!partial.chars?.length) throw new Error(`Unable to create a IIText, no chars`)\n    if (!partial.bounds) throw new Error(`Unable to create a IIText, no boundingBox`)\n    const text = new IIText(partial.chars as TIISymbolChar[], partial.point as TPoint, partial.bounds as TBox, partial.style)\n    if (partial.id) text.id = partial.id\n    if (partial.decorators?.length) {\n      partial.decorators.forEach(d => {\n        if(d?.kind) {\n          text.decorators.push(new IIDecorator(d.kind, Object.assign({}, text.style, d.style)))\n        }\n      })\n    }\n    return text\n  }\n}\n", "import { createUUID, PartialDeep } from \"../utils\"\nimport { TPoint, TPointer } from \"./Point\"\nimport { Box, TBox } from \"./Box\"\nimport { SymbolType } from \"./Symbol\"\nimport { IISymbolBase } from \"./IISymbolBase\"\nimport { TStyle } from \"../style\"\n\nconst style: TStyle = {\n  color: \"grey\",\n  fill: \"none\",\n  width: 12,\n  opacity: 0.2\n}\n\n/**\n * @group Symbol\n */\nexport class IIEraser extends IISymbolBase<SymbolType.Eraser>\n{\n  readonly isClosed = false\n  pointers: TPointer[]\n\n  constructor()\n  {\n    super(SymbolType.Eraser, style)\n    this.id = `${ this.type }-${ createUUID() }`\n    this.creationTime = Date.now()\n    this.modificationDate = this.creationTime\n    this.pointers = []\n  }\n\n  get bounds(): Box\n  {\n    return Box.createFromPoints(this.vertices)\n  }\n\n  get vertices(): TPoint[]\n  {\n    return this.pointers\n  }\n\n  get snapPoints(): TPoint[]\n  {\n    return []\n  }\n\n  clone(): IISymbolBase\n  {\n    const clone = new IIEraser()\n    clone.id = this.id\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    clone.pointers = structuredClone(this.pointers)\n    return clone\n  }\n\n  overlaps(box: TBox): boolean\n  {\n    return this.pointers.some(p =>\n    {\n      return p.x >= box.x && p.x <= box.x + box.width\n        && p.y >= box.y && p.y <= box.y + box.height\n    })\n  }\n\n  toJSON(): PartialDeep<IIEraser>\n  {\n    return {\n      id: this.id,\n      pointers: this.pointers,\n      style: this.style\n    }\n  }\n}\n", "import { DefaultPenStyle, TPenStyle } from \"../style\"\nimport { PartialDeep, createUUID } from \"../utils\"\nimport { TPointer } from \"./Point\"\nimport { SymbolType, TSymbol } from \"./Symbol\"\n\n/**\n * @group Symbol\n */\nexport type TStrokeToSend = {\n  id: string\n  pointerType: string\n  x: number[]\n  y: number[]\n  t: number[]\n  p: number[]\n}\n\n/**\n * @group Symbol\n */\nexport type TStrokeGroupToSend = {\n  penStyle?: string\n  strokes: TStrokeToSend[]\n}\n\n/**\n * @group Symbol\n */\nexport type TStroke = TSymbol & {\n  style: TPenStyle\n  pointerType: string\n  pointers: TPointer[]\n  length: number\n}\n\n/**\n * @group Symbol\n */\nexport type TStrokeGroup = {\n  penStyle: TPenStyle\n  strokes: Stroke[]\n}\n\n/**\n * @group Symbol\n */\nexport class Stroke implements TStroke\n{\n  type = SymbolType.Stroke\n  id: string\n  creationTime: number\n  modificationDate: number\n  style: TPenStyle\n  pointerType: string\n  pointers: TPointer[]\n  length: number\n\n  constructor(style: TPenStyle, pointerType = \"pen\")\n  {\n    this.id = `${this.type}-${createUUID()}`\n    this.creationTime = Date.now()\n    this.modificationDate = this.creationTime\n    this.style = style\n    this.pointerType = pointerType\n    this.pointers = []\n    this.length = 0\n  }\n\n  clone(): Stroke\n  {\n    const clone = new Stroke(this.style, this.pointerType)\n    clone.id = this.id\n    clone.creationTime = this.creationTime\n    clone.modificationDate = this.modificationDate\n    clone.pointers = structuredClone(this.pointers)\n    clone.length = this.length\n    return clone\n  }\n\n  formatToSend(): TStrokeToSend\n  {\n    const json: TStrokeToSend = {\n      id: this.id,\n      pointerType: this.pointerType,\n      p: [],\n      t: [],\n      x: [],\n      y: []\n    }\n    this.pointers.forEach(p => {\n      json.p.push(p.p)\n      json.t.push(p.t)\n      json.x.push(p.x)\n      json.y.push(p.y)\n    })\n    return json\n  }\n}\n\n/**\n * @group Symbol\n * @group Utils\n */\nexport function convertPartialStrokesToStrokes(json: PartialDeep<TStroke>[]): Stroke[]\n{\n  const errors: string[] = []\n  const strokes: Stroke[] = []\n  json.forEach((j, ji) => {\n    let flag = true\n    const stroke = new Stroke(j.style || DefaultPenStyle, j.pointerType)\n    if (j.id) stroke.id = j.id\n    if (!j.pointers?.length) {\n      errors.push(`stroke ${ji + 1} has not pointers`)\n      flag = false\n      return\n    }\n    j.pointers?.forEach((pp, pIndex) => {\n      if (!pp) {\n        errors.push(`stroke ${ji + 1} has no pointer at ${pIndex}`)\n        flag = false\n        return\n      }\n      const pointer: TPointer = {\n        p: pp.p || 1,\n        t: pp.t || pIndex,\n        x: 0,\n        y: 0\n      }\n      if (pp?.x == undefined || pp?.x == null) {\n        errors.push(`stroke ${ji + 1} has no x at pointer at ${pIndex}`)\n        flag = false\n        return\n      }\n      else {\n        pointer.x = pp.x\n      }\n      if (pp?.y == undefined || pp?.y == null) {\n        errors.push(`stroke ${ji + 1} has no y at pointer at ${pIndex}`)\n        flag = false\n        return\n      }\n      else {\n        pointer.y = pp.y\n      }\n      if (flag) {\n        stroke.pointers.push(pointer)\n      }\n    })\n    if (flag) {\n      strokes.push(stroke)\n    }\n  })\n\n  if (errors.length) {\n    throw new Error(errors.join(\"\\n\"))\n  }\n\n  return strokes\n}\n", "import { LoggerCategory, LoggerManager } from \"../logger\"\nimport { TPenStyle } from \"../style\"\nimport { computeDistance } from \"../utils\"\nimport { TExport } from \"./Export\"\nimport { Stroke, TPoint, TPointer } from \"../symbol\"\n\n/**\n * @group Model\n */\nexport type TRecognitionPositions = {\n  lastSentPosition: number\n  lastReceivedPosition: number\n}\n\n/**\n * @group Model\n */\nexport class Model\n{\n  readonly creationTime: number\n  modificationDate: number\n  positions: TRecognitionPositions\n  currentSymbol?: Stroke\n  symbols: Stroke[]\n  exports?: TExport\n  converts?: TExport\n  width: number\n  height: number\n  rowHeight: number\n  idle: boolean\n  #logger = LoggerManager.getLogger(LoggerCategory.MODEL)\n\n  constructor(width = 100, height = 100, rowHeight = 0, creationDate = Date.now())\n  {\n    this.#logger.info(\"constructor\", { width, height, creationDate })\n    this.creationTime = creationDate\n    this.modificationDate = creationDate\n    this.width = width\n    this.height = height\n    this.rowHeight = rowHeight\n    this.symbols = []\n    this.positions = {\n      lastSentPosition: 0,\n      lastReceivedPosition: 0\n    }\n    this.idle = true\n  }\n\n  protected computePressure(distance: number, globalDistance: number): number\n  {\n    let ratio = 1.0\n    if (distance === globalDistance) {\n      ratio = 1.0\n    } else if (distance < 10) {\n      ratio = 0.2 + Math.pow(0.1 * distance, 0.4)\n    } else if (distance > globalDistance - 10) {\n      ratio = 0.2 + Math.pow(0.1 * (globalDistance - distance), 0.4)\n    }\n    const pressure = ratio * Math.max(0.1, 1.0 - (0.1 * Math.sqrt(distance)))\n    return isNaN(pressure) ? 0.5 : Math.round(pressure * 100) / 100\n  }\n\n  protected filterPointByAcquisitionDelta(stroke: Stroke, point: TPointer, lastPointer?: TPointer): boolean\n  {\n    const delta: number = (2 + ((stroke.style[\"-myscript-pen-width\"] || 0) / 4))\n    return !lastPointer ||\n      stroke.pointers.length === 0 ||\n      Math.abs(lastPointer.x - point.x) >= delta ||\n      Math.abs(lastPointer.y - point.y) >= delta\n  }\n\n  getStrokeFromPoint(point: TPoint): Stroke[]\n  {\n    this.#logger.info(\"getStrokeFromPoint\", { point })\n    const isBetween = (val: number, min: number, max: number): boolean => (val >= min && val <= max)\n\n    const _strokeList: Stroke[] = []\n    this.symbols.forEach((stroke) =>\n    {\n      for (let i = 0; i < stroke.pointers.length; i++) {\n        const strokePointer = stroke.pointers[i]\n        if (\n          isBetween(strokePointer.x, point.x - 5, point.x + 5) &&\n          isBetween(strokePointer.y, point.y - 5, point.y + 5)\n        ) {\n          _strokeList.push(stroke)\n          break\n        }\n        else {\n          if (computeDistance(point, strokePointer) < 10) {\n            _strokeList.push(stroke)\n            break\n          }\n        }\n      }\n    })\n    this.#logger.debug(\"getStrokeFromPoint\", { strokes: _strokeList })\n    return _strokeList\n  }\n\n  addPoint(stroke: Stroke, pointer: TPointer): void\n  {\n    this.#logger.debug(\"addPoint\", { stroke, pointer })\n    const lastPointer = stroke.pointers.at(-1)\n    if (this.filterPointByAcquisitionDelta(stroke, pointer, lastPointer)) {\n      const distance = lastPointer ? computeDistance(pointer, lastPointer) : 0\n      stroke.length += distance\n      pointer.p = this.computePressure(distance, stroke.length)\n      stroke.pointers.push(pointer)\n      stroke.modificationDate = Date.now()\n    }\n  }\n\n  addStroke(stroke: Stroke): void\n  {\n    this.#logger.info(\"addStroke\", { stroke })\n    this.symbols.push(stroke)\n    this.modificationDate = Date.now()\n    this.converts = undefined\n    this.exports = undefined\n  }\n\n  updateStroke(updatedStroke: Stroke): void\n  {\n    this.#logger.info(\"updateStroke\", { updatedStroke })\n    const strokeIndex = this.symbols.findIndex((s: Stroke): boolean => s.id === updatedStroke.id)\n    if (strokeIndex !== -1) {\n      updatedStroke.modificationDate = Date.now()\n      this.symbols.splice(strokeIndex, 1, updatedStroke)\n      this.modificationDate = Date.now()\n      this.converts = undefined\n      this.exports = undefined\n    }\n    this.#logger.debug(\"updateStroke\", this.symbols)\n  }\n\n  removeStroke(id: string): void\n  {\n    this.#logger.info(\"removeStroke\", { id })\n    const strokeIndex = this.symbols.findIndex(s => s.id === id)\n    if (strokeIndex !== -1) {\n      this.positions.lastSentPosition--\n      this.positions.lastReceivedPosition--\n      this.symbols.splice(strokeIndex, 1)\n      this.modificationDate = Date.now()\n      this.converts = undefined\n      this.exports = undefined\n    }\n    this.#logger.debug(\"removeStroke\", this.symbols)\n  }\n\n  removeStrokesFromPoint(point: TPoint): string[]\n  {\n    this.#logger.info(\"removeStrokesFromPoint\", { point })\n    const strokes = this.getStrokeFromPoint(point)\n    strokes.forEach(strokeToRemove =>\n    {\n      this.removeStroke(strokeToRemove.id)\n    })\n    this.#logger.debug(\"removeStrokesFromPoint\", strokes.map(s => s.id))\n    return strokes.map(s => s.id)\n  }\n\n  extractUnsentStrokes(): Stroke[]\n  {\n    return this.symbols.slice(this.positions.lastSentPosition)\n  }\n\n  initCurrentStroke(point: TPointer, pointerType: string, style: TPenStyle, dpi = 96): void\n  {\n    this.#logger.info(\"initCurrentStroke\", { point, pointerType, style, dpi })\n    if (style[\"-myscript-pen-width\"]) {\n      const pxWidth = (style[\"-myscript-pen-width\"] * dpi) / 25.4\n      style.width = pxWidth / 2\n    }\n    this.modificationDate = Date.now()\n    this.exports = undefined\n    this.currentSymbol = new Stroke(style, pointerType)\n    this.#logger.debug(\"initCurrentStroke\", this.currentSymbol)\n    this.addPoint(this.currentSymbol, point)\n  }\n\n  appendToCurrentStroke(point: TPointer): void\n  {\n    this.#logger.info(\"appendToCurrentStroke\", { point })\n    if (this.currentSymbol) {\n      this.addPoint(this.currentSymbol, point)\n    }\n    this.#logger.debug(\"appendToCurrentStroke\", this.currentSymbol)\n  }\n\n  endCurrentStroke(point: TPointer): void\n  {\n    this.#logger.info(\"endCurrentStroke\", { point })\n    if (this.currentSymbol) {\n      this.addPoint(this.currentSymbol, point)\n      this.addStroke(this.currentSymbol)\n      this.currentSymbol = undefined\n    }\n    this.#logger.debug(\"endCurrentStroke\", this.currentSymbol)\n  }\n\n  updatePositionSent(position: number = this.symbols.length): void\n  {\n    this.#logger.info(\"updatePositionSent\", { position })\n    this.positions.lastSentPosition = position\n    this.#logger.debug(\"updatePositionSent\", this.positions.lastSentPosition)\n  }\n\n  updatePositionReceived(): void\n  {\n    this.#logger.info(\"updatePositionReceived\")\n    this.positions.lastReceivedPosition = this.positions.lastSentPosition\n    this.#logger.debug(\"updatePositionReceived\", this.positions.lastReceivedPosition)\n  }\n\n  mergeExport(exports: TExport)\n  {\n    this.#logger.info(\"mergeExport\", { exports })\n    if (this.exports) {\n      Object.assign(this.exports, exports)\n    } else {\n      this.exports = exports\n    }\n    this.#logger.debug(\"mergeExport\", this.exports)\n  }\n\n  mergeConvert(converts: TExport)\n  {\n    this.#logger.info(\"mergeConvert\", { converts })\n    if (this.converts) {\n      Object.assign(this.converts, converts)\n    } else {\n      this.converts = converts\n    }\n    this.#logger.debug(\"mergeConvert\", this.converts)\n  }\n\n  clone(): Model\n  {\n    this.#logger.info(\"clone\")\n    const clonedModel = new Model(this.width, this.height, this.rowHeight, this.creationTime)\n    clonedModel.modificationDate = JSON.parse(JSON.stringify(this.modificationDate))\n    clonedModel.currentSymbol = this.currentSymbol ? this.currentSymbol.clone() : undefined\n    clonedModel.symbols = this.symbols.map(s => s.clone())\n    clonedModel.positions = JSON.parse(JSON.stringify(this.positions))\n    clonedModel.exports = this.exports ? JSON.parse(JSON.stringify(this.exports)) : undefined\n    clonedModel.converts = this.converts ? JSON.parse(JSON.stringify(this.converts)) : undefined\n    clonedModel.idle = this.idle\n    this.#logger.debug(\"clone\", { clonedModel })\n    return clonedModel\n  }\n\n  clear(): void\n  {\n    this.#logger.info(\"clear\")\n    this.modificationDate = Date.now()\n    this.currentSymbol = undefined\n    this.symbols = []\n    this.positions.lastSentPosition = 0\n    this.positions.lastReceivedPosition = 0\n    this.exports = undefined\n    this.converts = undefined\n    this.idle = true\n  }\n}\n", "import { LoggerCategory, LoggerManager } from \"../logger\"\nimport\n{\n  RecognizedKind,\n  SymbolType,\n  TIISymbol,\n} from \"../symbol\"\nimport { TExport } from \"./Export\"\n\n/**\n * @group Model\n */\nexport class IIModel\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.MODEL)\n  readonly creationTime: number\n  modificationDate: number\n  currentSymbol?: TIISymbol\n  symbols: TIISymbol[]\n  exports?: TExport\n  converts?: TExport\n  width: number\n  height: number\n  rowHeight: number\n  idle: boolean\n\n  constructor(width = 100, height = 100, rowHeight = 0, creationDate = Date.now())\n  {\n    this.creationTime = creationDate\n    this.modificationDate = creationDate\n    this.width = width\n    this.height = height\n    this.rowHeight = rowHeight\n    this.symbols = []\n    this.exports = undefined\n    this.converts = undefined\n    this.idle = true\n  }\n\n  get symbolsSelected(): TIISymbol[]\n  {\n    return this.symbols.filter(s => s.selected)\n  }\n\n  get symbolsToDelete(): TIISymbol[]\n  {\n    return this.symbols.filter(s => s.deleting)\n  }\n\n  selectSymbol(id: string): void\n  {\n    const symbol = this.symbols.find(s => s.id === id || (s.type === SymbolType.Group && s.containsSymbol(id)))\n    if (symbol) {\n      symbol.selected = true\n    }\n  }\n\n  unselectSymbol(id: string): void\n  {\n    const symbol = this.symbols.find(s => s.id === id)\n    if (symbol) {\n      symbol.selected = false\n    }\n  }\n\n  resetSelection(): void\n  {\n    this.symbols.forEach(s => s.selected = false)\n  }\n\n  getRootSymbol(id: string): TIISymbol | undefined\n  {\n    return this.symbols.find(s =>\n    {\n      if (s.id === id) return s\n      if (s.type === SymbolType.Group && s.containsSymbol(id)) {\n        return s\n      }\n      if (s.type === SymbolType.Recognized && s.containsStroke(id)) {\n        return s\n      }\n      return\n    })\n  }\n\n  getSymbolRowIndex(symbol: TIISymbol): number\n  {\n    return Math.round((symbol.type === SymbolType.Recognized && symbol.kind === RecognizedKind.Text ? symbol.baseline : symbol.bounds.yMid) / this.rowHeight)\n  }\n\n  getSymbolsByRowOrdered(): { rowIndex: number, symbols: TIISymbol[] }[]\n  {\n    const rows: { rowIndex: number, symbols: TIISymbol[] }[] = []\n    this.symbols.forEach(s =>\n    {\n      const rowIndex = this.getSymbolRowIndex(s)\n      const row = rows.find(r => r.rowIndex === rowIndex)\n      if (row) {\n        row.symbols.push(s)\n      }\n      else {\n        rows.push({ rowIndex, symbols: [s] })\n      }\n    })\n    rows.forEach(r =>\n    {\n      r.symbols.sort((s1, s2) => s1.bounds.xMid - s2.bounds.xMid)\n    })\n    return rows.sort((r1, r2) => r1.rowIndex - r2.rowIndex)\n  }\n\n  roundToLineGuide(y: number): number\n  {\n    return Math.round(y / this.rowHeight) * this.rowHeight\n  }\n\n  isSymbolAbove(source: TIISymbol, target: TIISymbol): boolean\n  {\n    return this.getSymbolRowIndex(source) > this.getSymbolRowIndex(target)\n  }\n\n  isSymbolInRow(source: TIISymbol, target: TIISymbol): boolean\n  {\n    return this.getSymbolRowIndex(source) === this.getSymbolRowIndex(target)\n  }\n\n  isSymbolBelow(source: TIISymbol, target: TIISymbol): boolean\n  {\n    return this.getSymbolRowIndex(source) < this.getSymbolRowIndex(target)\n  }\n\n  getFirstSymbol(symbols: TIISymbol[]): TIISymbol | undefined\n  {\n    if (!symbols.length) return\n    return symbols.reduce((previous, current) =>\n    {\n      if (previous) {\n        if (this.getSymbolRowIndex(previous) < this.getSymbolRowIndex(current)) {\n          return previous\n        }\n        else if (this.getSymbolRowIndex(previous) == this.getSymbolRowIndex(current) && previous.bounds.xMid < current.bounds.xMid) {\n          return previous\n        }\n      }\n      return current\n    })\n  }\n\n  getLastSymbol(symbols: TIISymbol[]): TIISymbol | undefined\n  {\n    if (!symbols.length) return\n    return symbols.reduce((previous, current) =>\n    {\n      if (previous) {\n        if (this.getSymbolRowIndex(previous) > this.getSymbolRowIndex(current)) {\n          return previous\n        }\n        if (this.getSymbolRowIndex(previous) < this.getSymbolRowIndex(current)) {\n          return current\n        }\n        else if (previous.bounds.xMid > current.bounds.xMid) {\n          return previous\n        }\n      }\n      return current\n    })\n  }\n\n  addSymbol(symbol: TIISymbol): void\n  {\n    this.#logger.info(\"addSymbol\", { symbol })\n    const sIndex = this.symbols.findIndex(s => s.id === symbol.id)\n    if (sIndex > -1) {\n      throw new Error(`Symbol id already exist: ${ symbol.id }`)\n    }\n    this.symbols.push(symbol)\n    this.modificationDate = Date.now()\n    this.converts = undefined\n    this.exports = undefined\n    this.#logger.debug(\"addSymbol\", this.symbols)\n  }\n\n  updateSymbol(updatedSymbol: TIISymbol): void\n  {\n    this.#logger.info(\"updateSymbol\", { updatedSymbol })\n    const sIndex = this.symbols.findIndex(s => s.id === updatedSymbol.id)\n    if (sIndex !== -1) {\n      updatedSymbol.modificationDate = Date.now()\n      this.symbols.splice(sIndex, 1, updatedSymbol)\n      this.modificationDate = Date.now()\n      this.converts = undefined\n      this.exports = undefined\n    }\n    this.#logger.debug(\"updateSymbol\", this.symbols)\n  }\n\n  replaceSymbol(id: string, symbols: TIISymbol[]): void\n  {\n    const sIndex = this.symbols.findIndex(s => s.id === id)\n    if (sIndex !== -1) {\n      this.symbols.splice(sIndex, 1, ...symbols)\n      this.modificationDate = Date.now()\n      this.converts = undefined\n      this.exports = undefined\n    }\n  }\n\n  changeOrderSymbol(id: string, position: \"first\" | \"last\" | \"forward\" | \"backward\")\n  {\n    const fromIndex = this.symbols.findIndex(s => s.id === id)\n    if (fromIndex > -1) {\n      let toIndex = fromIndex\n      switch (position) {\n        case \"first\":\n          toIndex = 0\n          break\n        case \"last\":\n          toIndex = this.symbols.length - 1\n          break\n        case \"forward\":\n          toIndex = Math.min(toIndex + 1, this.symbols.length - 1)\n          break\n        case \"backward\":\n          toIndex = Math.max(toIndex - 1, 0)\n          break\n      }\n      const sym = this.symbols.splice(fromIndex, 1)[0]\n      this.symbols.splice(toIndex, 0, sym)\n    }\n  }\n\n  removeSymbol(id: string): void\n  {\n    this.#logger.info(\"removeSymbol\", { id })\n    const symbolIndex = this.symbols.findIndex(s => s.id === id)\n    if (symbolIndex !== -1) {\n      this.symbols.splice(symbolIndex, 1)\n      this.modificationDate = Date.now()\n      this.converts = undefined\n      this.exports = undefined\n    }\n    this.#logger.debug(\"removeSymbol\", this.symbols)\n  }\n\n  extractDifferenceSymbols(model: IIModel): { added: TIISymbol[], removed: TIISymbol[] }\n  {\n    return {\n      added: this.symbols.filter(s1 => model.symbols.findIndex(s2 => s1.id === s2.id && s1.modificationDate === s2.modificationDate) === -1),\n      removed: model.symbols.filter(s1 => this.symbols.findIndex(s2 => s1.id === s2.id && s1.modificationDate === s2.modificationDate) === -1)\n    }\n  }\n\n  mergeExport(exports: TExport)\n  {\n    this.#logger.info(\"mergeExport\", { exports })\n    if (this.exports) {\n      Object.assign(this.exports, exports)\n    } else {\n      this.exports = exports\n    }\n    this.#logger.debug(\"mergeExport\", this.exports)\n  }\n\n  clone(): IIModel\n  {\n    this.#logger.info(\"clone\")\n    const clonedModel = new IIModel(this.width, this.height, this.rowHeight, this.creationTime)\n    clonedModel.modificationDate = this.modificationDate\n    clonedModel.symbols = this.symbols.map(s =>\n    {\n      const c = s.clone()\n      c.selected = false\n      return c\n    })\n    clonedModel.exports = structuredClone(this.exports)\n    clonedModel.idle = this.idle\n    this.#logger.debug(\"clone\", { clonedModel })\n    return clonedModel\n  }\n\n  clear(): void\n  {\n    this.#logger.info(\"clear\")\n    this.modificationDate = Date.now()\n    this.symbols = []\n    this.currentSymbol = undefined\n    this.exports = undefined\n    this.converts = undefined\n    this.idle = true\n\n  }\n}\n", "/**\n * @group Recognizer\n */\nexport type TScheme = \"https\" | \"http\"\n\n/**\n * @group Recognizer\n */\nexport type TServerHTTPConfiguration = {\n  scheme: TScheme,\n  host: string\n  applicationKey: string\n  hmacKey: string\n  version?: string\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultServerHTTPConfiguration: TServerHTTPConfiguration = {\n  scheme: \"https\",\n  host: \"cloud.myscript.com\",\n  applicationKey: \"\",\n  hmacKey: \"\",\n  version: \"\"\n}\n\n/**\n * @group Recognizer\n */\nexport type TServerWebsocketConfiguration = TServerHTTPConfiguration & {\n  websocket: {\n    pingEnabled: boolean\n    pingDelay: number\n    maxPingLostCount: number\n    autoReconnect: boolean\n    maxRetryCount: number\n    fileChunkSize: number\n  }\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultServerWebsocketConfiguration: TServerWebsocketConfiguration = {\n  ...DefaultServerHTTPConfiguration,\n  websocket: {\n    pingEnabled: true,\n    pingDelay: 15000,\n    maxPingLostCount: 20,\n    autoReconnect: true,\n    maxRetryCount: 2,\n    fileChunkSize: 300000\n  }\n}\n", "\n/**\n * @group Recognizer\n */\nexport type TEraserConfiguration = {\n  \"erase-precisely\": boolean\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultEraserConfiguration: TEraserConfiguration = {\n  \"erase-precisely\": false\n}\n", "\nimport { DefaultEraserConfiguration, TEraserConfiguration } from \"./EraserConfiguration\"\nimport { TTextConfConfiguration } from \"./TextConfiguration\"\n\n/**\n * @group Recognizer\n */\nexport type TDiagramConvertConfiguration = {\n  types?: (\"text\" | \"shape\")[]\n  \"match-text-size\"?: boolean\n}\n\n/**\n * @group Recognizer\n */\nexport type TDiagramConfiguration = {\n  mimeTypes: (\"application/vnd.myscript.jiix\" | \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" | \"image/svg+xml\")[]\n  \"enable-sub-blocks\"?: boolean\n  text?: TTextConfConfiguration\n  convert?: TDiagramConvertConfiguration\n  \"session-time\"?: number\n  eraser?: TEraserConfiguration\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultDiagramConvertConfiguration: TDiagramConvertConfiguration = {\n  types: [\"text\", \"shape\"],\n  \"match-text-size\": true\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultDiagramConfiguration: TDiagramConfiguration = {\n  convert: DefaultDiagramConvertConfiguration,\n  eraser: DefaultEraserConfiguration,\n  mimeTypes: [\"application/vnd.myscript.jiix\"],\n}\n", "\n/**\n * @group Recognizer\n */\nexport type TImageViewportConfiguration = {\n  x: number\n  y: number\n  width: number\n  height: number\n}\n\n/**\n * @group Recognizer\n */\nexport type TImageConfiguration = {\n  guides: boolean\n  viewport: TImageViewportConfiguration\n}\n\n/**\n * @group Recognizer\n */\nexport type TJiixConfiguration = {\n  \"bounding-box\": boolean\n  strokes: boolean\n  ids: boolean\n  \"full-stroke-ids\": boolean\n  text: {\n    chars: boolean\n    words: boolean\n    lines?: boolean\n  }\n  style?: boolean\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultJiixConfiguration: TJiixConfiguration = {\n  \"bounding-box\": false,\n  strokes: false,\n  ids: false,\n  \"full-stroke-ids\": false,\n  text: {\n    chars: false,\n    words: true,\n    lines: false\n  },\n}\n\n/**\n * @group Recognizer\n */\nexport type TMathMLFlavor = {\n  name: string\n}\n\n/**\n * @group Recognizer\n */\nexport type TMathMLExport = {\n  flavor: TMathMLFlavor\n}\n\n/**\n * @group Recognizer\n */\nexport type TExportConfiguration = {\n  \"image-resolution\"?: number\n  image?: TImageConfiguration\n  jiix: TJiixConfiguration\n  mathml?: TMathMLExport\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultExportConfiguration: TExportConfiguration = {\n  \"image-resolution\": 300,\n  jiix: DefaultJiixConfiguration\n}\n", "\n/**\n * @group Recognizer\n */\nexport type TMarginConfiguration = {\n  bottom: number\n  left: number\n  right: number\n  top: number\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultMarginConfiguration: TMarginConfiguration = {\n  top: 20,\n  left: 10,\n  right: 10,\n  bottom: 10\n}\n", "import { DefaultMarginConfiguration, TMarginConfiguration } from \"./MarginConfiguration\"\nimport { DefaultEraserConfiguration, TEraserConfiguration } from \"./EraserConfiguration\"\n\n/**\n * @group Recognizer\n */\nexport type TRoundingMode = \"half up\" | \"truncate\"\n\n/**\n * @group Recognizer\n */\nexport type TAngleUnit = \"deg\" | \"rad\"\n\n/**\n * @group Recognizer\n */\nexport type TSolverOptions = \"algebraic\" | \"numeric\"\n\n/**\n * @group Recognizer\n */\nexport type TSolverConfiguration = {\n  enable?: boolean\n  \"fractional-part-digits\"?: number\n  \"decimal-separator\"?: string\n  \"rounding-mode\"?: TRoundingMode\n  \"angle-unit\"?: TAngleUnit\n  options?: TSolverOptions\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultSolverConfiguration: TSolverConfiguration = {\n  enable: true,\n  \"fractional-part-digits\": 3,\n  \"decimal-separator\": \".\",\n  \"rounding-mode\": \"half up\",\n  \"angle-unit\": \"deg\"\n}\n\n/**\n * @group Recognizer\n */\nexport type TUndoRedoMode = \"stroke\" | \"session\"\n\n/**\n * @group Recognizer\n */\nexport type TMathUndoRedoConfiguration = {\n  mode: TUndoRedoMode\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultMathUndoRedoConfiguration: TMathUndoRedoConfiguration = {\n  mode: \"stroke\"\n}\n\n/**\n * @group Recognizer\n */\nexport type TMathConfiguration = {\n  mimeTypes: (\"application/x-latex\" | \"application/mathml+xml\" | \"application/vnd.myscript.jiix\")[]\n  solver?: TSolverConfiguration\n  margin: TMarginConfiguration\n  \"undo-redo\"?: TMathUndoRedoConfiguration\n  customGrammar?: string\n  customGrammarId?: string\n  customGrammarContent?: string\n  eraser?: TEraserConfiguration\n  \"session-time\"?: number\n  \"recognition-timeout\"?: number\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultMathConfiguration: TMathConfiguration = {\n  solver: DefaultSolverConfiguration,\n  margin: DefaultMarginConfiguration,\n  eraser: DefaultEraserConfiguration,\n  \"undo-redo\": DefaultMathUndoRedoConfiguration,\n  mimeTypes: [\"application/vnd.myscript.jiix\"],\n}\n", "\nimport { DefaultEraserConfiguration, TEraserConfiguration } from \"./EraserConfiguration\"\nimport { TTextConfConfiguration } from \"./TextConfiguration\"\n\n/**\n * @group Recognizer\n */\nexport type TRawContentConfiguration = {\n  text?: TTextConfConfiguration\n  \"session-time\"?: number\n  recognition: {\n    types: (\"text\" | \"shape\" | \"math\" | \"decoration\")[]\n  }\n  classification: {\n    types: (\"text\" | \"shape\" | \"math\" | \"decoration\" | \"drawing\")[]\n  }\n  eraser?: TEraserConfiguration\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultRawContentConfiguration: TRawContentConfiguration = {\n  recognition: {\n    types: [ \"text\", \"math\", \"shape\", \"decoration\"]\n  },\n  classification: {\n    types: [ \"text\", \"math\", \"shape\", \"decoration\", \"drawing\"]\n  },\n  eraser: DefaultEraserConfiguration,\n}\n", "\n/**\n * @group Recognizer\n */\nexport type TRecognitionRendererDebugConfiguration = {\n  \"draw-text-boxes\": boolean\n  \"draw-image-boxes\": boolean\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultDebugConfiguration: TRecognitionRendererDebugConfiguration = {\n  \"draw-text-boxes\": false,\n  \"draw-image-boxes\": false\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognitionRendererConfiguration = {\n  debug: TRecognitionRendererDebugConfiguration\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultRecognitionRendererConfiguration: TRecognitionRendererConfiguration = {\n  debug: DefaultDebugConfiguration\n}\n", "import { DefaultMarginConfiguration, TMarginConfiguration } from \"./MarginConfiguration\"\nimport { DefaultEraserConfiguration, TEraserConfiguration } from \"./EraserConfiguration\"\n\n/**\n * @group Recognizer\n */\nexport type TTextGuidesConfiguration = {\n  enable: boolean\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultTextGuidesConfiguration: TTextGuidesConfiguration = {\n  enable: true\n}\n\n/**\n * @group Recognizer\n */\nexport type TTextConfConfiguration = {\n  customResources?: string[]\n  customLexicon?: string[]\n  addLKText?: boolean\n}\n\n/**\n * @group Recognizer\n */\nexport type TTextConfiguration = {\n  text?: boolean\n  mimeTypes: (\"text/plain\" | \"application/vnd.myscript.jiix\")[]\n  margin: TMarginConfiguration\n  guides?: TTextGuidesConfiguration\n  configuration?: TTextConfConfiguration\n  eraser?: TEraserConfiguration\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultTextConfiguration: TTextConfiguration = {\n  guides: DefaultTextGuidesConfiguration,\n  eraser: DefaultEraserConfiguration,\n  margin: DefaultMarginConfiguration,\n  mimeTypes: [\"application/vnd.myscript.jiix\"],\n}\n", "import { DefaultMarginConfiguration, TMarginConfiguration } from \"./MarginConfiguration\"\nimport { DefaultEraserConfiguration, TEraserConfiguration } from \"./EraserConfiguration\"\n\n/**\n * @group Recognizer\n */\nexport type TTextGuidesConfigurationV2 = {\n  enable: boolean,\n  \"line-gap-mm\"?: number,\n  \"origin-y-mm\"?: number,\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultTextGuidesConfigurationV2: TTextGuidesConfigurationV2 = {\n  enable: true,\n  \"line-gap-mm\": 100,\n  \"origin-y-mm\": 0,\n}\n\n/**\n * @group Recognizer\n */\nexport type TTextRecognizerHTTPV2ConfConfiguration = {\n  customResources?: string[]\n  customLexicon?: string[]\n  addLKText?: boolean\n}\n\n/**\n * @group Recognizer\n */\nexport type TTextRecognizerHTTPV2Configuration = {\n  text?: boolean\n  mimeTypes: (\"text/plain\" | \"application/vnd.myscript.jiix\")[]\n  margin: TMarginConfiguration\n  guides: TTextGuidesConfigurationV2\n  configuration?: TTextRecognizerHTTPV2ConfConfiguration\n  eraser?: TEraserConfiguration\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultTexConfigurationV2: TTextRecognizerHTTPV2Configuration = {\n  guides: DefaultTextGuidesConfigurationV2,\n  eraser: DefaultEraserConfiguration,\n  margin: DefaultMarginConfiguration,\n  mimeTypes: [\"application/vnd.myscript.jiix\"],\n}\n", "\n/**\n * @group Recognizer\n */\nexport type TConvertionConfiguration = {\n    force?: {\n        \"on-stylesheet-change\": boolean\n    }\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultConvertionConfiguration: TConvertionConfiguration = {\n    force: {\n        \"on-stylesheet-change\": false\n    }\n}\n", "\nimport { DefaultEraserConfiguration, TEraserConfiguration } from \"./EraserConfiguration\"\n\n/**\n * @group Recognizer\n */\nexport type TShapeConvertConfiguration = {\n  types?: (\"shape\")[]\n  \"match-text-size\"?: boolean\n}\n\nexport type TShapeBeautificationConfiguration = {\n    enable?: true\n}\n/**\n * @group Recognizer\n */\nexport type TShapeConfiguration = {\n  mimeTypes: (\"application/vnd.myscript.jiix\" | \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" | \"image/svg+xml\")[]\n  \"enable-sub-blocks\"?: boolean\n  convert?: TShapeConvertConfiguration\n  \"session-time\"?: number\n  eraser?: TEraserConfiguration\n  beautification?: TShapeBeautificationConfiguration\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultShapeConvertConfiguration: TShapeConvertConfiguration = {\n  types: [\"shape\"],\n  \"match-text-size\": true\n}\n\nexport const DefaultShapeBeautificationConfiguration: TShapeBeautificationConfiguration = {\n    enable: true\n  }\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultShapeConfiguration: TShapeConfiguration = {\n  convert: DefaultShapeConvertConfiguration,\n  eraser: DefaultEraserConfiguration,\n  mimeTypes: [\"application/vnd.myscript.jiix\"],\n  beautification: DefaultShapeBeautificationConfiguration\n}\n", "import { THistoryContext } from \"../history\"\nimport { TExport } from \"../model\"\nimport { TRecognizerWebSocketSSRMessageSVGPatch } from \"./RecognizerWebSocketSSRMessage\"\n\n/**\n * @group Recognizer\n * @summary\n * Lists all events that can be listened to on the editor or DOM element\n * @example\n * You can run code on \"RecognizerEventName\" raised by using\n * ```ts\n * recognizer.events.addEventListener(RecognizerEventName.CONTENT_CHANGED, (evt) => console.log(evt.detail))\n * ```\n */\nexport enum RecognizerEventName\n{\n  /**\n   * @summary event emitted at the start of connection initialization\n   */\n  START_INITIALIZATION = \"start-initialization\",\n  /**\n   * @summary event emitted after full recognizer initialization\n   */\n  END_INITIALIZATION = \"end-initialization\",\n  /**\n   * @summary event emitted after receiving an \"contentChanged\" message\n   */\n  CONTENT_CHANGED = \"content-changed\",\n  /**\n   * @summary event emitted after receiving an \"idle\" message\n   */\n  IDLE = \"idle\",\n  /**\n   * @summary event emitted after receiving an \"exported\" message\n   */\n  EXPORTED = \"exported\",\n  /**\n   * @summary event emitted when the recognizer encounters an error\n   */\n  ERROR = \"error\",\n  /**\n   * @remarks event emitted after connection closed\n   */\n  CONNECTION_CLOSE = \"connection-close\",\n  /**\n   * @summary\n   * event emitted after receiving an \"svgPatch\" message\n   * @remarks\n   * only usable in the case of websocket\n   */\n  SVG_PATCH = \"svg-patch\",\n  /**\n   * @summary event emitted session opened\n   */\n  SESSION_OPENED = \"session-opened\",\n\n}\n\n/**\n * @group Recognizer\n */\nexport class RecognizerEvent extends EventTarget\n{\n  protected abortController: AbortController\n\n  constructor()\n  {\n    super()\n    this.abortController = new AbortController()\n  }\n\n  removeAllListeners(): void\n  {\n    this.abortController.abort()\n    this.abortController = new AbortController()\n  }\n\n  protected emit(type: string, data?: unknown): void\n  {\n    const evt = new CustomEvent(type, Object.assign({ bubbles: true, composed: true }, data ? { detail: data } : undefined))\n    this.dispatchEvent(evt)\n  }\n\n  emitStartInitialization(): void\n  {\n    this.emit(RecognizerEventName.START_INITIALIZATION)\n  }\n  addStartInitialization(callback: () => void): void\n  {\n    this.addEventListener(\n      RecognizerEventName.START_INITIALIZATION,\n      () => callback(),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitEndtInitialization(): void\n  {\n    this.emit(RecognizerEventName.END_INITIALIZATION)\n  }\n  addEndInitialization(callback: () => void): void\n  {\n    this.addEventListener(\n      RecognizerEventName.END_INITIALIZATION,\n      () => callback(),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitSessionOpened(sessionId: string): void\n  {\n    this.emit(RecognizerEventName.SESSION_OPENED, sessionId)\n  }\n  addSessionOpenedListener(callback: (sessionId: string) => void): void\n  {\n    this.addEventListener(\n      RecognizerEventName.SESSION_OPENED,\n      (evt: unknown) => callback((evt as CustomEvent).detail as string),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitContentChanged(undoRedoContext: THistoryContext): void\n  {\n    this.emit(RecognizerEventName.CONTENT_CHANGED, {\n      ...undoRedoContext,\n      canClear: !undoRedoContext.empty\n    })\n  }\n  addContentChangedListener(callback: (context: THistoryContext) => void): void\n  {\n    this.addEventListener(\n      RecognizerEventName.CONTENT_CHANGED,\n      (evt: unknown) => callback((evt as CustomEvent).detail as THistoryContext),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitIdle(idle: boolean): void\n  {\n    this.emit(RecognizerEventName.IDLE, idle)\n  }\n  addIdleListener(callback: (idle: boolean) => void): void\n  {\n    this.addEventListener(\n      RecognizerEventName.IDLE,\n      (evt: unknown) => callback((evt as CustomEvent).detail as boolean),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitExported(exports: TExport): void\n  {\n    this.emit(RecognizerEventName.EXPORTED, exports)\n  }\n  addExportedListener(callback: (exports: TExport) => void): void\n  {\n    this.addEventListener(\n      RecognizerEventName.EXPORTED,\n      (evt: unknown) => callback((evt as CustomEvent).detail as TExport),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitError(err: Error): void\n  {\n    this.emit(RecognizerEventName.ERROR, err)\n  }\n  addErrorListener(callback: (err: Error) => void): void\n  {\n    this.addEventListener(\n      RecognizerEventName.ERROR,\n      (evt: unknown) => callback((evt as CustomEvent).detail as Error),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  emitConnectionClose({ code, message }: { code: number, message?: string }): void\n  {\n    this.emit(RecognizerEventName.CONNECTION_CLOSE, { code, message })\n  }\n  addConnectionCloseListener(callback: ({ code, message }: { code: number, message?: string }) => void): void\n  {\n    this.addEventListener(\n      RecognizerEventName.CONNECTION_CLOSE,\n      (evt: unknown) => callback((evt as CustomEvent).detail as { code: number, message?: string }),\n      { signal: this.abortController.signal }\n    )\n  }\n\n  /**\n   * @remarks only use in the case of websocket\n   */\n  emitSVGPatch(svgPatch: TRecognizerWebSocketSSRMessageSVGPatch): void\n  {\n    this.emit(RecognizerEventName.SVG_PATCH, svgPatch)\n  }\n  /**\n   * @remarks only usable in the case of websocket\n   */\n  addSVGPatchListener(callback:  (svgPatch: TRecognizerWebSocketSSRMessageSVGPatch) => void): void\n  {\n    this.addEventListener(\n      RecognizerEventName.SVG_PATCH,\n      (evt: unknown) => callback((evt as CustomEvent).detail as TRecognizerWebSocketSSRMessageSVGPatch),\n      { signal: this.abortController.signal }\n    )\n  }\n}\n", "/**\n * @group Recognizer\n * @remarks List all errors generated by the backend with their descriptions\n */\nexport enum RecognizerError {\n  NO_ACTIVITY = \"Session closed due to no activity. Without a connection on your part, it will be permanently lost after an hour.\",\n  WRONG_CREDENTIALS = \"Application credentials are invalid. Please check or regenerate your application key and hmackey.\",\n  TOO_OLD = \"Session is too old. Max Session Duration Reached.\",\n  NO_SESSION_FOUND = \"No sessions found. Without activation for 1 hour, sessions are deleted from the server. To avoid losing your work, use the json export, then import it this will create a new session.\",\n  UNKNOW = \"An unknown error has occurred.\",\n  ABNORMAL_CLOSURE = \"MyScript recognition server is not reachable.\",\n  CANT_ESTABLISH = \"Unable to establish a connection to MyScript recognition server. Check the host and your connectivity.\",\n  GOING_AWAY = \"MyScript recognition server is going away, either because of a server failure or because the browser is navigating away from the page that opened the connection.\",\n  PROTOCOL_ERROR = \"MyScript recognition server terminated the connection due to a protocol error.\",\n  UNSUPPORTED_DATA = \"MyScript recognition server terminated the connection because the endpoint received data of a type it cannot accept. (For example, a text-only endpoint received binary data.)\",\n  INVALID_FRAME_PAYLOAD = \"MyScript recognition server terminated the connection because a message was received that contained inconsistent data (e.g., non-UTF-8 data within a text message).\",\n  POLICY_VIOLATION = \"MyScript recognition server terminated the connection because it received a message that violates its policy.\",\n  MESSAGE_TOO_BIG = \"MyScript recognition server terminated the connection because a data frame was received that is too large.\",\n  INTERNAL_ERROR = \"MyScript recognition server terminated the connection because it encountered an unexpected condition that prevented it from fulfilling the request.\",\n  SERVICE_RESTART = \"MyScript recognition server terminated the connection because it is restarting.\",\n  TRY_AGAIN = \"MyScript recognition server terminated the connection due to a temporary condition, e.g. it is overloaded and is casting off some of its clients.\",\n  BAD_GATEWAY = \"MyScript recognition server was acting as a gateway or proxy and received an invalid response from the upstream server.\",\n  TLS_HANDSHAKE = \"MyScript recognition server connection was closed due to a failure to perform a TLS handshake\",\n}\n", "import { isVersionSuperiorOrEqual, mergeDeep, PartialDeep } from \"../utils\"\nimport {\n  DefaultDiagramConfiguration,\n  DefaultExportConfiguration,\n  DefaultMathConfiguration,\n  DefaultRawContentConfiguration,\n  DefaultRecognitionRendererConfiguration,\n  DefaultTextConfiguration,\n  TConvertionConfiguration,\n  TDiagramConfiguration,\n  TExportConfiguration,\n  TMathConfiguration,\n  TRawContentConfiguration,\n  TRecognitionRendererConfiguration,\n  TTextConfiguration\n} from \"./recognition\"\nimport { TRecognitionType } from \"./RecognitionConfiguration\"\nimport { DefaultServerHTTPConfiguration, TServerHTTPConfiguration } from \"./ServerConfiguration\"\n\n/**\n * @group Recognizer\n */\nexport type TRecognitionHTTPV1Configuration = {\n  type: TRecognitionType\n  lang: string\n  math: TMathConfiguration\n  text: TTextConfiguration\n  diagram: TDiagramConfiguration\n  \"raw-content\": TRawContentConfiguration\n  renderer: TRecognitionRendererConfiguration\n  export: TExportConfiguration\n  convert?: TConvertionConfiguration\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaulRecognitionHTTPV1ConfigurationConfiguration: TRecognitionHTTPV1Configuration = {\n  export: DefaultExportConfiguration,\n  math: DefaultMathConfiguration,\n  diagram: DefaultDiagramConfiguration,\n  \"raw-content\": DefaultRawContentConfiguration,\n  renderer: DefaultRecognitionRendererConfiguration,\n  text: DefaultTextConfiguration,\n  type: \"TEXT\",\n  lang: \"en_US\",\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerHTTPV1Configuration = {\n  server: TServerHTTPConfiguration\n  recognition: TRecognitionHTTPV1Configuration\n}\n\n/**\n * @group Recognizer\n */\nexport const DefaultRecognizerHTTPV1Configuration: TRecognizerHTTPV1Configuration =\n{\n  server: DefaultServerHTTPConfiguration,\n  recognition: DefaulRecognitionHTTPV1ConfigurationConfiguration\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport class RecognizerHTTPV1Configuration implements TRecognizerHTTPV1Configuration {\n  recognition: TRecognitionHTTPV1Configuration\n  server: TServerHTTPConfiguration\n\n  constructor(configuration?: PartialDeep<TRecognizerHTTPV1Configuration>)\n  {\n    this.server = mergeDeep({}, DefaultRecognizerHTTPV1Configuration.server, configuration?.server)\n    this.recognition = mergeDeep({}, DefaultRecognizerHTTPV1Configuration.recognition, configuration?.recognition)\n\n    if (configuration?.recognition?.text?.mimeTypes) {\n      this.recognition.text.mimeTypes = configuration.recognition.text.mimeTypes as (\"text/plain\" | \"application/vnd.myscript.jiix\")[]\n    }\n    this.recognition.text.mimeTypes = [...new Set(this.recognition.text.mimeTypes)]\n\n    if (configuration?.recognition?.math?.mimeTypes) {\n      this.recognition.math.mimeTypes = configuration.recognition.math.mimeTypes as (\"application/vnd.myscript.jiix\" | \"application/x-latex\" | \"application/mathml+xml\")[]\n    }\n    this.recognition.math.mimeTypes = [...new Set(this.recognition.math.mimeTypes)]\n\n    if (configuration?.recognition?.diagram?.mimeTypes) {\n      this.recognition.diagram.mimeTypes = configuration.recognition.diagram.mimeTypes as (\"application/vnd.myscript.jiix\" | \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" | \"image/svg+xml\")[]\n    }\n    this.recognition.diagram.mimeTypes = [...new Set(this.recognition.diagram.mimeTypes)]\n\n    if (configuration?.recognition?.diagram?.convert?.types) {\n      this.recognition.diagram.convert!.types = configuration.recognition.diagram.convert.types as (\"text\" | \"shape\")[]\n    }\n\n    if (configuration?.recognition?.[\"raw-content\"]?.recognition?.types) {\n      this.recognition[\"raw-content\"].recognition!.types = configuration?.recognition?.[\"raw-content\"]?.recognition?.types as (\"text\" | \"shape\")[]\n    }\n    this.recognition[\"raw-content\"].recognition.types = [...new Set(this.recognition[\"raw-content\"].recognition.types.filter((type) => type !== \"decoration\"))]\n\n    if (configuration?.recognition?.[\"raw-content\"]?.classification?.types) {\n      this.recognition[\"raw-content\"].classification!.types = configuration?.recognition?.[\"raw-content\"]?.classification?.types as (\"text\" | \"shape\")[]\n    }\n\n    if (this.server.version) {\n      if (!isVersionSuperiorOrEqual(this.server.version, \"2.3.0\")) {\n        delete this.recognition.convert\n      }\n      if (!isVersionSuperiorOrEqual(this.server.version, \"3.2.0\")) {\n        delete this.recognition.export.jiix.text.lines\n      }\n    }\n  }\n}\n", "import { LoggerCategory, LoggerManager } from \"../logger\"\nimport { Model, TExport, TJIIXExport } from \"../model\"\nimport { TStrokeGroup, TStrokeGroupToSend } from \"../symbol\"\nimport { StyleHelper, TPenStyle } from \"../style\"\nimport { computeHmac, getApiInfos, isVersionSuperiorOrEqual, PartialDeep } from \"../utils\"\nimport { RecognizerError } from \"./RecognizerError\"\nimport { RecognizerHTTPV1Configuration, TRecognizerHTTPV1Configuration } from \"./RecognizerHTTPV1Configuration\"\nimport { TConverstionState } from \"./RecognitionConfiguration\"\nimport { TDiagramConfiguration, TExportConfiguration, TMathConfiguration, TRawContentConfiguration, TTextConfiguration } from \"./recognition\"\n\ntype ApiError = {\n  code?: string\n  message: string\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerHTTPV1PostConfiguration = {\n  lang: string,\n  diagram?: TDiagramConfiguration,\n  math?: TMathConfiguration,\n  \"raw-content\"?: TRawContentConfiguration,\n  text?: TTextConfiguration,\n  export: TExportConfiguration\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerHTTPV1PostData = {\n  configuration: TRecognizerHTTPV1PostConfiguration,\n  xDPI: number,\n  yDPI: number,\n  contentType: string,\n  conversionState?: TConverstionState\n  height: number,\n  width: number,\n  strokeGroups: TStrokeGroupToSend[]\n}\n\n/**\n * @deprecated Use {@link RecognizerHTTPV2} instead.\n * @group Recognizer\n */\nexport class RecognizerHTTPV1\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.RECOGNIZER)\n\n  configuration: RecognizerHTTPV1Configuration\n\n  constructor(config: PartialDeep<TRecognizerHTTPV1Configuration>)\n  {\n    this.#logger.info(\"constructor\", { config })\n    this.configuration = new RecognizerHTTPV1Configuration(config)\n  }\n\n  get url()\n  {\n    return `${ this.configuration.server.scheme }://${ this.configuration.server.host }/api/v4.0/iink/batch`\n  }\n\n  get postConfig(): TRecognizerHTTPV1PostConfiguration\n  {\n    switch (this.configuration.recognition.type) {\n      case \"DIAGRAM\":\n        return {\n          lang: this.configuration.recognition.lang,\n          diagram: this.configuration.recognition.diagram,\n          export: this.configuration.recognition.export\n        }\n      case \"MATH\":\n        return {\n          lang: this.configuration.recognition.lang,\n          math: this.configuration.recognition.math,\n          export: this.configuration.recognition.export\n        }\n      case \"Raw Content\":\n        return {\n          lang: this.configuration.recognition.lang,\n          \"raw-content\": this.configuration.recognition[\"raw-content\"],\n          export: this.configuration.recognition.export\n        }\n      case \"TEXT\":\n        return {\n          lang: this.configuration.recognition.lang,\n          text: this.configuration.recognition.text,\n          export: this.configuration.recognition.export\n        }\n      default:\n        throw new Error(`get postConfig error Recognition type unkow \"${ this.configuration.recognition.type }\"`)\n        break\n    }\n  }\n\n  protected buildData(model: Model): TRecognizerHTTPV1PostData\n  {\n    this.#logger.info(\"buildData\", { model })\n    const isPenStyleEqual = (ps1: TPenStyle, ps2: TPenStyle) =>\n    {\n      return ps1 && ps2 && ps1[\"-myscript-pen-fill-color\"] === ps2[\"-myscript-pen-fill-color\"] &&\n        ps1[\"-myscript-pen-fill-style\"] === ps2[\"-myscript-pen-fill-style\"] &&\n        ps1[\"-myscript-pen-width\"] === ps2[\"-myscript-pen-width\"] &&\n        ps1.color === ps2.color &&\n        ps1.width === ps2.width\n    }\n\n    const strokeGroupByPenStyle: TStrokeGroup[] = []\n    model.symbols.forEach((s) =>\n    {\n      const groupIndex = strokeGroupByPenStyle.findIndex(sg => isPenStyleEqual(sg.penStyle, s.style))\n      if (groupIndex > -1) {\n        strokeGroupByPenStyle[groupIndex].strokes.push(s)\n      } else {\n        strokeGroupByPenStyle.push({\n          penStyle: s.style,\n          strokes: [s]\n        })\n      }\n    })\n\n    const strokeGroupsToSend: TStrokeGroupToSend[] = []\n    strokeGroupByPenStyle.forEach((group: TStrokeGroup) =>\n    {\n      const newPenStyle = JSON.stringify(group.penStyle) === \"{}\" ? undefined : StyleHelper.penStyleToCSS(group.penStyle as TPenStyle)\n      const newGroup = {\n        penStyle: newPenStyle,\n        strokes: group.strokes.map(s => s.formatToSend())\n      }\n      strokeGroupsToSend.push(newGroup)\n    })\n\n    const contentType: string = this.configuration.recognition.type === \"Raw Content\" ?\n      \"Raw Content\" :\n      this.configuration.recognition.type.charAt(0).toUpperCase() + this.configuration.recognition.type.slice(1).toLowerCase()\n\n    const data = {\n      configuration: this.postConfig,\n      xDPI: 96,\n      yDPI: 96,\n      contentType,\n      height: model.height,\n      width: model.width,\n      strokeGroups: strokeGroupsToSend\n    }\n    this.#logger.debug(\"buildData\", { data })\n    return data\n  }\n\n  protected async post(data: unknown, mimeType: string): Promise<unknown>\n  {\n    this.#logger.info(\"post\", { data, mimeType })\n    const headers = new Headers()\n    headers.append(\"Accept\", \"application/json,\" + mimeType)\n    headers.append(\"applicationKey\", this.configuration.server.applicationKey)\n    try {\n      const hmac = await computeHmac(JSON.stringify(data), this.configuration.server.applicationKey, this.configuration.server.hmacKey)\n      headers.append(\"hmac\", hmac)\n    } catch (error) {\n      this.#logger.error(\"post.computeHmac\", error)\n    }\n    headers.append(\"Content-Type\", \"application/json\")\n\n    if (!this.configuration.server.version) {\n      this.configuration.server.version = (await getApiInfos(this.configuration)).version\n    }\n    if (isVersionSuperiorOrEqual(this.configuration.server.version!, \"2.0.4\")) {\n      headers.append(\"myscript-client-name\", \"iink-ts\")\n      headers.append(\"myscript-client-version\", \"3.0.1\")\n    }\n    if (!isVersionSuperiorOrEqual(this.configuration.server.version!, \"2.3.0\")) {\n      delete this.configuration.recognition.convert\n    }\n    if (!isVersionSuperiorOrEqual(this.configuration.server.version!, \"3.2.0\")) {\n      delete this.configuration.recognition.export.jiix.text.lines\n    }\n\n    const reqInit: RequestInit = {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify(data)\n    }\n    const request = new Request(this.url, reqInit)\n    const response: Response = await fetch(request)\n    if (response.ok) {\n      const contentType = response.headers.get(\"content-type\")\n      let result: unknown\n      switch (contentType) {\n        case \"application/vnd.openxmlformats-officedocument.presentationml.presentation\":\n        case \"image/png\":\n        case \"image/jpeg\":\n          result = await response.blob()\n          break\n        case \"application/json\":\n          result = await response.json()\n          break\n        case \"application/vnd.myscript.jiix\":\n          result = await response.clone().json().catch(async () => await response.text())\n          break\n        default:\n          result = await response.text()\n          break\n      }\n      this.#logger.debug(\"post\", { result })\n      return result\n    } else {\n      const err = await response.json() as ApiError\n      this.#logger.error(\"post\", { err })\n      throw err\n    }\n  }\n\n  protected async tryFetch(data: TRecognizerHTTPV1PostData, mimeType: string): Promise<TExport | never>\n  {\n    this.#logger.debug(\"tryFetch\", { data, mimeType })\n    return this.post(data, mimeType)\n      .then((res) =>\n      {\n        const exports: TExport = {}\n        exports[mimeType] = res as TJIIXExport | string | Blob\n        this.#logger.debug(\"tryFetch\", { exports })\n        return exports\n      })\n      .catch((err) =>\n      {\n        this.#logger.error(\"tryFetch\", { data, mimeType, err })\n        let message = err.message || RecognizerError.UNKNOW\n        if (!err.code) {\n          message = RecognizerError.CANT_ESTABLISH\n        } else if (err.code === \"access.not.granted\") {\n          message = RecognizerError.WRONG_CREDENTIALS\n        }\n        const error = new Error(message)\n        throw error\n      })\n  }\n\n  protected getMimeTypes(requestedMimeTypes?: string[]): string[]\n  {\n    this.#logger.info(\"getMimeTypes\", { requestedMimeTypes })\n    let mimeTypes: string[] = requestedMimeTypes || []\n    if (!mimeTypes.length) {\n      switch (this.configuration.recognition.type) {\n        case \"DIAGRAM\":\n          mimeTypes = this.configuration.recognition.diagram.mimeTypes\n          break\n        case \"MATH\":\n          mimeTypes = this.configuration.recognition.math.mimeTypes\n          break\n        case \"Raw Content\":\n          mimeTypes = [\"application/vnd.myscript.jiix\"]\n          break\n        case \"TEXT\":\n          mimeTypes = this.configuration.recognition.text.mimeTypes\n          break\n        default:\n          throw new Error(`Recognition type \"${ this.configuration.recognition.type }\" is unknown.\\n Possible types are:\\n -DIAGRAM\\n -MATH\\n -Raw Content\\n -TEXT`)\n          break\n      }\n    }\n    return mimeTypes\n  }\n\n  async convert(model: Model, conversionState?: TConverstionState, requestedMimeTypes?: string[]): Promise<Model>\n  {\n    this.#logger.info(\"convert\", { model, conversionState, requestedMimeTypes })\n    const myModel = model.clone()\n    const mimeTypes = this.getMimeTypes(requestedMimeTypes)\n    const dataToConcert = this.buildData(myModel)\n    dataToConcert.conversionState = conversionState\n    const promises = mimeTypes.map(mt => this.tryFetch(dataToConcert, mt))\n    const exports: TExport[] = await Promise.all(promises)\n    exports.forEach(e =>\n    {\n      myModel.mergeConvert(e)\n    })\n    this.#logger.debug(\"convert\", { model: myModel })\n    return myModel\n  }\n\n  async export(model: Model, requestedMimeTypes?: string[]): Promise<Model>\n  {\n    this.#logger.info(\"export\", { model, requestedMimeTypes })\n    const myModel = model.clone()\n    if (myModel.symbols.length === 0) {\n      return Promise.resolve(myModel)\n    }\n    const mimeTypes = this.getMimeTypes(requestedMimeTypes)\n    if (!mimeTypes.length) {\n      this.#logger.error(\"export\", { model, requestedMimeTypes, \"Export failed, no mimeTypes define in recognition configuration\": String })\n      return Promise.reject(new Error(\"Export failed, no mimeTypes define in recognition configuration\"))\n    }\n    const mimeTypesRequiringExport: string[] = mimeTypes.filter(m => !myModel.exports || !myModel.exports[m])\n    const data = this.buildData(model)\n    const exports: TExport[] = await Promise.all(mimeTypesRequiringExport.map(mimeType => this.tryFetch(data, mimeType)))\n    exports.forEach(e =>\n    {\n      myModel.mergeExport(e)\n    })\n    this.#logger.debug(\"export\", { model: myModel })\n    return myModel\n  }\n\n  async resize(model: Model): Promise<Model>\n  {\n    this.#logger.info(\"resize\", { model })\n    return this.export(model)\n  }\n\n}\n", "import { mergeDeep, isVersionSuperiorOrEqual, PartialDeep } from \"../utils\"\nimport {\n  DefaultShapeConfiguration,\n  DefaultExportConfiguration,\n  DefaultMathConfiguration,\n  DefaultRawContentConfiguration,\n  DefaultTexConfigurationV2,\n  TConvertionConfiguration,\n  TShapeConfiguration,\n  TExportConfiguration,\n  TMathConfiguration,\n  TRawContentConfiguration,\n  TTextRecognizerHTTPV2Configuration\n} from \"./recognition\"\nimport { TRecognitionType } from \"./RecognitionConfiguration\"\nimport { DefaultServerHTTPConfiguration, TServerHTTPConfiguration } from \"./ServerConfiguration\"\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerHTTPV2RecognitionConfiguration = {\n  type: TRecognitionType\n  lang: string\n  math: TMathConfiguration\n  text: TTextRecognizerHTTPV2Configuration\n  shape: TShapeConfiguration\n  \"raw-content\": TRawContentConfiguration\n  export: TExportConfiguration\n  convert?: TConvertionConfiguration\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultRecognizerHTTPV2RecognitionConfiguration: TRecognizerHTTPV2RecognitionConfiguration = {\n  export: DefaultExportConfiguration,\n  math: DefaultMathConfiguration,\n  shape: DefaultShapeConfiguration,\n  \"raw-content\": DefaultRawContentConfiguration,\n  text: DefaultTexConfigurationV2,\n  type: \"TEXT\",\n  lang: \"en_US\",\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerHTTPV2Configuration = {\n  server: TServerHTTPConfiguration\n  recognition: TRecognizerHTTPV2RecognitionConfiguration\n}\n\n/**\n * @group Recognizer\n */\nexport const DefaultRecognizerHTTPV2Configuration: TRecognizerHTTPV2Configuration =\n{\n  server: DefaultServerHTTPConfiguration,\n  recognition: DefaultRecognizerHTTPV2RecognitionConfiguration\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport class RecognizerHTTPV2Configuration implements TRecognizerHTTPV2Configuration {\n  recognition: TRecognizerHTTPV2RecognitionConfiguration\n  server: TServerHTTPConfiguration\n\n  constructor(configuration?: PartialDeep<TRecognizerHTTPV2Configuration>)\n  {\n    this.server = mergeDeep({}, DefaultRecognizerHTTPV2Configuration.server, configuration?.server)\n    this.recognition = mergeDeep({}, DefaultRecognizerHTTPV2Configuration.recognition, configuration?.recognition)\n\n    if (configuration?.recognition?.text?.mimeTypes) {\n      this.recognition.text.mimeTypes = configuration.recognition.text.mimeTypes as (\"text/plain\" | \"application/vnd.myscript.jiix\")[]\n    }\n    this.recognition.text.mimeTypes = [...new Set(this.recognition.text.mimeTypes)]\n\n    if (configuration?.recognition?.math?.mimeTypes) {\n      this.recognition.math.mimeTypes = configuration.recognition.math.mimeTypes as (\"application/vnd.myscript.jiix\" | \"application/x-latex\" | \"application/mathml+xml\")[]\n    }\n    this.recognition.math.mimeTypes = [...new Set(this.recognition.math.mimeTypes)]\n\n    if (configuration?.recognition?.shape?.mimeTypes) {\n      this.recognition.shape.mimeTypes = configuration.recognition.shape.mimeTypes as (\"application/vnd.myscript.jiix\" | \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" | \"image/svg+xml\")[]\n    }\n    this.recognition.shape.mimeTypes = [...new Set(this.recognition.shape.mimeTypes)]\n\n    if (configuration?.recognition?.[\"raw-content\"]?.recognition?.types) {\n      this.recognition[\"raw-content\"].recognition!.types = configuration?.recognition?.[\"raw-content\"]?.recognition?.types as (\"text\" | \"shape\")[]\n    }\n    if (configuration?.recognition?.[\"raw-content\"]?.classification?.types) {\n      this.recognition[\"raw-content\"].classification!.types = configuration?.recognition?.[\"raw-content\"]?.classification?.types as (\"text\" | \"shape\")[]\n    }\n\n    if (this.server.version) {\n      if (!isVersionSuperiorOrEqual(this.server.version, \"2.3.0\")) {\n        delete this.recognition.convert\n      }\n      if (!isVersionSuperiorOrEqual(this.server.version, \"3.2.0\")) {\n        delete this.recognition.export.jiix.text.lines\n      }\n    }\n  }\n}\n", "import { LoggerCategory, LoggerManager } from \"../logger\"\nimport { TExport, TJIIXExport } from \"../model\"\nimport { TStroke, TStrokeToSend } from \"../symbol\"\nimport { computeHmac, getApiInfos, isVersionSuperiorOrEqual, PartialDeep } from \"../utils\"\nimport { RecognizerError } from \"./RecognizerError\"\nimport { RecognizerHTTPV2Configuration, TRecognizerHTTPV2Configuration } from \"./RecognizerHTTPV2Configuration\"\nimport { TDiagramConfiguration, TExportConfiguration, TMathConfiguration, TRawContentConfiguration, TTextConfiguration } from \"./recognition\"\n\ntype ApiError = {\n  code?: string\n  message: string\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerHTTPV2PostConfiguration = {\n  lang: string,\n  diagram?: TDiagramConfiguration,\n  math?: TMathConfiguration,\n  \"raw-content\"?: TRawContentConfiguration,\n  text?: TTextConfiguration,\n  export: TExportConfiguration\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerHTTPV2PostData = {\n  scaleX: number,\n  scaleY: number,\n  configuration: TRecognizerHTTPV2PostConfiguration,\n  contentType: string,\n  strokes: TStrokeToSend[]\n}\n\n/**\n * @group Recognizer\n */\nexport class RecognizerHTTPV2 {\n  #logger = LoggerManager.getLogger(LoggerCategory.RECOGNIZER)\n\n  protected configuration: RecognizerHTTPV2Configuration\n\n  constructor(config: PartialDeep<TRecognizerHTTPV2Configuration>) {\n    this.#logger.info(\"constructor\", { config })\n    this.configuration = new RecognizerHTTPV2Configuration(config)\n  }\n\n  get url() {\n    return `${this.configuration.server.scheme}://${this.configuration.server.host}/api/v4.0/iink/recognize`\n  }\n\n  get postConfig(): TRecognizerHTTPV2PostConfiguration {\n    switch (this.configuration.recognition.type) {\n      case \"SHAPE\":\n        return {\n          lang: this.configuration.recognition.lang,\n          diagram: this.configuration.recognition.shape,\n          export: this.configuration.recognition.export\n        }\n      case \"MATH\":\n        return {\n          lang: this.configuration.recognition.lang,\n          math: this.configuration.recognition.math,\n          export: this.configuration.recognition.export\n        }\n      case \"Raw Content\":\n        return {\n          lang: this.configuration.recognition.lang,\n          \"raw-content\": this.configuration.recognition[\"raw-content\"],\n          export: this.configuration.recognition.export\n        }\n      case \"TEXT\":\n        return {\n          lang: this.configuration.recognition.lang,\n          text: this.configuration.recognition.text,\n          export: this.configuration.recognition.export\n        }\n      default:\n        throw new Error(`get postConfig error Recognition type unkow \"${this.configuration.recognition.type}\"`)\n        break\n    }\n  }\n\n  protected formatStrokes(strokes: TStroke[]): TStrokeToSend[] {\n    return strokes.map(s => {\n      return {\n        id: s.id,\n        pointerType: s.pointerType,\n        p: s.pointers.map(p => p.p),\n        t: s.pointers.map(p => p.t),\n        x: s.pointers.map(p => p.x),\n        y: s.pointers.map(p => p.y)\n      }\n    })\n  }\n\n  protected buildData(strokes: TStroke[]): TRecognizerHTTPV2PostData {\n    this.#logger.info(\"buildData\", { strokes })\n\n    const contentType: string = this.configuration.recognition.type === \"Raw Content\" ?\n      \"Raw Content\" :\n      this.configuration.recognition.type.charAt(0).toUpperCase() + this.configuration.recognition.type.slice(1).toLowerCase()\n\n    const data = {\n      configuration: this.postConfig,\n      scaleX: 0.265,\n      scaleY: 0.265,\n      contentType,\n      strokes: this.formatStrokes(strokes)\n    }\n    this.#logger.debug(\"buildData\", { data })\n    return data\n  }\n\n  protected async post(data: unknown, mimeType: string): Promise<unknown> {\n    this.#logger.info(\"post\", { data, mimeType })\n    const headers = new Headers()\n    headers.append(\"Accept\", mimeType)\n    headers.append(\"applicationKey\", this.configuration.server.applicationKey)\n    try {\n      const hmac = await computeHmac(JSON.stringify(data), this.configuration.server.applicationKey, this.configuration.server.hmacKey)\n      headers.append(\"hmac\", hmac)\n    } catch (error) {\n      this.#logger.error(\"post.computeHmac\", error)\n    }\n    headers.append(\"Content-Type\", \"application/json\")\n\n    if (!this.configuration.server.version) {\n      this.configuration.server.version = (await getApiInfos(this.configuration)).version\n    }\n\n    if (this.configuration.server.version && isVersionSuperiorOrEqual(this.configuration.server.version, \"2.0.4\")) {\n      headers.append(\"myscript-client-name\", \"iink-ts\")\n      headers.append(\"myscript-client-version\", \"3.0.1\")\n    }\n\n    const reqInit: RequestInit = {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify(data)\n    }\n    const request = new Request(this.url, reqInit)\n    const response: Response = await fetch(request)\n    if (response.ok) {\n      const contentType = response.headers.get(\"content-type\")\n      let result: unknown\n      switch (contentType) {\n        case \"application/vnd.openxmlformats-officedocument.presentationml.presentation\":\n        case \"image/png\":\n        case \"image/jpeg\":\n          result = await response.blob()\n          break\n        case \"application/json\":\n          result = await response.json()\n          break\n        case \"application/vnd.myscript.jiix\":\n          result = await response.clone().json().catch(async () => await response.text())\n          break\n        default:\n          result = await response.text()\n          break\n      }\n      this.#logger.debug(\"post\", { result })\n      return result\n    } else {\n      const err = await response.json() as ApiError\n      this.#logger.error(\"post\", { err })\n      throw err\n    }\n  }\n\n  protected async tryFetch(data: TRecognizerHTTPV2PostData, mimeType: string): Promise<TExport | never> {\n    this.#logger.debug(\"tryFetch\", { data, mimeType })\n    return this.post(data, mimeType)\n      .then((res) => {\n        const exports: TExport = {}\n        exports[mimeType] = res as TJIIXExport | string | Blob\n        this.#logger.debug(\"tryFetch\", { exports })\n        return exports\n      })\n      .catch((err) => {\n        this.#logger.error(\"tryFetch\", { data, mimeType, err })\n        let message = err.message || RecognizerError.UNKNOW\n        if (!err.code) {\n          message = RecognizerError.CANT_ESTABLISH\n        } else if (err.code === \"access.not.granted\") {\n          message = RecognizerError.WRONG_CREDENTIALS\n        }\n        const error = new Error(message)\n        throw error\n      })\n  }\n\n  protected getMimeTypes(requestedMimeTypes?: string[]): string[] {\n    this.#logger.info(\"getMimeTypes\", { requestedMimeTypes })\n    let mimeTypes: string[] = requestedMimeTypes || []\n    if (!mimeTypes.length) {\n      switch (this.configuration.recognition.type) {\n        case \"SHAPE\":\n          mimeTypes = this.configuration.recognition.shape.mimeTypes\n          break\n        case \"MATH\":\n          mimeTypes = this.configuration.recognition.math.mimeTypes\n          break\n        case \"Raw Content\":\n          mimeTypes = [\"application/vnd.myscript.jiix\"]\n          break\n        case \"TEXT\":\n          mimeTypes = this.configuration.recognition.text.mimeTypes\n          break\n        default:\n          throw new Error(`Recognition type \"${this.configuration.recognition.type}\" is unknown.\\n Possible types are:\\n -DIAGRAM\\n -MATH\\n -Raw Content\\n -TEXT\\n -SHAPE`)\n          break\n      }\n    }\n    return mimeTypes\n  }\n\n  async send(strokes: TStroke[]): Promise<TExport> {\n    this.#logger.info(\"send\", strokes)\n    let recognition: TExport = {}\n\n    if (strokes.length === 0) {\n      return Promise.resolve(recognition)\n    }\n    if (this.configuration.recognition.type) {\n      const mimeTypes = this.getMimeTypes()\n      if (!mimeTypes.length) {\n        const error = new Error(\"send failed, no mimeTypes define in recognition configuration\")\n        this.#logger.error(\"send\", error)\n        return Promise.reject(error)\n      }\n      const data = this.buildData(strokes)\n      const exports: TExport[] = await Promise.all(mimeTypes.map(mimeType => this.tryFetch(data, mimeType)))\n      exports.forEach(e => {\n        Object.assign(recognition, e)\n      })\n    }\n    else {\n      const data = this.buildData(strokes)\n      recognition = await this.tryFetch(data, \"application/vnd.myscript.jiix\")\n    }\n\n    this.#logger.debug(\"send\", recognition)\n    return recognition\n  }\n}\n", "import { TGesture } from \"../gesture\"\nimport { TExport } from \"../model\"\n\n/**\n * @group Recognizer\n */\nexport enum TRecognizerWebSocketMessageType\n{\n  HMAC_Challenge = \"hmacChallenge\",\n  Authenticated = \"authenticated\",\n  SessionDescription = \"sessionDescription\",\n  NewPart = \"newPart\",\n  PartChanged = \"partChanged\",\n  ContentChanged = \"contentChanged\",\n  Idle = \"idle\",\n  Pong = \"pong\",\n  Exported = \"exported\",\n  GestureDetected = \"gestureDetected\",\n  ContextlessGesture = \"contextlessGesture\",\n  Error = \"error\",\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerWebSocketMessage<T = string> = {\n  type: T\n  [key: string]: unknown\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerWebSocketMessageAuthenticated = TRecognizerWebSocketMessage<TRecognizerWebSocketMessageType.Authenticated>\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerWebSocketMessageHMACChallenge = TRecognizerWebSocketMessage<TRecognizerWebSocketMessageType.HMAC_Challenge> & {\n  hmacChallenge: string\n  iinkSessionId: string\n}\n\n/**\n * @group Recognizer\n */\nexport type TInteractiveInkSessionDescriptionMessage = TRecognizerWebSocketMessage<TRecognizerWebSocketMessageType.SessionDescription> & {\n  contentPartCount: number\n  iinkSessionId: string\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerWebSocketMessageNewPart = TRecognizerWebSocketMessage<TRecognizerWebSocketMessageType.NewPart> & {\n  id: string\n  idx: null\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerWebSocketMessagePartChange = TRecognizerWebSocketMessage<TRecognizerWebSocketMessageType.PartChanged> & {\n  partIdx: number\n  partId: string\n  partCount: number\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerWebSocketMessageContentChange = TRecognizerWebSocketMessage<TRecognizerWebSocketMessageType.ContentChanged> & {\n  partId: string\n  canUndo: boolean\n  canRedo: boolean\n  empty: boolean\n  undoStackIndex: number\n  possibleUndoCount: number\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerWebSocketMessageExport = TRecognizerWebSocketMessage<TRecognizerWebSocketMessageType.Exported> & {\n  partId: string\n  exports: TExport\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerWebSocketMessageGesture = TRecognizerWebSocketMessage<TRecognizerWebSocketMessageType.GestureDetected> & TGesture\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerWebSocketMessageContextlessGesture = TRecognizerWebSocketMessage<TRecognizerWebSocketMessageType.ContextlessGesture> & {\n  gestureType: \"none\" | \"scratch\" | \"left-right\" | \"right-left\" | \"bottom-top\" | \"top-bottom\" | \"surround\",\n  strokeId: string\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerWebSocketMessagePong = TRecognizerWebSocketMessage<TRecognizerWebSocketMessageType.Pong>\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerWebSocketMessageIdle = TRecognizerWebSocketMessage<TRecognizerWebSocketMessageType.Idle>\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerWebSocketMessageError = TRecognizerWebSocketMessage<TRecognizerWebSocketMessageType.Error> & {\n  code?: number | string\n  message?: string\n  data?: {\n    code: number | string\n    message: string\n  }\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerWebSocketMessageReceived =\n  TRecognizerWebSocketMessageAuthenticated |\n  TRecognizerWebSocketMessageHMACChallenge |\n  TInteractiveInkSessionDescriptionMessage |\n  TRecognizerWebSocketMessageNewPart |\n  TRecognizerWebSocketMessagePartChange |\n  TRecognizerWebSocketMessageContentChange |\n  TRecognizerWebSocketMessageExport |\n  TRecognizerWebSocketMessageGesture |\n  TRecognizerWebSocketMessageContextlessGesture |\n  TRecognizerWebSocketMessagePong |\n  TRecognizerWebSocketMessageIdle |\n  TRecognizerWebSocketMessageError\n", "import { mergeDeep, isVersionSuperiorOrEqual, PartialDeep } from \"../utils\"\nimport { TExportConfiguration, TTextConfConfiguration } from \"./recognition\"\nimport { DefaultServerWebsocketConfiguration, TServerWebsocketConfiguration } from \"./ServerConfiguration\"\n\n/**\n * @group Recognizer\n */\nexport type TRecognitionWebSocketConfiguration = {\n  lang: string\n  export: TExportConfiguration\n  \"raw-content\": {\n    text?: TTextConfConfiguration\n    \"session-time\"?: number\n    recognition?: {\n      types: (\"text\" | \"shape\")[]\n    }\n    classification?: {\n      types: (\"text\" | \"shape\")[]\n    }\n    gestures?: (\"underline\" | \"scratch-out\" | \"join\" | \"insert\" | \"strike-through\" | \"surround\")[]\n  }\n  gesture: {\n    enable: boolean,\n    ignoreGestureStrokes: boolean\n  }\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultRecognitionWebSocketConfiguration: TRecognitionWebSocketConfiguration = {\n  export: {\n    jiix: {\n      \"bounding-box\": true,\n      \"full-stroke-ids\": true,\n      ids: true,\n      strokes: false,\n      text: {\n        chars: true,\n        words: true,\n        lines: true\n      }\n    }\n  },\n  \"raw-content\": {\n    recognition: {\n      types: [\"text\", \"shape\"]\n    },\n    classification: {\n      types: [\"text\", \"shape\"]\n    },\n    gestures: [\"underline\", \"scratch-out\", \"join\", \"insert\", \"strike-through\", \"surround\"]\n  },\n  lang: \"en_US\",\n  gesture: {\n    enable: true,\n    ignoreGestureStrokes: false,\n  }\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerWebSocketConfiguration = {\n  server: TServerWebsocketConfiguration\n  recognition: TRecognitionWebSocketConfiguration\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultRecognizerWebSocketConfiguration: TRecognizerWebSocketConfiguration =\n{\n  server: DefaultServerWebsocketConfiguration,\n  recognition: DefaultRecognitionWebSocketConfiguration\n}\n\n/**\n * @group Recognizer\n */\nexport class RecognizerWebSocketConfiguration implements TRecognizerWebSocketConfiguration\n{\n  server: TServerWebsocketConfiguration\n  recognition: TRecognitionWebSocketConfiguration\n\n  constructor(configuration?: PartialDeep<TRecognizerWebSocketConfiguration>)\n  {\n    this.server = mergeDeep({}, DefaultRecognizerWebSocketConfiguration.server, configuration?.server)\n\n    this.recognition = mergeDeep({}, DefaultRecognizerWebSocketConfiguration.recognition, configuration?.recognition)\n    this.recognition.export.jiix[\"full-stroke-ids\"] = true\n    this.recognition.export.jiix.ids = true\n    this.recognition.export.jiix.text.words = true\n    this.recognition.export.jiix.text.chars = true\n    this.recognition.export.jiix.text.lines = true\n    this.recognition.export.jiix[\"bounding-box\"] = true\n    if (configuration?.recognition?.[\"raw-content\"]?.recognition?.types) {\n      this.recognition[\"raw-content\"].recognition!.types = configuration.recognition[\"raw-content\"].recognition.types as (\"text\" | \"shape\")[]\n    }\n    if (configuration?.recognition?.[\"raw-content\"]?.classification?.types) {\n      this.recognition[\"raw-content\"].classification!.types = configuration.recognition[\"raw-content\"].classification.types as (\"text\" | \"shape\")[]\n    }\n    if (configuration?.recognition?.[\"raw-content\"]?.gestures) {\n      this.recognition[\"raw-content\"].gestures = configuration.recognition[\"raw-content\"].gestures as (\"underline\" | \"scratch-out\" | \"join\" | \"insert\" | \"strike-through\" | \"surround\")[]\n    }\n    if (this.server.version && !isVersionSuperiorOrEqual(this.server.version, \"3.2.0\")) {\n      delete this.recognition.export.jiix.text.lines\n      delete this.recognition[\"raw-content\"].classification\n    }\n  }\n}\n", "import { TIIHistoryBackendChanges, THistoryContext } from \"../history\"\nimport { LoggerCategory, LoggerManager } from \"../logger\"\nimport { TExport, TJIIXExport } from \"../model\"\nimport { IIStroke } from \"../symbol\"\nimport { TMatrixTransform } from \"../transform\"\nimport { computeHmac, mergeDeep, DeferredPromise, PartialDeep, isVersionSuperiorOrEqual, getApiInfos } from \"../utils\"\nimport\n{\n  TRecognizerWebSocketMessage,\n  TRecognizerWebSocketMessageContentChange,\n  TRecognizerWebSocketMessageContextlessGesture,\n  TRecognizerWebSocketMessageError,\n  TRecognizerWebSocketMessageExport,\n  TRecognizerWebSocketMessageGesture,\n  TRecognizerWebSocketMessageHMACChallenge,\n  TRecognizerWebSocketMessageNewPart,\n  TRecognizerWebSocketMessagePartChange,\n  TRecognizerWebSocketMessageReceived,\n  TRecognizerWebSocketMessageType,\n  TInteractiveInkSessionDescriptionMessage\n} from \"./RecognizerWebSocketMessage\"\nimport { RecognizerError } from \"./RecognizerError\"\nimport PingWorker from \"web-worker:../worker/ping.worker.ts\"\nimport { RecognizerEvent } from \"./RecognizerEvent\"\nimport { RecognizerWebSocketConfiguration, TRecognizerWebSocketConfiguration } from \"./RecognizerWebSocketConfiguration\"\n\n/**\n * A websocket dialog have this sequence :\n * --------------- Client --------------------------------------------------------------- Server ---------------\n * { type: \"authenticate\" }                           ==================>\n *                                                    <==================       { type: \"hmacChallenge\" }\n * { type: \"hmac\" }                                   ==================>\n *                                                    <==================       { type: \"authenticated\" }\n * { type: \"initSession\" | \"restoreSession\" }         ==================>\n *                                                    <==================       { type: \"sessionDescription\" }\n * { type: \"newContentPart\" | \"openContentPart\" }     ==================>\n *                                                    <==================       { type: \"partChanged\" }\n * { type: \"addStrokes\" }                             ==================>\n *                                                    <==================       { type: \"contentChanged\" }\n * { type: \"transform\" }                              ==================>\n *                                                    <==================       { type: \"contentChanged\" }\n * { type: \"eraseStrokes\" }                           ==================>\n *                                                    <==================       { type: \"contentChanged\" }\n */\n\n/**\n * @group Recognizer\n */\nexport class RecognizerWebSocket\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.RECOGNIZER)\n\n  protected socket!: WebSocket\n  protected pingWorker?: Worker\n  protected pingCount = 0\n  protected reconnectionCount = 0\n  protected sessionId?: string\n  protected currentPartId?: string\n  protected currentErrorCode?: string | number\n\n  protected addStrokeDeferred?: DeferredPromise<TRecognizerWebSocketMessageGesture | undefined>\n  protected contextlessGestureDeferred: Map<string, DeferredPromise<TRecognizerWebSocketMessageContextlessGesture>>\n  protected transformStrokeDeferred?: DeferredPromise<void>\n  protected eraseStrokeDeferred?: DeferredPromise<void>\n  protected replaceStrokeDeferred?: DeferredPromise<void>\n  protected exportDeferredMap: Map<string, DeferredPromise<TExport>>\n  protected closeDeferred?: DeferredPromise<void>\n  protected waitForIdleDeferred?: DeferredPromise<void>\n  protected undoDeferred?: DeferredPromise<void>\n  protected redoDeferred?: DeferredPromise<void>\n  protected clearDeferred?: DeferredPromise<void>\n\n  configuration: RecognizerWebSocketConfiguration\n  initialized: DeferredPromise<void>\n  url: string\n  event: RecognizerEvent\n\n  constructor(config: PartialDeep<TRecognizerWebSocketConfiguration>, event?: RecognizerEvent)\n  {\n    this.#logger.info(\"constructor\", { config })\n    this.configuration = new RecognizerWebSocketConfiguration(config)\n    const scheme = (this.configuration.server.scheme === \"https\") ? \"wss\" : \"ws\"\n    this.url = `${ scheme }://${ this.configuration.server.host }/api/v4.0/iink/offscreen?applicationKey=${ this.configuration.server.applicationKey }`\n\n    this.event = event || new RecognizerEvent()\n    this.initialized = new DeferredPromise<void>()\n    this.exportDeferredMap = new Map()\n    this.contextlessGestureDeferred = new Map()\n  }\n\n  get mimeTypes(): string[]\n  {\n    return [\"application/vnd.myscript.jiix\"]\n  }\n\n  async #send(message: TRecognizerWebSocketMessage): Promise<void>\n  {\n    if (!this.socket) {\n      throw new Error(\"Recognizer must be initilized\")\n    }\n    if (this.socket.readyState === this.socket.OPEN) {\n      this.socket.send(JSON.stringify(message))\n    }\n    else {\n      throw new Error(`Can not send message: ${message.type}, connection not ready, state: ${ this.socket.readyState }`)\n    }\n  }\n\n  protected rejectDeferredPending(error: Error | string): void\n  {\n    this.initialized.reject(error)\n    this.addStrokeDeferred?.reject(error)\n    this.transformStrokeDeferred?.reject(error)\n    this.eraseStrokeDeferred?.reject(error)\n    this.replaceStrokeDeferred?.reject(error)\n    this.undoDeferred?.reject(error)\n    this.redoDeferred?.reject(error)\n    this.clearDeferred?.reject(error)\n    Array.from(this.contextlessGestureDeferred.values())\n      .forEach(v =>\n      {\n        v.reject(error)\n      })\n    Array.from(this.exportDeferredMap.values())\n      .forEach(v =>\n      {\n        v.reject(error)\n      })\n    this.waitForIdleDeferred?.reject(error)\n  }\n\n  protected resetAllDeferred(): void\n  {\n    this.initialized = new DeferredPromise<void>()\n    this.addStrokeDeferred = undefined\n    this.contextlessGestureDeferred.clear()\n    this.transformStrokeDeferred = undefined\n    this.eraseStrokeDeferred = undefined\n    this.replaceStrokeDeferred = undefined\n    this.exportDeferredMap.clear()\n    this.waitForIdleDeferred = undefined\n    this.closeDeferred = undefined\n  }\n\n  protected clearSocketListener(): void\n  {\n    this.socket.removeEventListener(\"open\", this.openCallback.bind(this))\n    this.socket.removeEventListener(\"close\", this.closeCallback.bind(this))\n    this.socket.removeEventListener(\"message\", this.messageCallback.bind(this))\n  }\n\n  protected closeCallback(evt: CloseEvent): void\n  {\n    this.#logger.info(\"closeCallback\", { evt })\n    let message = evt.reason\n    if (!this.currentErrorCode) {\n      switch (evt.code) {\n        case 1000:\n          // Normal Closure\n          break\n        case 1001:\n          message = RecognizerError.GOING_AWAY\n          break\n        case 1002:\n          message = RecognizerError.PROTOCOL_ERROR\n          break\n        case 1003:\n          message = RecognizerError.UNSUPPORTED_DATA\n          break\n        case 1006:\n          message = RecognizerError.ABNORMAL_CLOSURE\n          break\n        case 1007:\n          message = RecognizerError.INVALID_FRAME_PAYLOAD\n          break\n        case 1008:\n          message = RecognizerError.POLICY_VIOLATION\n          break\n        case 1009:\n          message = RecognizerError.MESSAGE_TOO_BIG\n          break\n        case 1011:\n          message = RecognizerError.INTERNAL_ERROR\n          break\n        case 1012:\n          message = RecognizerError.SERVICE_RESTART\n          break\n        case 1013:\n          message = RecognizerError.TRY_AGAIN\n          break\n        case 1014:\n          message = RecognizerError.BAD_GATEWAY\n          break\n        case 1015:\n          message = RecognizerError.TLS_HANDSHAKE\n          break\n        default:\n          message = RecognizerError.CANT_ESTABLISH\n          break\n      }\n    }\n\n    this.clearSocketListener()\n    this.closeDeferred?.resolve()\n    if (!this.currentErrorCode && evt.code !== 1000) {\n      const error = new Error(message)\n      this.event.emitError(error)\n      this.rejectDeferredPending(message)\n    }\n    this.pingWorker?.terminate()\n    this.resetAllDeferred()\n  }\n\n  protected openCallback(): void\n  {\n    this.reconnectionCount = 0\n    this.#send({\n      type: \"authenticate\",\n      \"myscript-client-name\": \"iink-ts\",\n      \"myscript-client-version\": \"3.0.1\",\n    })\n  }\n\n  protected async manageHMACChallenge(hmacChallengeMessage: TRecognizerWebSocketMessageHMACChallenge): Promise<void>\n  {\n    this.#send({\n      type: \"hmac\",\n      hmac: await computeHmac(hmacChallengeMessage.hmacChallenge, this.configuration.server.applicationKey, this.configuration.server.hmacKey)\n    })\n  }\n\n  protected initPing(): void\n  {\n    this.pingWorker = new PingWorker()\n    this.pingWorker.postMessage({\n      pingDelay: this.configuration.server.websocket.pingDelay,\n    })\n    this.pingWorker.onmessage = () =>\n    {\n      if (this.socket.readyState <= 1) {\n        if (this.pingCount < this.configuration.server.websocket.maxPingLostCount) {\n          this.send({ type: \"ping\" })\n        }\n        else {\n          this.close(1000, \"MAXIMUM_PING_REACHED\")\n          this.pingWorker?.terminate()\n        }\n        this.pingCount++\n      }\n    }\n  }\n\n  protected manageAuthenticated(): void\n  {\n    if (!isVersionSuperiorOrEqual(this.configuration.server.version!, \"3.2.0\")) {\n      delete this.configuration.recognition.export.jiix.text.lines\n      delete this.configuration.recognition[\"raw-content\"].classification\n    }\n    const pixelTomm = 25.4 / 96\n    this.#send({\n      type: this.sessionId ? \"restoreSession\" : \"initSession\",\n      iinkSessionId: this.sessionId,\n      scaleX: pixelTomm,\n      scaleY: pixelTomm,\n      configuration: this.configuration.recognition\n    })\n  }\n\n  protected manageSessionDescriptionMessage(sessionDescriptionMessage: TInteractiveInkSessionDescriptionMessage): void\n  {\n    if (sessionDescriptionMessage.iinkSessionId) {\n      this.sessionId = sessionDescriptionMessage.iinkSessionId\n      this.event.emitSessionOpened(this.sessionId)\n    }\n    if (this.currentPartId) {\n      this.#send({ type: \"openContentPart\", id: this.currentPartId })\n    }\n    else {\n      this.#send({ type: \"newContentPart\", contentType: \"Raw Content\", mimeTypes: this.mimeTypes })\n    }\n  }\n\n  protected manageNewPartMessage(newPartMessage: TRecognizerWebSocketMessageNewPart): void\n  {\n    this.initialized.resolve()\n    this.currentPartId = newPartMessage.id\n  }\n\n  protected managePartChangeMessage(partChangeMessage: TRecognizerWebSocketMessagePartChange): void\n  {\n    this.initialized.resolve()\n    this.currentPartId = partChangeMessage.partId\n  }\n\n  protected manageContentChangedMessage(contentChangeMessage: TRecognizerWebSocketMessageContentChange): void\n  {\n    this.initialized.resolve()\n    this.replaceStrokeDeferred?.resolve()\n    this.transformStrokeDeferred?.resolve()\n    this.eraseStrokeDeferred?.resolve()\n    this.undoDeferred?.resolve()\n    this.redoDeferred?.resolve()\n    this.clearDeferred?.resolve()\n    this.event.emitContentChanged({\n      canRedo: contentChangeMessage.canRedo,\n      canUndo: contentChangeMessage.canRedo,\n    } as THistoryContext)\n  }\n\n  protected manageExportMessage(exportMessage: TRecognizerWebSocketMessageExport): void\n  {\n    if (exportMessage.exports[\"application/vnd.myscript.jiix\"]) {\n      exportMessage.exports[\"application/vnd.myscript.jiix\"] = JSON.parse(exportMessage.exports[\"application/vnd.myscript.jiix\"].toString()) as TJIIXExport\n    }\n\n    Object.keys(exportMessage.exports)\n      .forEach(key =>\n      {\n        if (this.exportDeferredMap.has(key)) {\n          this.exportDeferredMap.get(key)!.resolve(exportMessage.exports)\n        }\n      })\n    this.event.emitExported(exportMessage.exports)\n  }\n\n  protected manageWaitForIdle(): void\n  {\n    this.waitForIdleDeferred?.resolve()\n    this.event.emitIdle(true)\n  }\n\n  protected manageErrorMessage(errorMessage: TRecognizerWebSocketMessageError): void\n  {\n    this.currentErrorCode = errorMessage.data?.code || errorMessage.code\n    let message = errorMessage.data?.message || errorMessage.message || RecognizerError.UNKNOW\n\n    if (this.currentErrorCode === \"no.activity\") {\n      this.rejectDeferredPending(message)\n      this.event.emitConnectionClose({ code: 1000,  message: RecognizerError.NO_ACTIVITY })\n    }\n    else {\n      switch (this.currentErrorCode) {\n        case \"access.not.granted\":\n          message = RecognizerError.WRONG_CREDENTIALS\n          break\n        case \"session.too.old\":\n          message = RecognizerError.TOO_OLD\n          break\n        case \"restore.session.not.found\":\n          message = RecognizerError.NO_SESSION_FOUND\n          break\n      }\n      this.rejectDeferredPending(message)\n      this.event.emitError(new Error(message))\n    }\n  }\n\n  protected manageGestureDetected(gestureMessage: TRecognizerWebSocketMessageGesture): void\n  {\n    this.addStrokeDeferred?.resolve(gestureMessage)\n  }\n\n  protected manageContextlessGesture(gestureMessage: TRecognizerWebSocketMessageContextlessGesture): void\n  {\n    this.contextlessGestureDeferred.get(gestureMessage.strokeId)?.resolve(gestureMessage)\n  }\n\n  protected messageCallback(message: MessageEvent<string>): void\n  {\n    this.currentErrorCode = undefined\n    try {\n      const websocketMessage: TRecognizerWebSocketMessageReceived = JSON.parse(message.data)\n      if (websocketMessage.type === TRecognizerWebSocketMessageType.Pong) {\n        return\n      }\n      this.pingCount = 0\n      switch (websocketMessage.type) {\n        case TRecognizerWebSocketMessageType.HMAC_Challenge:\n          this.manageHMACChallenge(websocketMessage)\n          break\n        case TRecognizerWebSocketMessageType.Authenticated:\n          this.manageAuthenticated()\n          break\n        case TRecognizerWebSocketMessageType.SessionDescription:\n          this.manageSessionDescriptionMessage(websocketMessage)\n          break\n        case TRecognizerWebSocketMessageType.NewPart:\n          this.manageNewPartMessage(websocketMessage)\n          break\n        case TRecognizerWebSocketMessageType.PartChanged:\n          this.managePartChangeMessage(websocketMessage)\n          break\n        case TRecognizerWebSocketMessageType.ContentChanged:\n          this.manageContentChangedMessage(websocketMessage)\n          break\n        case TRecognizerWebSocketMessageType.Exported:\n          this.manageExportMessage(websocketMessage)\n          break\n        case TRecognizerWebSocketMessageType.GestureDetected:\n          this.manageGestureDetected(websocketMessage)\n          break\n        case TRecognizerWebSocketMessageType.ContextlessGesture:\n          this.manageContextlessGesture(websocketMessage)\n          break\n        case TRecognizerWebSocketMessageType.Error:\n          this.manageErrorMessage(websocketMessage)\n          break\n        case TRecognizerWebSocketMessageType.Idle:\n          this.manageWaitForIdle()\n          break\n        default:\n          this.#logger.warn(\"messageCallback\", `Message type unknow: \"${ websocketMessage }\".`)\n          break\n      }\n    }\n    catch {\n      this.event.emitError(new Error(message.data))\n    }\n  }\n\n  async newSession(config: PartialDeep<TRecognizerWebSocketConfiguration>): Promise<void>\n  {\n    await this.close(1000, \"new-session\")\n    this.configuration = mergeDeep({}, this.configuration, config)\n    this.sessionId = undefined\n    this.currentPartId = undefined\n    await this.init()\n  }\n\n  async init(): Promise<void>\n  {\n    this.event.emitStartInitialization()\n    if (this.currentErrorCode === \"restore.session.not.found\") {\n      this.currentErrorCode = undefined\n      this.sessionId = undefined\n      this.currentPartId = undefined\n    }\n    this.initialized = new DeferredPromise<void>()\n    if (!this.configuration.server.version) {\n      this.configuration.server.version = (await getApiInfos(this.configuration)).version\n    }\n    this.socket = new WebSocket(this.url)\n    this.clearSocketListener()\n    this.socket.addEventListener(\"open\", this.openCallback.bind(this))\n    this.socket.addEventListener(\"close\", this.closeCallback.bind(this))\n    this.socket.addEventListener(\"message\", this.messageCallback.bind(this))\n    await this.initialized.promise\n    if (this.configuration.server.websocket.pingEnabled) {\n      this.pingCount = 0\n      this.initPing()\n    }\n    this.event.emitEndtInitialization()\n  }\n\n  async send(message: TRecognizerWebSocketMessage): Promise<void>\n  {\n    if (!this.socket) {\n      return Promise.reject(new Error(\"Recognizer must be initilized\"))\n    }\n\n    switch (this.socket.readyState) {\n      case this.socket.CONNECTING:\n      case this.socket.OPEN:\n        await this.initialized.promise\n        this.#send(message)\n        return Promise.resolve()\n      case this.socket.CLOSING:\n      case this.socket.CLOSED:\n        if (this.configuration.server.websocket.autoReconnect) {\n          this.reconnectionCount++\n          if (this.configuration.server.websocket.maxRetryCount > this.reconnectionCount) {\n            await this.init()\n            await this.waitForIdle()\n            return this.#send(message)\n          }\n          else {\n            return Promise.reject(new Error(\"Unable to send message. The maximum number of connection attempts has been reached.\"))\n          }\n        }\n        else {\n          return Promise.reject(new Error(\"Unable to send message. Connection closed and automatic reconnection disabled\"))\n        }\n        break\n    }\n  }\n\n  protected buildAddStrokesMessage(strokes: IIStroke[], processGestures = true): TRecognizerWebSocketMessage\n  {\n    return {\n      type: \"addStrokes\",\n      processGestures,\n      strokes: strokes.map(s => s.formatToSend())\n    }\n  }\n  async addStrokes(strokes: IIStroke[], processGestures = true): Promise<TRecognizerWebSocketMessageGesture | undefined>\n  {\n    this.addStrokeDeferred = new DeferredPromise<TRecognizerWebSocketMessageGesture | undefined>()\n    if (strokes.length === 0) {\n      this.addStrokeDeferred.resolve(undefined)\n      return this.addStrokeDeferred?.promise\n    }\n    await this.send(this.buildAddStrokesMessage(strokes, processGestures))\n    return this.addStrokeDeferred?.promise\n  }\n\n  protected buildReplaceStrokesMessage(oldStrokeIds: string[], newStrokes: IIStroke[]): TRecognizerWebSocketMessage\n  {\n    return {\n      type: \"replaceStrokes\",\n      oldStrokeIds,\n      newStrokes: newStrokes.map(s => s.formatToSend())\n    }\n  }\n  async replaceStrokes(oldStrokeIds: string[], newStrokes: IIStroke[]): Promise<void>\n  {\n    this.replaceStrokeDeferred = new DeferredPromise<void>()\n    if (oldStrokeIds.length === 0) {\n      this.replaceStrokeDeferred.resolve()\n      return this.replaceStrokeDeferred?.promise\n    }\n    await this.send(this.buildReplaceStrokesMessage(oldStrokeIds, newStrokes))\n    return this.replaceStrokeDeferred?.promise\n  }\n\n  protected buildTransformTranslateMessage(strokeIds: string[], tx: number, ty: number): TRecognizerWebSocketMessage\n  {\n    return {\n      type: \"transform\",\n      transformationType: \"TRANSLATE\",\n      strokeIds,\n      tx,\n      ty\n    }\n  }\n  async transformTranslate(strokeIds: string[], tx: number, ty: number): Promise<void>\n  {\n    this.transformStrokeDeferred = new DeferredPromise<void>()\n    if (strokeIds.length === 0) {\n      this.transformStrokeDeferred.resolve()\n      return this.transformStrokeDeferred?.promise\n    }\n    await this.send(this.buildTransformTranslateMessage(strokeIds, tx, ty))\n    return this.transformStrokeDeferred?.promise\n  }\n\n  protected buildTransformRotateMessage(strokeIds: string[], angle: number, x0: number = 0, y0: number = 0): TRecognizerWebSocketMessage\n  {\n    return {\n      type: \"transform\",\n      transformationType: \"ROTATE\",\n      strokeIds,\n      angle,\n      x0,\n      y0\n    }\n  }\n  async transformRotate(strokeIds: string[], angle: number, x0: number = 0, y0: number = 0): Promise<void>\n  {\n    this.transformStrokeDeferred = new DeferredPromise<void>()\n    if (strokeIds.length === 0) {\n      this.transformStrokeDeferred.resolve()\n      return this.transformStrokeDeferred?.promise\n    }\n    await this.send(this.buildTransformRotateMessage(strokeIds, angle, x0, y0))\n    return this.transformStrokeDeferred?.promise\n  }\n\n  protected buildTransformScaleMessage(strokeIds: string[], scaleX: number, scaleY: number, x0: number = 0, y0: number = 0): TRecognizerWebSocketMessage\n  {\n    return {\n      type: \"transform\",\n      transformationType: \"SCALE\",\n      strokeIds,\n      scaleX,\n      scaleY,\n      x0,\n      y0\n    }\n  }\n  async transformScale(strokeIds: string[], scaleX: number, scaleY: number, x0: number = 0, y0: number = 0): Promise<void>\n  {\n    this.transformStrokeDeferred = new DeferredPromise<void>()\n    if (strokeIds.length === 0) {\n      this.transformStrokeDeferred.resolve()\n      return this.transformStrokeDeferred?.promise\n    }\n    await this.send(this.buildTransformScaleMessage(strokeIds, scaleX, scaleY, x0, y0))\n    return this.transformStrokeDeferred?.promise\n  }\n\n  protected buildTransformMatrixMessage(strokeIds: string[], matrix: TMatrixTransform): TRecognizerWebSocketMessage\n  {\n    return {\n      type: \"transform\",\n      transformationType: \"MATRIX\",\n      strokeIds,\n      ...matrix\n    }\n  }\n  async transformMatrix(strokeIds: string[], matrix: TMatrixTransform): Promise<void>\n  {\n    this.transformStrokeDeferred = new DeferredPromise<void>()\n    if (strokeIds.length === 0) {\n      this.transformStrokeDeferred.resolve()\n      return this.transformStrokeDeferred?.promise\n    }\n    await this.send(this.buildTransformMatrixMessage(strokeIds, matrix))\n    return this.transformStrokeDeferred?.promise\n  }\n\n  protected buildEraseStrokesMessage(strokeIds: string[]): TRecognizerWebSocketMessage\n  {\n    return {\n      type: \"eraseStrokes\",\n      strokeIds\n    }\n  }\n  async eraseStrokes(strokeIds: string[]): Promise<void>\n  {\n    this.eraseStrokeDeferred = new DeferredPromise<void>()\n    if (strokeIds.length === 0) {\n      this.eraseStrokeDeferred.resolve()\n      return this.eraseStrokeDeferred?.promise\n    }\n    await this.send(this.buildEraseStrokesMessage(strokeIds))\n    return this.eraseStrokeDeferred?.promise\n  }\n\n  async recognizeGesture(stroke: IIStroke): Promise<TRecognizerWebSocketMessageContextlessGesture | undefined>\n  {\n    if (!stroke) {\n      return\n    }\n    this.contextlessGestureDeferred.set(stroke.id, new DeferredPromise<TRecognizerWebSocketMessageContextlessGesture>())\n    const pixelTomm = 25.4 / 96\n    await this.send({\n      type: \"contextlessGesture\",\n      scaleX: pixelTomm,\n      scaleY: pixelTomm,\n      stroke: stroke.formatToSend()\n    })\n    return this.contextlessGestureDeferred.get(stroke.id)!.promise\n  }\n\n  async waitForIdle(): Promise<void>\n  {\n    if (!this.waitForIdleDeferred || this.waitForIdleDeferred.isFullFilled) {\n      this.waitForIdleDeferred = new DeferredPromise<void>()\n    }\n    const message: TRecognizerWebSocketMessage = {\n      type: \"waitForIdle\",\n    }\n    await this.send(message)\n    return this.waitForIdleDeferred?.promise\n  }\n\n  protected buildUndoRedoChanges(changes: TIIHistoryBackendChanges): TRecognizerWebSocketMessage[]\n  {\n    const changesMessages: TRecognizerWebSocketMessage[] = []\n    if (changes.added?.length) {\n      changesMessages.push(this.buildAddStrokesMessage(changes.added, false))\n    }\n    if (changes.erased?.length) {\n      changesMessages.push(this.buildEraseStrokesMessage(changes.erased.map(s => s.id)))\n    }\n    if (changes.replaced?.newStrokes.length) {\n      changesMessages.push(this.buildReplaceStrokesMessage(changes.replaced.oldStrokes.map(s => s.id), changes.replaced.newStrokes))\n    }\n    if (changes.matrix?.strokes.length) {\n      changesMessages.push(this.buildTransformMatrixMessage(changes.matrix.strokes.map(s => s.id), changes.matrix.matrix))\n    }\n    if (changes.translate?.length) {\n      changes.translate.forEach(tr =>\n      {\n        changesMessages.push(this.buildTransformTranslateMessage(tr.strokes.map(s => s.id), tr.tx, tr.ty))\n      })\n    }\n    if (changes.rotate?.length) {\n      changes.rotate.forEach(tr =>\n      {\n        changesMessages.push(this.buildTransformRotateMessage(tr.strokes.map(s => s.id), tr.angle, tr.center.x, tr.center.y))\n      })\n    }\n    if (changes.scale?.length) {\n      changes.scale.forEach(tr =>\n      {\n        changesMessages.push(this.buildTransformScaleMessage(tr.strokes.map(s => s.id), tr.scaleX, tr.scaleY, tr.origin.x, tr.origin.y))\n      })\n    }\n    return changesMessages\n  }\n\n  async undo(actions: TIIHistoryBackendChanges): Promise<void>\n  {\n    const changes = this.buildUndoRedoChanges(actions)\n    if (changes.length === 0) {\n      return\n    }\n    this.undoDeferred = new DeferredPromise<void>()\n    const message: TRecognizerWebSocketMessage = {\n      type: \"undo\",\n      changes\n    }\n    await this.send(message)\n    return this.undoDeferred?.promise\n  }\n\n  async redo(actions: TIIHistoryBackendChanges): Promise<void>\n  {\n    const changes = this.buildUndoRedoChanges(actions)\n    if (changes.length === 0) {\n      return\n    }\n    this.redoDeferred = new DeferredPromise<void>()\n\n    const message: TRecognizerWebSocketMessage = {\n      type: \"redo\",\n      changes\n    }\n    await this.send(message)\n    return this.redoDeferred?.promise\n  }\n\n  async export(requestedMimeTypes?: string[]): Promise<TExport>\n  {\n    const mimeTypes: string[] = requestedMimeTypes || this.mimeTypes.slice()\n    await Promise.all(mimeTypes.map(mt => this.exportDeferredMap.get(mt)?.promise))\n    mimeTypes.forEach(mt =>\n    {\n      this.exportDeferredMap.set(mt, new DeferredPromise<TExport>())\n    })\n\n    const message: TRecognizerWebSocketMessage = {\n      type: \"export\",\n      partId: this.currentPartId,\n      mimeTypes\n    }\n    await this.send(message)\n    const exports = await Promise.all(mimeTypes.map(mt => this.exportDeferredMap.get(mt)!.promise))\n    return Object.assign({}, ...exports)\n  }\n\n  async clear(): Promise<void>\n  {\n    this.clearDeferred = new DeferredPromise<void>()\n    await this.send({\n      type: \"clear\"\n    })\n    return this.clearDeferred?.promise\n  }\n\n  async close(code: number, reason: string): Promise<void>\n  {\n    this.resetAllDeferred()\n    this.closeDeferred = new DeferredPromise<void>()\n    if (this.socket.readyState === this.socket.OPEN || this.socket.readyState === this.socket.CONNECTING) {\n      this.socket.close(code, reason)\n    }\n    else {\n      this.closeDeferred.resolve()\n    }\n    await this.closeDeferred.promise\n  }\n\n  async destroy(): Promise<void>\n  {\n    if (this.socket) {\n      await this.close(1000, \"Recognizer destroyed\")\n    }\n  }\n}\n", "import { isVersionSuperiorOrEqual, mergeDeep, PartialDeep } from \"../utils\"\nimport {\n  DefaultExportConfiguration,\n  DefaultMathConfiguration,\n  DefaultRecognitionRendererConfiguration,\n  DefaultTextConfiguration,\n  TConvertionConfiguration,\n  TExportConfiguration,\n  TMathConfiguration,\n  TRecognitionRendererConfiguration,\n  TTextConfiguration\n} from \"./recognition\"\nimport { TRecognitionType } from \"./RecognitionConfiguration\"\nimport { DefaultServerWebsocketConfiguration, TServerWebsocketConfiguration } from \"./ServerConfiguration\"\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerWebSocketSSRRecognitionConfiguration = {\n  type: Omit<TRecognitionType, \"DIAGRAM\" | \"Raw Content\">\n  lang: string\n  math: TMathConfiguration\n  text: TTextConfiguration\n  renderer: TRecognitionRendererConfiguration\n  export: TExportConfiguration\n  convert?: TConvertionConfiguration\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultRecognizerWebSocketSSRRecognitionConfiguration: TRecognizerWebSocketSSRRecognitionConfiguration = {\n  export: DefaultExportConfiguration,\n  math: DefaultMathConfiguration,\n  renderer: DefaultRecognitionRendererConfiguration,\n  text: DefaultTextConfiguration,\n  type: \"TEXT\",\n  lang: \"en_US\",\n}\n\n/**\n * @group Recognizer\n */\nexport type TRecognizerWebSocketSSRConfiguration = {\n  server: TServerWebsocketConfiguration\n  recognition: TRecognizerWebSocketSSRRecognitionConfiguration\n}\n\n/**\n * @group Recognizer\n * @source\n */\nexport const DefaultRecognizerWebSocketSSRConfiguration: TRecognizerWebSocketSSRConfiguration =\n{\n  server: DefaultServerWebsocketConfiguration,\n  recognition: DefaultRecognizerWebSocketSSRRecognitionConfiguration\n}\n\n/**\n * @group Recognizer\n */\nexport class RecognizerWebSocketSSRConfiguration implements TRecognizerWebSocketSSRConfiguration\n{\n  recognition: TRecognizerWebSocketSSRRecognitionConfiguration\n  server: TServerWebsocketConfiguration\n\n  constructor(configuration?: PartialDeep<TRecognizerWebSocketSSRConfiguration>) {\n    this.server = mergeDeep({}, DefaultRecognizerWebSocketSSRConfiguration.server, configuration?.server)\n    this.recognition = mergeDeep({}, DefaultRecognizerWebSocketSSRConfiguration.recognition, configuration?.recognition)\n\n    if (configuration?.recognition?.text?.mimeTypes) {\n      this.recognition.text.mimeTypes = configuration.recognition.text.mimeTypes as (\"text/plain\" | \"application/vnd.myscript.jiix\")[]\n    }\n    this.recognition.text.mimeTypes = [...new Set(this.recognition.text.mimeTypes)]\n\n    if (configuration?.recognition?.math?.mimeTypes) {\n      this.recognition.math.mimeTypes = configuration.recognition.math.mimeTypes as (\"application/vnd.myscript.jiix\" | \"application/x-latex\" | \"application/mathml+xml\")[]\n    }\n    this.recognition.math.mimeTypes = [...new Set(this.recognition.math.mimeTypes)]\n\n    if (this.server.version) {\n      if (!isVersionSuperiorOrEqual(this.server.version, \"2.3.0\")) {\n        delete this.recognition.convert\n      }\n      if (!isVersionSuperiorOrEqual(this.server.version, \"3.2.0\")) {\n        delete this.recognition.export.jiix.text.lines\n      }\n    }\n  }\n}\n", "import { LoggerCategory, LoggerManager } from \"../logger\"\nimport { Model, TExport, TJIIXExport } from \"../model\"\nimport { Stroke } from \"../symbol\"\nimport { StyleHelper, TPenStyle, TTheme } from \"../style\"\nimport { THistoryContext } from \"../history\"\nimport { DeferredPromise, PartialDeep, computeHmac, getApiInfos, isVersionSuperiorOrEqual } from \"../utils\"\nimport\n{\n  TRecognizerWebSocketSSRMessage,\n  TRecognizerWebSocketSSRMessageContentChange,\n  TRecognizerWebSocketSSRMessageError,\n  TRecognizerWebSocketSSRMessageExport,\n  TRecognizerWebSocketSSRMessageHMACChallenge,\n  TRecognizerWebSocketSSRMessagePartChange,\n  TRecognizerWebSocketSSRMessageSVGPatch\n} from \"./RecognizerWebSocketSSRMessage\"\nimport { RecognizerError } from \"./RecognizerError\"\nimport { RecognizerEvent } from \"./RecognizerEvent\"\nimport { TRecognizerWebSocketSSRConfiguration, RecognizerWebSocketSSRConfiguration } from \"./RecognizerWebSocketSSRConfiguration\"\nimport { TConverstionState } from \"./RecognitionConfiguration\"\n\n/**\n * A websocket dialog have this sequence :\n * --------------------------- Client --------------------------------------------------- Server ----------------------------------\n * init: send newContentPackage or restoreIInkSession           ==================>\n *                                                              <==================       ack\n * answer ack:\n *  send the hmac (if enable)                                   ==================>\n *  send the configuration                                      ==================>\n *                                                              <==================       contentPackageDescription\n * answer contentPackageDescription:\n *  send newContentPart or openContentPart                      ==================>\n *                                                              <==================        partChanged\n *                                                              <==================        contentChanged\n *                                                              <==================        newPart\n *                                                              <==================        svgPatch\n *\n * setPenStyle (send the parameters)                            ==================>\n * setTheme (send the parameters)                               ==================>\n * setPenStyleClasses (send the parameters)                     ==================>\n *                                                              <==================        svgPatch\n * addStrokes (send the strokes ) ============>\n *                                                              <==================        update\n */\n\n/**\n * @group Recognizer\n */\nexport class RecognizerWebSocketSSR\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.RECOGNIZER)\n\n  protected socket!: WebSocket\n  protected pingCount = 0\n  protected reconnectionCount = 0\n  protected viewSizeHeight!: number\n  protected viewSizeWidth!: number\n  protected sessionId?: string\n  // contentPartCount = 0\n  currentPartId?: string\n  protected currentErrorCode?: string | number\n\n  protected penStyle?: TPenStyle\n  protected penStyleClasses?: string\n  protected theme?: TTheme\n\n  protected connected?: DeferredPromise<void>\n  protected ackDeferred?: DeferredPromise<void>\n  protected addStrokeDeferred?: DeferredPromise<TExport>\n  protected exportDeferred?: DeferredPromise<TExport>\n  protected convertDeferred?: DeferredPromise<TExport>\n  protected importDeferred?: DeferredPromise<TExport>\n  protected resizeDeferred?: DeferredPromise<void>\n  protected undoDeferred?: DeferredPromise<TExport>\n  protected redoDeferred?: DeferredPromise<TExport>\n  protected clearDeferred?: DeferredPromise<TExport>\n  protected importPointEventsDeferred?: DeferredPromise<TExport>\n  protected waitForIdleDeferred?: DeferredPromise<void>\n\n  configuration: TRecognizerWebSocketSSRConfiguration\n  initialized: DeferredPromise<void>\n  url: string\n  event: RecognizerEvent\n\n  constructor(config?: PartialDeep<TRecognizerWebSocketSSRConfiguration>)\n  {\n    this.#logger.info(\"constructor\", { config })\n    this.configuration = new RecognizerWebSocketSSRConfiguration(config)\n    const scheme = (this.configuration.server.scheme === \"https\") ? \"wss\" : \"ws\"\n    this.url = `${ scheme }://${ this.configuration.server.host }/api/v4.0/iink/document?applicationKey=${ this.configuration.server.applicationKey }`\n    this.event = new RecognizerEvent()\n    this.initialized = new DeferredPromise<void>()\n  }\n\n  get mimeTypes(): string[]\n  {\n    switch (this.configuration.recognition.type.toLocaleLowerCase()) {\n      case \"text\":\n        return this.configuration.recognition.text.mimeTypes\n      case \"math\":\n        return this.configuration.recognition.math.mimeTypes\n      default:\n        throw new Error(`Unauthorized recognition type: \"${ this.configuration.recognition.type }\"`)\n    }\n  }\n\n  protected infinitePing(): void\n  {\n    this.pingCount++\n    if (this.configuration.server.websocket.maxPingLostCount < this.pingCount) {\n      this.socket.close(1000, \"MAXIMUM_PING_REACHED\")\n    } else if (this.socket.readyState <= 1) {\n      setTimeout(() =>\n      {\n        if (this.socket.readyState <= 1) {\n          this.socket.send(JSON.stringify({ type: \"ping\" }))\n          this.infinitePing()\n        }\n      }, this.configuration.server.websocket.pingDelay)\n    }\n  }\n\n  protected openCallback(): void\n  {\n    this.connected?.resolve()\n    const params: TRecognizerWebSocketSSRMessage = {\n      type: this.sessionId ? \"restoreIInkSession\" : \"newContentPackage\",\n      iinkSessionId: this.sessionId,\n      applicationKey: this.configuration.server.applicationKey,\n      xDpi: 96,\n      yDpi: 96,\n      viewSizeHeight: this.viewSizeHeight,\n      viewSizeWidth: this.viewSizeWidth\n    }\n    if (isVersionSuperiorOrEqual(this.configuration.server.version!, \"2.0.4\")) {\n      params[\"myscript-client-name\"] = \"iink-ts\"\n      params[\"myscript-client-version\"] = \"3.0.1\"\n    }\n    this.send(params)\n  }\n\n  protected rejectDeferredPending(error: Error): void\n  {\n    if (this.connected?.isPending) {\n      this.connected?.reject(error)\n    }\n    if (this.initialized.isPending) {\n      this.initialized.reject(error)\n    }\n    if (this.addStrokeDeferred?.isPending) {\n      this.addStrokeDeferred?.reject(error)\n    }\n    if (this.exportDeferred?.isPending) {\n      this.exportDeferred?.reject(error)\n    }\n    if (this.importPointEventsDeferred?.isPending) {\n      this.importPointEventsDeferred?.reject(error)\n    }\n    if (this.convertDeferred?.isPending) {\n      this.convertDeferred?.reject(error)\n    }\n    if (this.importDeferred?.isPending) {\n      this.importDeferred?.reject(error)\n    }\n    if (this.resizeDeferred?.isPending) {\n      this.resizeDeferred?.reject(error)\n    }\n    if (this.waitForIdleDeferred?.isPending) {\n      this.waitForIdleDeferred?.reject(error)\n    }\n    if (this.undoDeferred?.isPending) {\n      this.undoDeferred?.reject(error)\n    }\n    if (this.redoDeferred?.isPending) {\n      this.redoDeferred?.reject(error)\n    }\n    if (this.clearDeferred?.isPending) {\n      this.clearDeferred.reject(error)\n    }\n    if (this.waitForIdleDeferred?.isPending) {\n      this.waitForIdleDeferred.reject(error)\n    }\n  }\n\n  protected closeCallback(evt: CloseEvent): void\n  {\n    let message = \"\"\n    if (!this.currentErrorCode) {\n      switch (evt.code) {\n        case 1000:\n          // Normal Closure\n          break\n        case 1001:\n          message = RecognizerError.GOING_AWAY\n          break\n        case 1002:\n          message = RecognizerError.PROTOCOL_ERROR\n          break\n        case 1003:\n          message = RecognizerError.UNSUPPORTED_DATA\n          break\n        case 1006:\n          message = RecognizerError.ABNORMAL_CLOSURE\n          break\n        case 1007:\n          message = RecognizerError.INVALID_FRAME_PAYLOAD\n          break\n        case 1008:\n          message = RecognizerError.POLICY_VIOLATION\n          break\n        case 1009:\n          message = RecognizerError.MESSAGE_TOO_BIG\n          break\n        case 1011:\n          message = RecognizerError.INTERNAL_ERROR\n          break\n        case 1012:\n          message = RecognizerError.SERVICE_RESTART\n          break\n        case 1013:\n          message = RecognizerError.TRY_AGAIN\n          break\n        case 1014:\n          message = RecognizerError.BAD_GATEWAY\n          break\n        case 1015:\n          message = RecognizerError.TLS_HANDSHAKE\n          break\n        default:\n          this.#logger.warn(\"closeCallback\", \"unknow CloseEvent.code\", { evt })\n          message = RecognizerError.CANT_ESTABLISH\n          break\n      }\n    }\n\n    if (!this.currentErrorCode && evt.code !== 1000) {\n      const error = new Error(message || evt.reason)\n      this.rejectDeferredPending(error)\n      this.event.emitError(error)\n    }\n  }\n\n  protected async manageAckMessage(websocketMessage: TRecognizerWebSocketSSRMessage): Promise<void>\n  {\n    this.#logger.info(\"manageAckMessage\", { websocketMessage })\n    const hmacChallengeMessage = websocketMessage as TRecognizerWebSocketSSRMessageHMACChallenge\n    if (hmacChallengeMessage.hmacChallenge) {\n      this.send({\n        type: \"hmac\",\n        hmac: await computeHmac(hmacChallengeMessage.hmacChallenge, this.configuration.server.applicationKey, this.configuration.server.hmacKey)\n      })\n    }\n    if (hmacChallengeMessage.iinkSessionId) {\n      this.sessionId = hmacChallengeMessage.iinkSessionId\n    }\n    if (!isVersionSuperiorOrEqual(this.configuration.server.version!, \"2.3.0\")) {\n      delete this.configuration.recognition.convert\n    }\n    if (!isVersionSuperiorOrEqual(this.configuration.server.version!, \"3.2.0\")) {\n      delete this.configuration.recognition.export.jiix.text.lines\n    }\n    this.send({ ...this.configuration.recognition, type: \"configuration\" })\n    this.ackDeferred?.resolve()\n  }\n\n  protected async manageContentPackageDescriptionMessage(): Promise<void>\n  {\n    this.reconnectionCount = 0\n    await this.ackDeferred?.promise\n    this.#logger.info(\"manageContentPackageDescriptionMessage\")\n    if (this.currentPartId) {\n      this.send({ type: \"openContentPart\", id: this.currentPartId, mimeTypes: this.mimeTypes })\n    }\n    else {\n      this.send({ type: \"newContentPart\", contentType: this.configuration.recognition.type, mimeTypes: this.mimeTypes })\n    }\n  }\n\n  protected managePartChangeMessage(websocketMessage: TRecognizerWebSocketSSRMessage): void\n  {\n    this.#logger.info(\"managePartChangeMessage\", { websocketMessage })\n    const partChangeMessage = websocketMessage as TRecognizerWebSocketSSRMessagePartChange\n    this.currentPartId = partChangeMessage.partId\n    this.initialized.resolve()\n  }\n\n  protected manageExportMessage(websocketMessage: TRecognizerWebSocketSSRMessage): void\n  {\n    this.#logger.info(\"manageExportMessage\", { websocketMessage })\n    const exportMessage = websocketMessage as TRecognizerWebSocketSSRMessageExport\n    if (exportMessage.exports[\"application/vnd.myscript.jiix\"]) {\n      exportMessage.exports[\"application/vnd.myscript.jiix\"] = JSON.parse(exportMessage.exports[\"application/vnd.myscript.jiix\"].toString()) as TJIIXExport\n    }\n    this.initialized.resolve()\n    this.addStrokeDeferred?.resolve(exportMessage.exports)\n    this.exportDeferred?.resolve(exportMessage.exports)\n    this.convertDeferred?.resolve(exportMessage.exports)\n    this.importDeferred?.resolve(exportMessage.exports)\n    this.undoDeferred?.resolve(exportMessage.exports)\n    this.redoDeferred?.resolve(exportMessage.exports)\n    this.clearDeferred?.resolve(exportMessage.exports)\n    this.importPointEventsDeferred?.resolve(exportMessage.exports)\n    this.event.emitExported(exportMessage.exports)\n  }\n\n  protected async manageWaitForIdle(): Promise<void>\n  {\n    this.event.emitIdle(true)\n    this.waitForIdleDeferred?.resolve()\n  }\n\n  protected manageErrorMessage(websocketMessage: TRecognizerWebSocketSSRMessage): void\n  {\n    const err = websocketMessage as TRecognizerWebSocketSSRMessageError\n    this.currentErrorCode = err.data?.code || err.code\n    let message = err.data?.message || err.message || RecognizerError.UNKNOW\n\n    switch (this.currentErrorCode) {\n      case \"no.activity\":\n        message = RecognizerError.NO_ACTIVITY\n        break\n      case \"access.not.granted\":\n        message = RecognizerError.WRONG_CREDENTIALS\n        break\n      case \"session.too.old\":\n        message = RecognizerError.TOO_OLD\n        break\n    }\n    const error = new Error(message)\n    this.rejectDeferredPending(error)\n    this.event.emitError(error)\n  }\n\n  protected manageContentChangeMessage(websocketMessage: TRecognizerWebSocketSSRMessage): void\n  {\n    this.#logger.info(\"manageContentChangeMessage\", { websocketMessage })\n    const contentChangeMessage = websocketMessage as TRecognizerWebSocketSSRMessageContentChange\n    const context: THistoryContext = {\n      canRedo: contentChangeMessage.canRedo,\n      canUndo: contentChangeMessage.canUndo,\n      empty: contentChangeMessage.empty,\n      stackIndex: contentChangeMessage.undoStackIndex,\n      possibleUndoCount: contentChangeMessage.possibleUndoCount,\n    }\n    this.event.emitContentChanged(context)\n  }\n\n  protected manageSVGPatchMessage(websocketMessage: TRecognizerWebSocketSSRMessage): void\n  {\n    this.#logger.info(\"manageSVGPatchMessage\", { websocketMessage })\n    this.resizeDeferred?.resolve()\n    const svgPatchMessage = websocketMessage as TRecognizerWebSocketSSRMessageSVGPatch\n    this.event.emitSVGPatch(svgPatchMessage)\n  }\n\n  protected messageCallback(message: MessageEvent<string>): void\n  {\n    this.#logger.debug(\"messageCallback\", { message })\n    this.currentErrorCode = undefined\n    const websocketMessage: TRecognizerWebSocketSSRMessage = JSON.parse(message.data)\n    if (websocketMessage.type !== \"pong\") {\n      this.pingCount = 0\n      switch (websocketMessage.type) {\n        case \"ack\":\n          this.manageAckMessage(websocketMessage)\n          break\n        case \"contentPackageDescription\":\n          this.manageContentPackageDescriptionMessage()\n          break\n        case \"partChanged\":\n          this.managePartChangeMessage(websocketMessage)\n          break\n        case \"newPart\":\n          this.initialized.resolve()\n          break\n        case \"contentChanged\":\n          this.manageContentChangeMessage(websocketMessage)\n          break\n        case \"exported\":\n          this.manageExportMessage(websocketMessage)\n          break\n        case \"svgPatch\":\n          this.manageSVGPatchMessage(websocketMessage)\n          break\n        case \"error\":\n          this.manageErrorMessage(websocketMessage)\n          break\n        case \"idle\":\n          this.manageWaitForIdle()\n          break\n        default:\n          this.#logger.warn(\"messageCallback\", `Message type unknow: \"${ websocketMessage.type }\".`)\n      }\n    }\n  }\n\n  async init(height: number, width: number): Promise<void>\n  {\n    try {\n      this.event.emitStartInitialization()\n      this.#logger.info(\"init\", { height, width })\n      this.destroy()\n\n      if (!this.configuration.server.version) {\n        this.configuration.server.version = (await getApiInfos(this.configuration)).version\n      }\n      this.connected = new DeferredPromise<void>()\n      this.initialized = new DeferredPromise<void>()\n      this.ackDeferred = new DeferredPromise<void>()\n      this.viewSizeHeight = height\n      this.viewSizeWidth = width\n      this.pingCount = 0\n      this.socket = new WebSocket(this.url)\n\n      if (this.configuration.server.websocket.pingEnabled) {\n        this.infinitePing()\n      }\n\n      this.socket.addEventListener(\"open\", this.openCallback.bind(this))\n      this.socket.addEventListener(\"close\", this.closeCallback.bind(this))\n      this.socket.addEventListener(\"message\", this.messageCallback.bind(this))\n      this.event.emitEndtInitialization()\n      await this.connected.promise\n      await this.initialized.promise\n    } catch (err: unknown) {\n      this.rejectDeferredPending(err as Error)\n      return this.initialized.promise\n    }\n  }\n\n  async send(message: TRecognizerWebSocketSSRMessage): Promise<void>\n  {\n    if (!this.socket) {\n      return Promise.reject(new Error(\"Recognizer must be initilized\"))\n    }\n    await this.connected?.promise\n    if (this.socket.readyState === this.socket.OPEN) {\n      this.#logger.debug(\"send\", { message })\n      this.socket.send(JSON.stringify(message))\n      return Promise.resolve()\n    } else {\n      if (this.socket.readyState != this.socket.CONNECTING && this.configuration.server.websocket.autoReconnect) {\n        this.reconnectionCount++\n        if (this.configuration.server.websocket.maxRetryCount >= this.reconnectionCount) {\n          this.#logger.debug(\"send\", `try to reconnect number: ${ this.reconnectionCount }.`)\n          await this.init(this.viewSizeHeight, this.viewSizeWidth)\n          await this.setPenStyle(this.penStyle as TPenStyle)\n          await this.setPenStyleClasses(this.penStyleClasses as string)\n          await this.setTheme(this.theme as TTheme)\n          return this.send(message)\n        }\n        else {\n          return Promise.reject(new Error(\"Unable to send message. The maximum number of connection attempts has been reached.\"))\n        }\n      }\n    }\n  }\n\n  async addStrokes(strokes: Stroke[]): Promise<TExport>\n  {\n    this.#logger.info(\"addStrokes\", { strokes })\n    await this.initialized.promise\n    this.addStrokeDeferred = new DeferredPromise<TExport>()\n    if (strokes.length === 0) {\n      this.addStrokeDeferred.resolve({} as TExport)\n    }\n    else {\n      await this.send({\n        type: \"addStrokes\",\n        strokes: strokes.map(s => s.formatToSend())\n      })\n    }\n    return this.addStrokeDeferred?.promise\n  }\n\n  async setPenStyle(penStyle: TPenStyle): Promise<void>\n  {\n    this.#logger.info(\"setPenStyle\", { penStyle })\n    await this.initialized.promise\n    this.penStyle = penStyle\n    const message: TRecognizerWebSocketSSRMessage = {\n      type: \"setPenStyle\",\n      style: StyleHelper.penStyleToCSS(penStyle)\n    }\n    return this.send(message)\n  }\n\n  async setPenStyleClasses(penStyleClasses: string): Promise<void>\n  {\n    await this.initialized.promise\n    this.penStyleClasses = penStyleClasses\n    this.#logger.info(\"setPenStyleClasses\", { penStyleClasses })\n    const message: TRecognizerWebSocketSSRMessage = {\n      type: \"setPenStyleClasses\",\n      styleClasses: penStyleClasses\n    }\n    return this.send(message)\n  }\n\n  async setTheme(theme: TTheme): Promise<void>\n  {\n    this.#logger.info(\"setTheme\", { theme })\n    await this.initialized.promise\n    this.theme = theme\n    const message: TRecognizerWebSocketSSRMessage = {\n      type: \"setTheme\",\n      theme: StyleHelper.themeToCSS(theme)\n    }\n    return this.send(message)\n  }\n\n  async export(model: Model, requestedMimeTypes?: string[]): Promise<Model>\n  {\n    this.#logger.info(\"export\", { model, requestedMimeTypes })\n    await this.initialized.promise\n    this.exportDeferred = new DeferredPromise<TExport>()\n    const localModel = model.clone()\n    let mimeTypes: string[] = requestedMimeTypes || []\n    if (!mimeTypes.length) {\n      switch (this.configuration.recognition.type) {\n        case \"MATH\":\n          mimeTypes = this.configuration.recognition.math.mimeTypes\n          break\n        case \"TEXT\":\n          mimeTypes = this.configuration.recognition.text.mimeTypes\n          break\n        default:\n          throw new Error(`Recognition type \"${ this.configuration.recognition.type }\" is unknown.\\n Possible types are:\\n -MATH\\n -TEXT`)\n      }\n    }\n\n    if (!mimeTypes.length) {\n      return Promise.reject(new Error(`Export failed, no mimeTypes define in recognition ${ this.configuration.recognition.type } configuration`))\n    }\n\n    const message: TRecognizerWebSocketSSRMessage = {\n      type: \"export\",\n      partId: this.currentPartId,\n      mimeTypes\n    }\n    await this.send(message)\n    const exports: TExport = await this.exportDeferred?.promise\n    localModel.updatePositionReceived()\n    localModel.mergeExport(exports)\n    this.#logger.debug(\"export\", { model: localModel })\n    return localModel\n  }\n\n  async import(model: Model, data: Blob, mimeType?: string): Promise<Model>\n  {\n    this.#logger.info(\"import\", { data, mimeType })\n    await this.initialized.promise\n    const localModel = model.clone()\n    const chunkSize = this.configuration.server.websocket.fileChunkSize\n    const importFileId = Math.random().toString(10).substring(2, 6)\n    this.importDeferred = new DeferredPromise<TExport>()\n    const readBlob = (blob: Blob): Promise<string | never> =>\n    {\n      const fileReader = new FileReader()\n      return new Promise((resolve, reject) =>\n      {\n        fileReader.onloadend = (ev) => resolve(ev.target?.result as string)\n        fileReader.onerror = () => reject()\n        fileReader.readAsText(blob)\n      })\n    }\n\n    const importFileMessage: TRecognizerWebSocketSSRMessage = {\n      type: \"importFile\",\n      importFileId,\n      mimeType\n    }\n    await this.send(importFileMessage)\n    for (let i = 0; i < data.size; i += chunkSize) {\n      const blobPart = data.slice(i, i + chunkSize, data.type)\n      const partFileString = await readBlob(blobPart)\n      const fileChuckMessage: TRecognizerWebSocketSSRMessage = {\n        type: \"fileChunk\",\n        importFileId,\n        data: partFileString,\n        lastChunk: i + chunkSize > data.size\n      }\n      await this.send(fileChuckMessage)\n    }\n    const exports = await this.importDeferred?.promise\n    this.importDeferred = undefined\n    localModel.mergeExport(exports)\n    return localModel\n  }\n\n  async resize(model: Model): Promise<Model>\n  {\n    this.#logger.info(\"resize\", { model })\n    await this.initialized.promise\n    this.resizeDeferred = new DeferredPromise<void>()\n    const localModel = model.clone()\n    this.viewSizeHeight = localModel.height\n    this.viewSizeWidth = localModel.width\n    const message: TRecognizerWebSocketSSRMessage = {\n      type: \"changeViewSize\",\n      height: this.viewSizeHeight,\n      width: this.viewSizeWidth,\n    }\n    await this.send(message)\n    await this.resizeDeferred?.promise\n    return localModel\n  }\n\n  async importPointEvents(strokes: Stroke[]): Promise<TExport>\n  {\n    this.#logger.info(\"importPointsEvents\", { strokes })\n    await this.initialized.promise\n    this.importPointEventsDeferred = new DeferredPromise<TExport>()\n    const message: TRecognizerWebSocketSSRMessage = {\n      type: \"pointerEvents\",\n      events: strokes.map(s => s.formatToSend())\n    }\n    await this.send(message)\n    return this.importPointEventsDeferred?.promise\n  }\n\n  async convert(model: Model, conversionState?: TConverstionState): Promise<Model>\n  {\n    this.#logger.info(\"convert\", { model, conversionState })\n    await this.initialized.promise\n    this.convertDeferred = new DeferredPromise<TExport>()\n    const localModel = model.clone()\n    const message: TRecognizerWebSocketSSRMessage = {\n      type: \"convert\",\n      conversionState\n    }\n    await this.send(message)\n    const myExportConverted: TExport = await this.convertDeferred?.promise\n    localModel.updatePositionReceived()\n    localModel.mergeConvert(myExportConverted)\n    this.#logger.debug(\"convert\", { model: localModel })\n    return localModel\n  }\n\n  async waitForIdle(): Promise<void>\n  {\n    await this.initialized.promise\n    this.waitForIdleDeferred = new DeferredPromise<void>()\n    const message: TRecognizerWebSocketSSRMessage = {\n      type: \"waitForIdle\",\n    }\n    await this.send(message)\n    return this.waitForIdleDeferred?.promise\n  }\n\n  async undo(model: Model): Promise<Model>\n  {\n    this.#logger.info(\"undo\", { model })\n    await this.initialized.promise\n    const localModel = model.clone()\n    this.undoDeferred = new DeferredPromise<TExport>()\n    const message: TRecognizerWebSocketSSRMessage = {\n      type: \"undo\",\n    }\n    await this.send(message)\n    const undoExports = await this.undoDeferred?.promise\n    localModel.updatePositionReceived()\n    localModel.mergeExport(undoExports)\n    this.#logger.debug(\"undo\", { model: localModel })\n    this.undoDeferred = undefined\n    return localModel\n  }\n\n  async redo(model: Model): Promise<Model>\n  {\n    this.#logger.info(\"redo\", { model })\n    await this.initialized.promise\n    const localModel = model.clone()\n    this.redoDeferred = new DeferredPromise<TExport>()\n    const message: TRecognizerWebSocketSSRMessage = {\n      type: \"redo\",\n    }\n    await this.send(message)\n    const redoExports = await this.redoDeferred?.promise\n    localModel.updatePositionReceived()\n    localModel.mergeExport(redoExports)\n    this.#logger.debug(\"redo\", { model: redoExports })\n    this.redoDeferred = undefined\n    return localModel\n  }\n\n  async clear(model: Model): Promise<Model>\n  {\n    this.#logger.info(\"clear\", { model })\n    await this.initialized.promise\n    const localModel = model.clone()\n    localModel.modificationDate = Date.now()\n    this.clearDeferred = new DeferredPromise<TExport>()\n    const message: TRecognizerWebSocketSSRMessage = {\n      type: \"clear\",\n    }\n    await this.send(message)\n    const clearExports = await this.clearDeferred?.promise\n    localModel.updatePositionReceived()\n    localModel.mergeExport(clearExports)\n    this.clearDeferred = undefined\n    this.#logger.info(\"clear\", { model: localModel })\n    return localModel\n  }\n\n  close(code: number, reason: string): void\n  {\n    if (this.socket.readyState === this.socket.OPEN || this.socket.readyState === this.socket.CONNECTING) {\n      this.#logger.info(\"close\", { code, reason })\n      this.socket.removeEventListener(\"close\", this.closeCallback)\n      this.socket.removeEventListener(\"message\", this.messageCallback)\n      this.socket.removeEventListener(\"open\", this.openCallback)\n      this.socket.close(code, reason)\n    }\n  }\n\n  destroy(): void\n  {\n    this.#logger.info(\"destroy\")\n    this.connected = undefined\n    this.ackDeferred = undefined\n    this.addStrokeDeferred = undefined\n    this.exportDeferred = undefined\n    this.convertDeferred = undefined\n    this.importDeferred = undefined\n    this.importPointEventsDeferred = undefined\n    this.waitForIdleDeferred = undefined\n    this.resizeDeferred = undefined\n    this.undoDeferred = undefined\n    this.redoDeferred = undefined\n    this.clearDeferred = undefined\n    if (this.socket) {\n      this.socket.removeEventListener(\"close\", this.closeCallback)\n      this.socket.removeEventListener(\"message\", this.messageCallback)\n      this.socket.removeEventListener(\"open\", this.openCallback)\n      this.close(1000, \"Recognizer destroyed\")\n    }\n  }\n}\n", "import { LoggerCategory, LoggerManager } from \"../../logger\"\nimport { TPoint, TCanvasShapeEllipseSymbol, TCanvasShapeLineSymbol, TCanvasShapeTableSymbol, TSymbol } from \"../../symbol\"\n\n/**\n * @group Renderer\n */\nexport class CanvasRendererShape\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.RENDERER)\n\n  symbols = {\n    table: \"table\",\n    ellipse: \"ellipse\",\n    line: \"line\"\n  }\n\n  protected phi(angle: number): number\n  {\n    let returnedAngle = ((angle + Math.PI) % (Math.PI * 2)) - Math.PI\n    if (returnedAngle < -Math.PI) {\n      returnedAngle += Math.PI * 2\n    }\n    this.#logger.debug(\"phi\", { angle, returnedAngle })\n    return returnedAngle\n  }\n\n  protected drawEllipseArc(context2D: CanvasRenderingContext2D, shapeEllipse: TCanvasShapeEllipseSymbol): TPoint[]\n  {\n    this.#logger.debug(\"drawEllipseArc\", { context2D, shapeEllipse })\n    const { centerPoint, maxRadius, minRadius, orientation, startAngle, sweepAngle } = shapeEllipse\n    const angleStep = 0.02\n    const z1 = Math.cos(orientation) * maxRadius\n    const z2 = Math.cos(orientation) * minRadius\n    const z3 = Math.sin(orientation) * maxRadius\n    const z4 = Math.sin(orientation) * minRadius\n    const n = Math.floor(Math.abs(sweepAngle) / angleStep)\n    const boundariesPoints = []\n    context2D.save()\n    try {\n      context2D.beginPath()\n      for (let i = 0; i <= n; i++) {\n        const angle = startAngle + ((i / n) * sweepAngle)\n        const alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius)\n        const cosAlpha = Math.cos(alpha)\n        const sinAlpha = Math.sin(alpha)\n        const x = (centerPoint.x + (z1 * cosAlpha)) - (z4 * sinAlpha)\n        const y = (centerPoint.y + (z2 * sinAlpha)) + (z3 * cosAlpha)\n        if (i === 0) {\n          context2D.moveTo(x, y)\n        } else {\n          context2D.lineTo(x, y)\n        }\n        if (i === 0 || i === n) {\n          boundariesPoints.push({ x, y })\n        }\n      }\n      context2D.stroke()\n    } catch(error) {\n      this.#logger.error(\"drawEllipseArc\", { error })\n    } finally {\n      context2D.restore()\n    }\n    return boundariesPoints\n  }\n\n  protected drawLine(context2D: CanvasRenderingContext2D, p1: TPoint, p2: TPoint)\n  {\n    this.#logger.debug(\"drawLine\", { context2D, p1, p2 })\n    context2D.save()\n    try {\n      context2D.beginPath()\n      context2D.moveTo(p1.x, p1.y)\n      context2D.lineTo(p2.x, p2.y)\n      context2D.stroke()\n    } catch(error) {\n      this.#logger.error(\"drawLine\", { error })\n    } finally {\n      context2D.restore()\n    }\n  }\n\n  protected drawArrowHead(context2D: CanvasRenderingContext2D, headPoint: TPoint, angle: number, length: number)\n  {\n    this.#logger.debug(\"drawArrowHead\", { context2D, headPoint, angle, length })\n    const alpha = this.phi(angle + (Math.PI * (7 / 8)))\n    const beta = this.phi(angle - (Math.PI * (7 / 8)))\n    context2D.save()\n    try {\n      context2D.fillStyle = context2D.strokeStyle\n\n      context2D.moveTo(headPoint.x, headPoint.y)\n      context2D.beginPath()\n      context2D.lineTo(headPoint.x + (length * Math.cos(alpha)), headPoint.y + (length * Math.sin(alpha)))\n      context2D.lineTo(headPoint.x + (length * Math.cos(beta)), headPoint.y + (length * Math.sin(beta)))\n      context2D.lineTo(headPoint.x, headPoint.y)\n      context2D.fill()\n    } catch(error) {\n      this.#logger.error(\"drawArrowHead\", { error })\n    } finally {\n      context2D.restore()\n    }\n  }\n\n  protected drawShapeEllipse(context2D: CanvasRenderingContext2D, shapeEllipse: TCanvasShapeEllipseSymbol)\n  {\n    this.#logger.debug(\"drawShapeEllipse\", { context2D, shapeEllipse })\n    const points = this.drawEllipseArc(context2D, shapeEllipse)\n\n    if (shapeEllipse?.beginDecoration === \"ARROW_HEAD\") {\n      this.drawArrowHead(context2D, points[0], shapeEllipse.beginTangentAngle, 12.0)\n    }\n    if (shapeEllipse?.endDecoration === \"ARROW_HEAD\") {\n      this.drawArrowHead(context2D, points[1], shapeEllipse.endTangentAngle, 12.0)\n    }\n  }\n\n  protected drawShapeLine(context2D: CanvasRenderingContext2D, shapeLine: TCanvasShapeLineSymbol)\n  {\n    this.#logger.debug(\"drawShapeLine\", { context2D, shapeLine })\n    this.drawLine(context2D, shapeLine.firstPoint, shapeLine.lastPoint)\n    if (shapeLine.beginDecoration === \"ARROW_HEAD\") {\n      this.drawArrowHead(context2D, shapeLine.firstPoint, shapeLine.beginTangentAngle, 12.0)\n    }\n    if (shapeLine.endDecoration === \"ARROW_HEAD\") {\n      this.drawArrowHead(context2D, shapeLine.lastPoint, shapeLine.endTangentAngle, 12.0)\n    }\n  }\n\n  draw(context2D: CanvasRenderingContext2D, symbol: TSymbol)\n  {\n    this.#logger.info(\"draw\", { context2D, symbol })\n    context2D.save()\n    context2D.lineWidth = symbol.style.width as number\n    context2D.strokeStyle = symbol.style.color as string\n\n    switch (symbol.type) {\n      case this.symbols.table: {\n        const tableSymbols = symbol as TCanvasShapeTableSymbol\n        tableSymbols.lines.forEach(line => this.drawLine(context2D, line.p1, line.p2))\n        break\n      }\n      case this.symbols.ellipse: {\n        this.drawShapeEllipse(context2D, symbol as TCanvasShapeEllipseSymbol)\n        break\n      }\n      case this.symbols.line: {\n        this.drawShapeLine(context2D, symbol as TCanvasShapeLineSymbol)\n        break\n      }\n      default:\n        this.#logger.warn(\"draw\", `${ symbol.type } not implemented`)\n        break\n    }\n  }\n\n}\n", "import { LoggerCategory, LoggerManager } from \"../../logger\"\nimport { Stroke, TPointer } from \"../../symbol\"\nimport { computeAngleAxeRadian, computeLinksPointers, computeMiddlePointer } from \"../../utils\"\n\n/**\n * @group Renderer\n */\nexport class CanvasRendererStroke\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.RENDERER)\n\n  protected renderArc(context2d: CanvasRenderingContext2D, center: TPointer, radius: number): void\n  {\n    this.#logger.debug(\"renderArc\", { context2d, center, radius })\n    context2d.arc(center.x, center.y, radius, 0, Math.PI * 2, true)\n  }\n\n  protected renderLine(context2d: CanvasRenderingContext2D, begin: TPointer, end: TPointer, width: number): void\n  {\n    this.#logger.debug(\"renderLine\", { context2d, begin, end, width })\n    const linkPoints1 = computeLinksPointers(begin, computeAngleAxeRadian(begin, end), width)\n    const linkPoints2 = computeLinksPointers(end, computeAngleAxeRadian(begin, end), width)\n\n    context2d.moveTo(linkPoints1[0].x, linkPoints1[0].y)\n    context2d.lineTo(linkPoints2[0].x, linkPoints2[0].y)\n    context2d.lineTo(linkPoints2[1].x, linkPoints2[1].y)\n    context2d.lineTo(linkPoints1[1].x, linkPoints1[1].y)\n  }\n\n  protected renderFinal(context2d: CanvasRenderingContext2D, begin: TPointer, end: TPointer, width: number): void\n  {\n    this.#logger.debug(\"renderFinal\", { context2d, begin, end, width })\n    const ARCSPLIT = 6\n    const angle = computeAngleAxeRadian(begin, end)\n    const linkPoints = computeLinksPointers(end, angle, width)\n    context2d.moveTo(linkPoints[0].x, linkPoints[0].y)\n    for (let i = 1; i <= ARCSPLIT; i++) {\n      const newAngle = angle - ((i * Math.PI) / ARCSPLIT)\n      context2d.lineTo(end.x - ((end.p * width) * Math.sin(newAngle)), end.y + (end.p * width * Math.cos(newAngle)))\n    }\n  }\n\n  protected renderQuadratic(context2d: CanvasRenderingContext2D, begin: TPointer, end: TPointer, ctrl: TPointer, width: number): void\n  {\n    this.#logger.debug(\"renderQuadratic\", { context2d, begin, end, ctrl, width })\n    const linkPoints1 = computeLinksPointers(begin, computeAngleAxeRadian(begin, ctrl), width)\n    const linkPoints2 = computeLinksPointers(end, computeAngleAxeRadian(ctrl, end), width)\n    const linkPoints3 = computeLinksPointers(ctrl, computeAngleAxeRadian(begin, end), width)\n\n    context2d.moveTo(linkPoints1[0].x, linkPoints1[0].y)\n    context2d.quadraticCurveTo(linkPoints3[0].x, linkPoints3[0].y, linkPoints2[0].x, linkPoints2[0].y)\n    context2d.lineTo(linkPoints2[1].x, linkPoints2[1].y)\n    context2d.quadraticCurveTo(linkPoints3[1].x, linkPoints3[1].y, linkPoints1[1].x, linkPoints1[1].y)\n  }\n\n  draw(context2d: CanvasRenderingContext2D, stroke: Stroke): void\n  {\n    this.#logger.info(\"draw\", { context2d, stroke })\n    const NUMBER_POINTS = stroke.pointers.length\n    const NUMBER_QUADRATICS = NUMBER_POINTS - 2\n    const width = (stroke.style.width as number) > 0 ? (stroke.style.width as number) : context2d.lineWidth\n    const color = (stroke.style.color as string) ? (stroke.style.color as string) : context2d.strokeStyle\n    const firstPoint = stroke.pointers[0] as TPointer\n\n    context2d.save()\n    try {\n      context2d.beginPath()\n      if (NUMBER_POINTS < 3) {\n        this.renderArc(context2d, firstPoint, width * 0.6)\n      } else {\n        this.renderArc(context2d, firstPoint, width * firstPoint.p)\n        const secondPoint: TPointer = computeMiddlePointer(firstPoint, stroke.pointers[1])\n        this.renderLine(context2d, firstPoint, secondPoint, width)\n\n        // Possibility to try this (the start looks better when the ink is large)\n        // var first = computeMiddlePoint(stroke.pointers[0], stroke.pointers[1]);\n        // context2d.arc(first.x, first.y, width * first.p, 0, Math.PI * 2, true);\n\n        for (let i = 0; i < NUMBER_QUADRATICS; i++) {\n          const begin: TPointer = computeMiddlePointer(stroke.pointers[i], stroke.pointers[i + 1])\n          const end: TPointer = computeMiddlePointer(stroke.pointers[i + 1], stroke.pointers[i + 2])\n          const ctrl: TPointer = stroke.pointers[i + 1]\n          this.renderQuadratic(context2d, begin, end, ctrl, width)\n        }\n        const beginLine: TPointer = computeMiddlePointer(stroke.pointers[NUMBER_POINTS - 2], stroke.pointers[NUMBER_POINTS - 1])\n        const endLine: TPointer = stroke.pointers[NUMBER_POINTS - 1]\n        this.renderLine(context2d, beginLine, endLine, width)\n\n        const beginFinal: TPointer = stroke.pointers[NUMBER_POINTS - 2]\n        const endFinal: TPointer = stroke.pointers[NUMBER_POINTS - 1]\n        this.renderFinal(context2d, beginFinal, endFinal, width)\n      }\n      context2d.closePath()\n      if (color !== undefined) {\n        context2d.fillStyle = color\n        context2d.fill()\n      }\n      context2d.save()\n    }\n    catch (error) {\n      this.#logger.error(\"draw\", { error })\n    }\n    finally {\n      context2d.restore()\n    }\n  }\n}\n", "import { LoggerCategory, LoggerManager } from \"../../logger\"\nimport { TSymbol, TCanvasTextSymbol, TCanvasTextUnderlineSymbol, TCanvasUnderLineSymbol, TPoint } from \"../../symbol\"\n\n/**\n * @group Renderer\n */\nexport class CanvasRendererText\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.RENDERER)\n\n  symbols = {\n    char: \"char\",\n    string: \"string\",\n    textLine: \"textLine\"\n  }\n\n  protected drawUnderline(context2D: CanvasRenderingContext2D, textUnderline: TCanvasTextUnderlineSymbol, underline: TCanvasUnderLineSymbol)\n  {\n    this.#logger.debug(\"#drawUnderline\", { context2D, textUnderline, underline })\n    context2D.save()\n    try {\n      const delta = textUnderline.data.width / textUnderline.label.length\n      const p1: TPoint = {\n        x: textUnderline.data.topLeftPoint.x + (underline.data.firstCharacter * delta),\n        y: textUnderline.data.topLeftPoint.y + textUnderline.data.height\n      }\n      const p2: TPoint = {\n        x: textUnderline.data.topLeftPoint.x + (underline.data.lastCharacter * delta),\n        y: textUnderline.data.topLeftPoint.y + textUnderline.data.height\n      }\n      context2D.beginPath()\n      context2D.moveTo(p1.x, p1.y)\n      context2D.lineTo(p2.x, p2.y)\n      context2D.stroke()\n    } catch(error) {\n      this.#logger.error(\"#drawUnderline\", { error })\n    } finally {\n      context2D.restore()\n    }\n  }\n\n  protected drawText(context2D: CanvasRenderingContext2D, text: TCanvasTextSymbol)\n  {\n    this.#logger.debug(\"#drawText\", { context2D, text })\n    context2D.save()\n    try {\n      context2D.font = `${ text.data.textHeight }px serif`\n      context2D.textAlign = (text.data.justificationType === \"CENTER\") ? \"center\" : \"left\"\n      context2D.textBaseline = \"bottom\"\n      context2D.fillStyle = context2D.strokeStyle\n      context2D.fillText(text.label, text.data.topLeftPoint.x, (text.data.topLeftPoint.y + text.data.height))\n    } catch(error) {\n      this.#logger.error(\"#drawText\", { error })\n    } finally {\n      context2D.restore()\n    }\n  }\n\n  protected drawTextLine(context2D: CanvasRenderingContext2D, textUnderline: TCanvasTextUnderlineSymbol)\n  {\n    this.#logger.debug(\"#drawTextLine\", { context2D, textUnderline })\n    this.drawText(context2D, textUnderline)\n    textUnderline.underlineList.forEach((underline) =>\n    {\n      this.drawUnderline(context2D, textUnderline, underline)\n    })\n  }\n\n  draw(context2D: CanvasRenderingContext2D, symbol: TSymbol)\n  {\n    this.#logger.info(\"draw\", { context2D, symbol })\n    context2D.lineWidth = (symbol.style.width as number)\n    context2D.strokeStyle = (symbol.style.color as string)\n    switch (symbol.type) {\n      case this.symbols.char:\n      case this.symbols.string:\n        this.drawText(context2D, symbol as TCanvasTextSymbol)\n        break\n      case this.symbols.textLine:\n        this.drawTextLine(context2D, symbol as TCanvasTextUnderlineSymbol)\n        break\n      default:\n        this.#logger.warn(\"draw\", `${symbol.type} not implemented`)\n        break\n    }\n  }\n}\n", "import { LoggerCategory, LoggerManager } from \"../../logger\"\nimport { Model } from \"../../model\"\nimport { Stroke, TSymbol } from \"../../symbol\"\nimport { TRendererConfiguration } from \"../RendererConfiguration\"\nimport { CanvasRendererShape } from \"./CanvasRendererShape\"\nimport { CanvasRendererStroke } from \"./CanvasRendererStroke\"\nimport { CanvasRendererText } from \"./CanvasRendererText\"\n\n/**\n * @group Renderer\n */\nexport class CanvasRenderer\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.RENDERER)\n  configuration: Omit<TRendererConfiguration, \"guides\">\n  strokeRenderer: CanvasRendererStroke\n  shapeRenderer: CanvasRendererShape\n  textRenderer: CanvasRendererText\n  context!: {\n    parent: HTMLElement\n    renderingCanvas: HTMLCanvasElement\n    renderingCanvasContext: CanvasRenderingContext2D\n    capturingCanvas: HTMLCanvasElement\n    capturingCanvasContext: CanvasRenderingContext2D\n  }\n\n  constructor(config: Omit<TRendererConfiguration, \"guides\">)\n  {\n    this.#logger.info(\"constructor\", { config })\n    this.configuration = config\n    this.strokeRenderer = new CanvasRendererStroke()\n    this.shapeRenderer = new CanvasRendererShape()\n    this.textRenderer = new CanvasRendererText()\n  }\n\n  protected createCanvas(type: string): HTMLCanvasElement\n  {\n    this.#logger.debug(\"createCanvas\", { type })\n    const canvas: HTMLCanvasElement = document.createElement(\"canvas\")\n    canvas.id = type\n    canvas.classList.add(type)\n    canvas.classList.add(\"ms-canvas\")\n    return canvas\n  }\n\n  protected resizeContent(): void\n  {\n    const pixelRatio: number = window.devicePixelRatio\n    const elements: HTMLCanvasElement[] = [this.context.renderingCanvas, this.context.capturingCanvas]\n    elements.forEach((canvas) =>\n    {\n      const domElement = canvas.parentNode as HTMLElement\n      const width = Math.max(this.configuration.minWidth, domElement.clientWidth)\n      const height = Math.max(this.configuration.minHeight, domElement.clientHeight)\n      canvas.width = width * pixelRatio\n      canvas.height = height * pixelRatio\n      canvas.getContext(\"2d\")?.scale(pixelRatio, pixelRatio)\n      canvas.style.width = `${ width }px`\n      canvas.style.height = `${ height }px`\n    })\n  }\n\n  protected drawSymbol(context2D: CanvasRenderingContext2D, symbol: TSymbol)\n  {\n    this.#logger.debug(\"drawSymbol\", { symbol })\n    if (symbol.type === \"stroke\") {\n      const stroke = symbol as Stroke\n      if (stroke.pointerType !== \"eraser\") {\n        this.strokeRenderer.draw(context2D, stroke)\n      }\n    } else if (Object.keys(this.textRenderer.symbols).includes(symbol.type)) {\n      this.textRenderer.draw(context2D, symbol)\n    } else if (Object.keys(this.shapeRenderer.symbols).includes(symbol.type)) {\n      this.shapeRenderer.draw(context2D, symbol)\n    } else {\n      this.#logger.warn(\"drawSymbol\", `symbol type unknow: ${symbol.type}`)\n    }\n  }\n\n  init(element: HTMLElement, guide?: { x?: number, y?: number } ): void\n  {\n    this.#logger.info(\"init\", { element })\n    const renderingCanvas: HTMLCanvasElement = this.createCanvas(\"ms-rendering-canvas\")\n    renderingCanvas.setAttribute(\"data-layer\", \"MODEL\")\n    if (guide) {\n      renderingCanvas.style.backgroundSize = `${guide.x || 1}px ${guide.y || 1}px`\n    }\n    element.appendChild(renderingCanvas)\n\n    const capturingCanvas: HTMLCanvasElement = this.createCanvas(\"ms-capture-canvas\")\n    capturingCanvas.setAttribute(\"data-layer\", \"CAPTURE\")\n    element.appendChild(capturingCanvas)\n\n    this.context = {\n      parent: element,\n      renderingCanvas,\n      renderingCanvasContext: renderingCanvas.getContext(\"2d\") as CanvasRenderingContext2D,\n      capturingCanvas,\n      capturingCanvasContext: capturingCanvas.getContext(\"2d\") as CanvasRenderingContext2D\n    }\n\n    this.resizeContent()\n  }\n\n  drawModel(model: Model): void\n  {\n    this.#logger.info(\"drawModel\", { model })\n    this.context.renderingCanvasContext?.clearRect(0, 0, this.context.renderingCanvas.width, this.context.renderingCanvas.height)\n    model.symbols.forEach(symbol => this.drawSymbol(this.context.renderingCanvasContext, symbol))\n    this.context.capturingCanvasContext.clearRect(0, 0, this.context.capturingCanvas.width, this.context.capturingCanvas.height)\n  }\n\n  drawPendingStroke(stroke: Stroke | undefined): void\n  {\n    this.#logger.info(\"drawPendingStroke\", { stroke })\n    this.context.capturingCanvasContext.clearRect(0, 0, this.context.capturingCanvas.width, this.context.capturingCanvas.height)\n    if (stroke && stroke?.pointerType !== \"eraser\") {\n      this.strokeRenderer.draw(this.context.capturingCanvasContext, stroke)\n    }\n  }\n\n  resize(model: Model): void\n  {\n    this.#logger.info(\"resize\", { model })\n    this.resizeContent()\n    this.drawModel(model)\n  }\n\n  destroy(): void\n  {\n    this.#logger.info(\"destroy\")\n    if (this.context.parent) {\n      this.context.parent.innerHTML = \"\"\n    }\n  }\n}\n", "\n/**\n * @group Renderer\n */\nexport const IISVGRendererConst =\n{\n  arrowHeadStartMarker: \"arrow-head-start\",\n  arrowHeadEndMaker: \"arrow-head-end\",\n  selectionFilterId: \"selection-filter\",\n  removalFilterId: \"removal-filter\",\n  crossMarker: \"cross-marker\",\n  noSelection: \"pointer-events: none; -webkit-touch-callout: none; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;\",\n}", "import { TBox, TPoint } from \"../../symbol\"\n\nconst XMLNS = \"http://www.w3.org/2000/svg\"\n/**\n * @group Renderer\n */\nexport class SVGBuilder\n{\n  static createLayer(boundingBox: TBox, attrs: { [key: string]: string } = {}): SVGSVGElement\n  {\n    const svgEl = document.createElementNS(XMLNS, \"svg\")\n    svgEl.setAttribute(\"width\", `${ boundingBox.width }px`)\n    svgEl.setAttribute(\"height\", `${ boundingBox.height }px`)\n    svgEl.setAttribute(\"viewBox\", `${boundingBox.x}, ${boundingBox.y}, ${boundingBox. width }, ${ boundingBox.height }`)\n    Object.keys(attrs).forEach(k =>\n    {\n      svgEl.setAttribute(k, attrs[k])\n    })\n    return svgEl\n  }\n\n  static createFilter(id: string, attrs: { [key: string]: string } = {}): SVGFilterElement\n  {\n    const filter = document.createElementNS(XMLNS, \"filter\")\n    filter.id = id\n    Object.keys(attrs).forEach(k =>\n    {\n      filter.setAttribute(k, attrs[k])\n    })\n    return filter\n  }\n\n  static createDefs(): SVGDefsElement\n  {\n    return document.createElementNS(XMLNS, \"defs\")\n  }\n\n  static createMarker(id: string, attrs: { [key: string]: string } = {}): SVGMarkerElement\n  {\n    const marker = document.createElementNS(XMLNS, \"marker\")\n    marker.setAttribute(\"id\", id)\n    Object.keys(attrs).forEach(k =>\n    {\n      marker.setAttribute(k, attrs[k])\n    })\n    return marker\n  }\n\n  static createComponentTransfert(): SVGFEComponentTransferElement\n  {\n    return document.createElementNS(XMLNS, \"feComponentTransfer\")\n  }\n\n  static createDropShadow({ dx = 0, dy = 0, deviation = 0, color = \"#3e68ff\", opacity = 1 }): SVGFEDropShadowElement\n  {\n    const shadow = document.createElementNS(XMLNS, \"feDropShadow\")\n    shadow.setAttribute(\"dx\", dx.toString())\n    shadow.setAttribute(\"dy\", dy.toString())\n    shadow.setAttribute(\"stdDeviation\", deviation.toString())\n    shadow.setAttribute(\"flood-color\", color)\n    shadow.setAttribute(\"flood-opacity\", opacity.toString())\n    return shadow\n  }\n\n  static createTransfertFunctionTable(type: \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\", values: string): SVGFEFuncAElement\n  {\n    const feFunc = document.createElementNS(XMLNS, type)\n    feFunc.setAttribute(\"type\", \"table\")\n    feFunc.setAttribute(\"tableValues\", values)\n    return feFunc\n  }\n\n  static createGroup(attrs: { [key: string]: string } = {}): SVGGElement\n  {\n    const groupEl = document.createElementNS(XMLNS, \"g\")\n    Object.keys(attrs).forEach(k =>\n    {\n      groupEl.setAttribute(k, attrs[k])\n    })\n    return groupEl\n  }\n\n  static createLine(p1: TPoint, p2: TPoint, attrs: { [key: string]: string } = {}): SVGLineElement\n  {\n    const lineEl = document.createElementNS(XMLNS, \"line\")\n    lineEl.setAttribute(\"x1\", p1.x.toString())\n    lineEl.setAttribute(\"y1\", p1.y.toString())\n    lineEl.setAttribute(\"x2\", p2.x.toString())\n    lineEl.setAttribute(\"y2\", p2.y.toString())\n    Object.keys(attrs).forEach(k =>\n    {\n      lineEl.setAttribute(k, attrs[k])\n    })\n    return lineEl\n  }\n\n  static createCircle(p: TPoint, r: number, attrs: { [key: string]: string } = {}): SVGCircleElement\n  {\n    const circleEl = document.createElementNS(XMLNS, \"circle\")\n    circleEl.setAttribute(\"cx\", p.x.toString())\n    circleEl.setAttribute(\"cy\", p.y.toString())\n    circleEl.setAttribute(\"r\", r.toString())\n    Object.keys(attrs).forEach(k =>\n    {\n      circleEl.setAttribute(k, attrs[k])\n    })\n    return circleEl\n  }\n\n  static createPath(attrs: { [key: string]: string } = {}): SVGPathElement\n  {\n    const pathEl = document.createElementNS(XMLNS, \"path\")\n    Object.keys(attrs).forEach(k =>\n    {\n      pathEl.setAttribute(k, attrs[k])\n    })\n    return pathEl\n  }\n\n  static createPolygon(points: number[], attrs: { [key: string]: string } = {}): SVGPolylineElement\n  {\n    const polygonEl = document.createElementNS(XMLNS, \"polygon\")\n    polygonEl.setAttribute(\"points\", points.join(\",\"))\n    Object.keys(attrs).forEach(k =>\n    {\n      polygonEl.setAttribute(k, attrs[k])\n    })\n    return polygonEl\n  }\n\n  static createRect(box: TBox, attrs: { [key: string]: string } = {}): SVGRectElement\n  {\n    const rectEl = document.createElementNS(XMLNS, \"rect\")\n    rectEl.setAttribute(\"x\", box.x.toString())\n    rectEl.setAttribute(\"y\", box.y.toString())\n    rectEl.setAttribute(\"width\", box.width.toString())\n    rectEl.setAttribute(\"height\", box.height.toString())\n    Object.keys(attrs).forEach(k =>\n    {\n      rectEl.setAttribute(k, attrs[k])\n    })\n    return rectEl\n  }\n\n  static createTSpan(text: string, attrs: { [key: string]: string } = {}): SVGTSpanElement\n  {\n    const tSpanEl = document.createElementNS(XMLNS, \"tspan\")\n    tSpanEl.textContent = text\n    Object.keys(attrs).forEach(k =>\n    {\n      tSpanEl.setAttribute(k, attrs[k])\n    })\n    return tSpanEl\n  }\n\n  static createForeignObject(box: TBox, node: HTMLElement, attrs: { [key: string]: string } = {}): SVGForeignObjectElement\n  {\n    const objEl = document.createElementNS(XMLNS, \"foreignObject\")\n    objEl.setAttribute(\"x\", box.x.toString())\n    objEl.setAttribute(\"y\", box.y.toString())\n    objEl.setAttribute(\"width\", box.width.toString())\n    objEl.setAttribute(\"height\", box.height.toString())\n    Object.keys(attrs).forEach(k =>\n    {\n      objEl.setAttribute(k, attrs[k])\n    })\n    objEl.appendChild(node)\n    return objEl\n  }\n\n  static createText(p: TPoint, text: string, attrs: { [key: string]: string } = {}): SVGTextElement\n  {\n    const textEl = document.createElementNS(XMLNS, \"text\")\n    textEl.textContent = text\n    textEl.setAttribute(\"x\", p.x.toString())\n    textEl.setAttribute(\"y\", p.y.toString())\n    Object.keys(attrs).forEach(k =>\n    {\n      textEl.setAttribute(k, attrs[k])\n    })\n    return textEl\n  }\n}\n", "import { EdgeDecoration, EdgeKind, IIEdgeArc, IIEdgeLine, IIEdgePolyLine, TIIEdge } from \"../../symbol\"\nimport { DefaultStyle } from \"../../style\"\nimport { IISVGRendererConst } from \"./IISVGRendererConst\"\nimport { SVGBuilder } from \"./SVGBuilder\"\n\n/**\n * @group Renderer\n */\nexport class IISVGRendererEdgeUtil\n{\n  static getLinePath(line: IIEdgeLine): string\n  {\n    return `M ${ line.start.x } ${ line.start.y } L ${ line.end.x } ${ line.end.y }`\n  }\n\n  static getPolyLinePath(line: IIEdgePolyLine): string\n  {\n    return `M ${ line.vertices[0].x } ${ line.vertices[0].y } ${ line.vertices.map(p => `L ${ p.x } ${ p.y }`).join(\" \") }`\n  }\n\n  static getArcPath(arc: IIEdgeArc): string\n  {\n    return `M ${ arc.vertices[0].x } ${ arc.vertices[0].y } Q ${ arc.vertices.map(p => `${ p.x } ${ p.y }`).join(\" \") }`\n  }\n\n  static getSVGPath(edge: TIIEdge): string\n  {\n    switch (edge.kind) {\n      case EdgeKind.Line:\n        return IISVGRendererEdgeUtil.getLinePath(edge)\n      case EdgeKind.PolyEdge:\n        return IISVGRendererEdgeUtil.getPolyLinePath(edge)\n      case EdgeKind.Arc:\n        return IISVGRendererEdgeUtil.getArcPath(edge)\n      default:\n        throw new Error(`Can't getSVGPath for edge cause kind is unknow: \"${ JSON.stringify(edge) }\"`)\n    }\n  }\n\n  static getSVGElement(edge: TIIEdge): SVGGraphicsElement\n  {\n    const attrs: { [key: string]: string } = {\n      \"id\": edge.id,\n      \"type\": edge.type,\n      \"kind\": edge.kind,\n      \"vector-effect\": \"non-scaling-stroke\",\n      \"stroke-linecap\": \"round\",\n      \"stroke-linejoin\": \"round\",\n    }\n    if (edge.selected) {\n      attrs[\"filter\"] = `url(#${ IISVGRendererConst.selectionFilterId })`\n    }\n    if (edge.deleting) {\n      attrs[\"filter\"] = `url(#${ IISVGRendererConst.removalFilterId })`\n    }\n    const group = SVGBuilder.createGroup(attrs)\n\n    const pathAttrs: { [key: string]: string } = {\n      \"fill\": \"transparent\",\n      \"stroke\": edge.style.color || DefaultStyle.color!,\n      \"stroke-width\": (edge.style.width || DefaultStyle.width).toString(),\n      \"d\": IISVGRendererEdgeUtil.getSVGPath(edge),\n    }\n    if (edge.style.opacity) {\n      pathAttrs[\"opacity\"] = edge.style.opacity.toString()\n    }\n\n    if (edge.startDecoration === EdgeDecoration.Arrow) {\n      pathAttrs[\"marker-start\"] = `url(#${ IISVGRendererConst.arrowHeadStartMarker })`\n    }\n    if (edge.endDecoration === EdgeDecoration.Arrow) {\n      pathAttrs[\"marker-end\"] = `url(#${ IISVGRendererConst.arrowHeadEndMaker })`\n    }\n    group.appendChild(SVGBuilder.createPath(pathAttrs))\n    return group\n  }\n\n\n}", "import { IIEraser, TPointer } from \"../../symbol\"\nimport { SVGBuilder } from \"./SVGBuilder\"\n\n/**\n * @group Renderer\n */\nexport class IISVGRendererEraserUtil\n{\n  static getSVGPath(eraser: IIEraser): string\n  {\n    if (eraser.pointers.length < 1) return \"\"\n\n    const firstPoint = eraser.pointers.at(0) as TPointer\n\n    const startPath = `M ${ firstPoint.x } ${ firstPoint.y }`\n\n    if (eraser.pointers.length === 1) {\n      const strokeWith = eraser.style.width || 4\n      return `${startPath} L ${ firstPoint.x  + strokeWith / 2 } ${ firstPoint.y }`\n    }\n\n    const middlePoints = eraser.pointers.slice(1)\n\n    return middlePoints.reduce((acc, point) => {\n      return `${ acc } L ${ point.x } ${ point.y }`\n    }, startPath)\n  }\n\n  static getSVGElement(eraser: IIEraser): SVGPathElement\n  {\n    const attrs: { [key: string]: string } = {\n      \"id\": eraser.id,\n      \"type\": \"eraser\",\n      \"stroke-width\": \"12\",\n      \"stroke\": \"grey\",\n      \"opacity\": \"0.2\",\n      \"shadowBlur\": \"5\",\n      \"stroke-linecap\": \"round\",\n      \"fill\": \"transparent\",\n      \"d\": IISVGRendererEraserUtil.getSVGPath(eraser)\n    }\n    return SVGBuilder.createPath(attrs)\n  }\n\n}", "import { DecoratorKind, IIDecorator, RecognizedKind, SymbolType, TBox, TIISymbol } from \"../../symbol\"\nimport { DefaultStyle } from \"../../style\"\nimport { SVGBuilder } from \"./SVGBuilder\"\n\n/**\n * @group Renderer\n */\nexport class IISVGRendererDecoratorUtil\n{\n  static getSVGElement(decorator: IIDecorator, symbol: TIISymbol): SVGGeometryElement | undefined\n  {\n    const attrs: { [key: string]: string } = {\n      \"id\": decorator.id,\n      \"type\": \"decorator\",\n      \"kind\": decorator.kind,\n      \"vector-effect\": \"non-scaling-stroke\",\n      \"stroke-linecap\": \"round\",\n      \"stroke-linejoin\": \"round\",\n    }\n    if (decorator.style.opacity) {\n      attrs[\"opacity\"] = decorator.style.opacity.toString()\n    }\n    if (symbol.deleting) {\n      attrs[\"opacity\"] = ((decorator.style.opacity || 1) * 0.5).toString()\n    }\n\n    let element: SVGGeometryElement | undefined\n\n    switch (decorator.kind) {\n      case DecoratorKind.Highlight: {\n        attrs[\"opacity\"] = symbol.deleting ? \"0.25\" : \"0.5\"\n        attrs[\"stroke\"] = \"transparent\"\n        attrs[\"fill\"] = decorator.style.color || DefaultStyle.color!\n        const boundingBox: TBox = {\n          x: symbol.bounds.x - +(symbol.style.width || DefaultStyle.width),\n          y: symbol.bounds.y - +(symbol.style.width || DefaultStyle.width),\n          height: symbol.bounds.height + +(symbol.style.width || DefaultStyle.width) * 2,\n          width: symbol.bounds.width + +(symbol.style.width || DefaultStyle.width) * 2,\n        }\n        element = SVGBuilder.createRect(boundingBox, attrs)\n        break\n      }\n      case DecoratorKind.Surround: {\n        attrs[\"fill\"] = \"transparent\"\n        attrs[\"stroke\"] = decorator.style.color || DefaultStyle.color!\n        attrs[\"stroke-width\"] = (decorator.style.width || DefaultStyle.width).toString()\n        const boundingBox: TBox = {\n          x: symbol.bounds.x - +(symbol.style.width || DefaultStyle.width),\n          y: symbol.bounds.y - +(symbol.style.width || DefaultStyle.width),\n          height: symbol.bounds.height + +(symbol.style.width || DefaultStyle.width) * 2,\n          width: symbol.bounds.width + +(symbol.style.width || DefaultStyle.width) * 2,\n        }\n        element = SVGBuilder.createRect(boundingBox, attrs)\n        break\n      }\n      case DecoratorKind.Strikethrough: {\n        attrs[\"fill\"] = \"transparent\"\n        attrs[\"stroke\"] = decorator.style.color || DefaultStyle.color!\n        attrs[\"stroke-width\"] = (decorator.style.width || DefaultStyle.width).toString()\n        const p1 = {\n          x: symbol.bounds.xMin,\n          y: symbol.bounds.yMid\n        }\n        const p2 = {\n          x: symbol.bounds.xMax,\n          y: symbol.bounds.yMid\n        }\n        if (symbol.type === SymbolType.Recognized && symbol.kind === RecognizedKind.Text) {\n          p1.y = symbol.baseline - symbol.xHeight / 2\n          p2.y = symbol.baseline - symbol.xHeight / 2\n        }\n        element = SVGBuilder.createLine(p1, p2, attrs)\n        break\n      }\n      case DecoratorKind.Underline: {\n        attrs[\"fill\"] = \"transparent\"\n        attrs[\"stroke\"] = decorator.style.color || DefaultStyle.color!\n        attrs[\"stroke-width\"] = (decorator.style.width || DefaultStyle.width).toString()\n        const p1 = {\n          x: symbol.bounds.xMin,\n          y: symbol.bounds.yMax + +(symbol.style.width || DefaultStyle.width)\n        }\n        const p2 = {\n          x: symbol.bounds.xMax,\n          y: symbol.bounds.yMax + +(symbol.style.width || DefaultStyle.width)\n        }\n        if (symbol.type === SymbolType.Recognized && symbol.kind === RecognizedKind.Text) {\n          p1.y = symbol.baseline + symbol.xHeight / 2\n          p2.y = symbol.baseline + symbol.xHeight / 2\n        }\n        element = SVGBuilder.createLine(p1, p2, attrs)\n        break\n      }\n    }\n\n    return element\n  }\n}", "import { IIShapeCircle, IIShapeEllipse, IIShapePolygon, ShapeKind, TIIShape } from \"../../symbol\"\nimport { DefaultStyle } from \"../../style\"\nimport { convertRadianToDegree } from \"../../utils\"\nimport { IISVGRendererConst } from \"./IISVGRendererConst\"\nimport { SVGBuilder } from \"./SVGBuilder\"\n\n/**\n * @group Renderer\n */\nexport class IISVGRendererShapeUtil\n{\n  static getPolygonePath(polygon: IIShapePolygon): string\n  {\n    return `M ${polygon.points[0].x} ${polygon.points[0].y} ${polygon.points.slice(1).map(p => `L ${p.x} ${p.y}`).join(\" \")} Z`\n  }\n\n  static getCirclePath(circle: IIShapeCircle): string\n  {\n    return `M ${circle.center.x - circle.radius} ${circle.center.y} a ${circle.radius} ${circle.radius} 0 1 1 ${circle.radius * 2} 0 a ${circle.radius} ${circle.radius} 0 1 1 -${circle.radius * 2} 0 Z`\n  }\n\n  static getEllipsePath(ellipse: IIShapeEllipse): string\n  {\n    return `M ${ellipse.center.x - ellipse.radiusX} ${ellipse.center.y} a ${ellipse.radiusX} ${ellipse.radiusY} 0 1 1 ${ellipse.radiusX * 2} 0 a ${ellipse.radiusX} ${ellipse.radiusY} 0 1 1 -${ellipse.radiusX * 2} 0 Z`\n  }\n\n  static getSVGPath(shape: TIIShape): string\n  {\n    switch(shape.kind) {\n      case ShapeKind.Polygon:\n        return IISVGRendererShapeUtil.getPolygonePath(shape as IIShapePolygon)\n      case ShapeKind.Circle:\n        return IISVGRendererShapeUtil.getCirclePath(shape as IIShapeCircle)\n      case ShapeKind.Ellipse:\n        return IISVGRendererShapeUtil.getEllipsePath(shape as IIShapeEllipse)\n      default:\n        throw new Error(`Can't getSVGPath for shape cause kind is unknow: \"${ JSON.stringify(shape) }\"`)\n    }\n  }\n\n  static getSVGElement(shape: TIIShape): SVGGraphicsElement\n  {\n    const attrs: { [key: string]: string } = {\n      \"id\": shape.id,\n      \"type\": shape.type,\n      \"kind\": shape.kind,\n      \"vector-effect\": \"non-scaling-stroke\",\n      \"stroke-linecap\": \"round\",\n      \"stroke-linejoin\": \"round\",\n    }\n    if (shape.selected) {\n      attrs[\"filter\"] = `url(#${ IISVGRendererConst.selectionFilterId })`\n    }\n    if (shape.deleting) {\n      attrs[\"filter\"] = `url(#${ IISVGRendererConst.removalFilterId })`\n    }\n\n    const group = SVGBuilder.createGroup(attrs)\n\n    const pathAttrs: { [key: string]: string } = {\n      \"fill\": shape.style.fill || \"transparent\",\n      \"stroke\": shape.style.color || DefaultStyle.color!,\n      \"stroke-width\": (shape.style.width || DefaultStyle.width).toString(),\n      \"d\": IISVGRendererShapeUtil.getSVGPath(shape),\n    }\n    if (shape.style.opacity) {\n      pathAttrs[\"opacity\"] = shape.style.opacity.toString()\n    }\n    if (shape.kind === ShapeKind.Ellipse) {\n      pathAttrs.transform = `rotate(${ convertRadianToDegree(shape.orientation) }, ${shape.center.x}, ${shape.center.y})`\n    }\n\n    group.appendChild(SVGBuilder.createPath(pathAttrs))\n\n    return group\n  }\n}", "import { DecoratorKind, IIStroke, TPointer } from \"../../symbol\"\nimport { DefaultStyle } from \"../../style\"\nimport { computeAngleAxeRadian, computeLinksPointers, computeMiddlePointer } from \"../../utils\"\nimport { IISVGRendererDecoratorUtil } from \"./IISVGRendererDecoratorUtil\"\nimport { IISVGRendererConst } from \"./IISVGRendererConst\"\nimport { SVGBuilder } from \"./SVGBuilder\"\n\n/**\n * @group Renderer\n */\nexport class IISVGRendererStrokeUtil\n{\n\n  protected static getArcPath(center: TPointer, radius: number): string\n  {\n    const svgPath = [\n      `M ${ center.x } ${ center.y }`,\n      `m ${ -radius } 0`,\n      `a ${ radius } ${ radius } 0 1 0 ${ radius * 2 } 0`,\n      `a ${ radius } ${ radius } 0 1 0 ${ -(radius * 2) } 0`\n    ].join(\" \")\n    return svgPath\n  }\n\n  protected static getLinePath(begin: TPointer, end: TPointer, width: number): string\n  {\n    const linkPoints1 = computeLinksPointers(begin, computeAngleAxeRadian(begin, end), width)\n    const linkPoints2 = computeLinksPointers(end, computeAngleAxeRadian(begin, end), width)\n    const svgPath = [\n      `M ${ linkPoints1[0].x } ${ linkPoints1[0].y }`,\n      `L ${ linkPoints2[0].x } ${ linkPoints2[0].y }`,\n      `L ${ linkPoints2[1].x } ${ linkPoints2[1].y }`,\n      `L ${ linkPoints1[1].x } ${ linkPoints1[1].y }`\n    ].join(\" \")\n    return svgPath\n  }\n\n  protected static getFinalPath(begin: TPointer, end: TPointer, width: number): string\n  {\n    const ARCSPLIT = 6\n    const angle = computeAngleAxeRadian(begin, end)\n    const linkPoints = computeLinksPointers(end, angle, width)\n    const parts = [`M ${ linkPoints[0].x } ${ linkPoints[0].y }`]\n    for (let i = 1; i <= ARCSPLIT; i++) {\n      const newAngle = angle - (i * (Math.PI / ARCSPLIT))\n      const x = +(end.x - (end.p * width * Math.sin(newAngle))).toFixed(3)\n      const y = +(end.y + (end.p * width * Math.cos(newAngle))).toFixed(3)\n      parts.push(`L ${ x } ${ y }`)\n    }\n    const svgPath = parts.join(\" \")\n    return svgPath\n  }\n\n  protected static getQuadraticPath(begin: TPointer, end: TPointer, central: TPointer, width: number): string\n  {\n    const linkPoints1 = computeLinksPointers(begin, computeAngleAxeRadian(begin, central), width)\n    const linkPoints2 = computeLinksPointers(end, computeAngleAxeRadian(central, end), width)\n    const linkPoints3 = computeLinksPointers(central, computeAngleAxeRadian(begin, end), width)\n    const svgPath = [\n      `M ${ linkPoints1[0].x } ${ linkPoints1[0].y }`,\n      `Q ${ linkPoints3[0].x } ${ linkPoints3[0].y } ${ linkPoints2[0].x } ${ linkPoints2[0].y }`,\n      `L ${ linkPoints2[1].x } ${ linkPoints2[1].y }`,\n      `Q ${ linkPoints3[1].x } ${ linkPoints3[1].y } ${ linkPoints1[1].x } ${ linkPoints1[1].y }`\n    ].join(\" \")\n    return svgPath\n  }\n\n  static getSVGPath(stroke: IIStroke): string\n  {\n    const STROKE_LENGTH = stroke.pointers.length\n    if (!STROKE_LENGTH) return \"\"\n    const STROKE_WIDTH = (stroke.style.width as number)\n    const NB_QUADRATICS = STROKE_LENGTH - 2\n    const firstPoint = stroke.pointers[0]\n\n    const parts = []\n    if (STROKE_LENGTH < 3) {\n      parts.push(this.getArcPath(firstPoint, STROKE_WIDTH * 0.6))\n    } else {\n      parts.push(this.getArcPath(firstPoint, STROKE_WIDTH * firstPoint.p))\n      parts.push(this.getLinePath(firstPoint, computeMiddlePointer(firstPoint, stroke.pointers[1]), STROKE_WIDTH))\n\n      for (let i = 0; i < NB_QUADRATICS; i++) {\n        const begin = computeMiddlePointer(stroke.pointers[i], stroke.pointers[i + 1])\n        const end = computeMiddlePointer(stroke.pointers[i + 1], stroke.pointers[i + 2])\n        const central = stroke.pointers[i + 1]\n        parts.push(this.getQuadraticPath(begin, end, central, STROKE_WIDTH)\n        )\n      }\n      const beforeLastPoint = stroke.pointers[STROKE_LENGTH - 2]\n      const lastPoint = stroke.pointers[STROKE_LENGTH - 1]\n      parts.push(this.getLinePath(computeMiddlePointer(beforeLastPoint, lastPoint), lastPoint, STROKE_WIDTH))\n      parts.push(this.getFinalPath(beforeLastPoint, lastPoint, STROKE_WIDTH))\n    }\n    return parts.join(\" \")\n  }\n\n  static getSVGElement(stroke: IIStroke): SVGGraphicsElement\n  {\n    const attrs: { [key: string]: string } = {\n      \"id\": stroke.id,\n      \"type\": \"stroke\",\n      \"vector-effect\": \"non-scaling-stroke\",\n      \"stroke-linecap\": \"round\",\n      \"stroke-linejoin\": \"round\",\n    }\n    if (stroke.selected) {\n      attrs[\"filter\"] = `url(#${ IISVGRendererConst.selectionFilterId })`\n    }\n    if (stroke.deleting) {\n      attrs[\"filter\"] = `url(#${ IISVGRendererConst.removalFilterId })`\n    }\n\n    const strokeGroup = SVGBuilder.createGroup(attrs)\n\n    const strokeAttrs: { [key: string]: string } = {\n      \"fill\": stroke.style.color || DefaultStyle.color!,\n      \"stroke-width\": stroke.style.width.toString(),\n      \"d\": IISVGRendererStrokeUtil.getSVGPath(stroke)\n    }\n    if (stroke.style.opacity) {\n      strokeAttrs.opacity = stroke.style.opacity.toString()\n    }\n    strokeGroup.append(SVGBuilder.createPath(strokeAttrs))\n\n    stroke.decorators.forEach(d =>\n    {\n      const deco = IISVGRendererDecoratorUtil.getSVGElement(d, stroke)\n      if (deco) {\n        if (d.kind === DecoratorKind.Highlight) {\n          strokeGroup.prepend(deco)\n        }\n        else {\n          strokeGroup.append(deco)\n        }\n      }\n    })\n\n    return strokeGroup\n  }\n\n}", "import { DecoratorKind, IIText } from \"../../symbol\"\nimport { IISVGRendererDecoratorUtil } from \"./IISVGRendererDecoratorUtil\"\nimport { IISVGRendererConst } from \"./IISVGRendererConst\"\nimport { SVGBuilder } from \"./SVGBuilder\"\n\n/**\n * @group Renderer\n */\nexport class IISVGRendererTextUtil\n{\n  static getSVGElement(text: IIText): SVGGraphicsElement\n  {\n    const attrs: { [key: string]: string } = {\n      \"id\": text.id,\n      \"type\": text.type,\n      \"vector-effect\": \"non-scaling-stroke\",\n      \"stroke-linecap\": \"round\",\n      \"stroke-linejoin\": \"round\",\n      \"style\": IISVGRendererConst.noSelection,\n    }\n    if (text.style.opacity) {\n      attrs.opacity = text.style.opacity.toString()\n    }\n    if (text.rotation) {\n      attrs.transform = `rotate(${ text.rotation.degree }, ${ text.rotation.center.x }, ${ text.rotation.center.y })`\n    }\n    if (text.selected) {\n      attrs[\"filter\"] = `url(#${ IISVGRendererConst.selectionFilterId })`\n    }\n    if (text.deleting) {\n      attrs[\"filter\"] = `url(#${ IISVGRendererConst.removalFilterId })`\n    }\n\n    const textGroup = SVGBuilder.createGroup(attrs)\n\n    const textElement = SVGBuilder.createText(text.point, \"\")\n\n    text.chars.forEach(c =>\n    {\n      const attrs: { [key: string]: string } = {\n        id: c.id,\n        fill: c.color,\n        \"font-size\": `${ c.fontSize }px`,\n        \"font-weight\": c.fontWeight.toString(),\n      }\n      textElement.appendChild(SVGBuilder.createTSpan(c.label, attrs))\n    })\n    textGroup.append(textElement)\n\n    text.decorators.forEach(d =>\n    {\n      const deco = IISVGRendererDecoratorUtil.getSVGElement(d, text)\n      if (deco) {\n        if (d.kind === DecoratorKind.Highlight) {\n          textGroup.prepend(deco)\n        }\n        else {\n          textGroup.append(deco)\n        }\n      }\n    })\n\n    return textGroup\n  }\n}", "import { DecoratorKind, RecognizedKind, TIIRecognized } from \"../../symbol\"\nimport { DefaultStyle } from \"../../style\"\nimport { IISVGRendererDecoratorUtil } from \"./IISVGRendererDecoratorUtil\"\nimport { IISVGRendererStrokeUtil } from \"./IISVGRendererStrokeUtil\"\nimport { IISVGRendererConst } from \"./IISVGRendererConst\"\nimport { SVGBuilder } from \"./SVGBuilder\"\n\n/**\n * @group Renderer\n */\nexport class IISVGRendererRecognizedUtil\n{\n  static getSVGElement(recognizedSymbol: TIIRecognized): SVGGraphicsElement\n  {\n    const attrs: { [key: string]: string } = {\n      \"id\": recognizedSymbol.id,\n      \"type\": recognizedSymbol.type,\n      \"kind\": recognizedSymbol.kind,\n      \"vector-effect\": \"non-scaling-stroke\",\n      \"stroke-linecap\": \"round\",\n      \"stroke-linejoin\": \"round\",\n      \"fill\": recognizedSymbol.style.color || DefaultStyle.color,\n      \"stroke-width\": (recognizedSymbol.style.width || DefaultStyle.width).toString(),\n    }\n    if (recognizedSymbol.style.opacity) {\n      attrs[\"opacity\"] = recognizedSymbol.style.opacity.toString()\n    }\n    if (recognizedSymbol.selected) {\n      attrs[\"filter\"] = `url(#${ IISVGRendererConst.selectionFilterId })`\n    }\n    if (recognizedSymbol.deleting) {\n      attrs[\"filter\"] = `url(#${ IISVGRendererConst.removalFilterId })`\n    }\n\n    const groupEl = SVGBuilder.createGroup(attrs)\n\n    recognizedSymbol.strokes.forEach(s =>\n    {\n      groupEl.append(IISVGRendererStrokeUtil.getSVGElement(s))\n    })\n\n    if (recognizedSymbol.kind === RecognizedKind.Text) {\n      recognizedSymbol.decorators.forEach(d =>\n      {\n        const deco = IISVGRendererDecoratorUtil.getSVGElement(d, recognizedSymbol)\n        if (deco) {\n          if (d.kind === DecoratorKind.Highlight) {\n            groupEl.prepend(deco)\n          }\n          else {\n            groupEl.append(deco)\n          }\n        }\n      })\n    }\n\n    return groupEl\n  }\n\n}", "import { DecoratorKind, IIEraser, IISymbolGroup, SymbolType, TIISymbol } from \"../../symbol\"\nimport { DefaultStyle } from \"../../style\"\nimport { IISVGRendererDecoratorUtil } from \"./IISVGRendererDecoratorUtil\"\nimport { IISVGRendererEdgeUtil } from \"./IISVGRendererEdgeUtil\"\nimport { IISVGRendererShapeUtil } from \"./IISVGRendererShapeUtil\"\nimport { IISVGRendererStrokeUtil } from \"./IISVGRendererStrokeUtil\"\nimport { IISVGRendererConst } from \"./IISVGRendererConst\"\nimport { SVGBuilder } from \"./SVGBuilder\"\nimport { IISVGRendererTextUtil } from \"./IISVGRendererTextUtil\"\nimport { IISVGRendererRecognizedUtil } from \"./IISVGRendererRecognizedUtil\"\n\n/**\n * @group Renderer\n */\nexport class IISVGRendererGroupUtil\n{\n\n  static getChildElement(symbol: TIISymbol | IIEraser): SVGGraphicsElement | undefined\n  {\n    let element: SVGGraphicsElement | undefined\n    switch (symbol.type) {\n      case SymbolType.Stroke:\n        element = IISVGRendererStrokeUtil.getSVGElement(symbol)\n        break\n      case SymbolType.Shape:\n        element = IISVGRendererShapeUtil.getSVGElement(symbol)\n        break\n      case SymbolType.Edge:\n        element = IISVGRendererEdgeUtil.getSVGElement(symbol)\n        break\n      case SymbolType.Text:\n        element = IISVGRendererTextUtil.getSVGElement(symbol)\n        break\n      case SymbolType.Group:\n        element = IISVGRendererGroupUtil.getSVGElement(symbol)\n        break\n      case SymbolType.Recognized:\n        element = IISVGRendererRecognizedUtil.getSVGElement(symbol)\n        break\n    }\n    return element\n  }\n\n  static getSVGElement(symbolGroup: IISymbolGroup): SVGGraphicsElement\n  {\n    const attrs: { [key: string]: string } = {\n      \"id\": symbolGroup.id,\n      \"type\": \"group\",\n      \"vector-effect\": \"non-scaling-stroke\",\n      \"stroke-linecap\": \"round\",\n      \"stroke-linejoin\": \"round\",\n      \"fill\": symbolGroup.style.color || DefaultStyle.color!,\n      \"stroke-width\": (symbolGroup.style.width || DefaultStyle.width).toString(),\n    }\n    if (symbolGroup.style.opacity) {\n      attrs[\"opacity\"] = symbolGroup.style.opacity.toString()\n    }\n    if (symbolGroup.selected) {\n      attrs[\"filter\"] = `url(#${ IISVGRendererConst.selectionFilterId })`\n    }\n    if (symbolGroup.deleting) {\n      attrs[\"filter\"] = `url(#${ IISVGRendererConst.removalFilterId })`\n    }\n\n    const groupEl = SVGBuilder.createGroup(attrs)\n\n    symbolGroup.children.forEach(sym =>\n    {\n      groupEl.append(IISVGRendererGroupUtil.getChildElement(sym)!)\n    })\n\n    symbolGroup.decorators.forEach(d =>\n    {\n      const deco = IISVGRendererDecoratorUtil.getSVGElement(d, symbolGroup)\n      if (deco) {\n        if (d.kind === DecoratorKind.Highlight) {\n          groupEl.prepend(deco)\n        }\n        else {\n          groupEl.append(deco)\n        }\n      }\n    })\n\n    return groupEl\n  }\n\n}", "import { SvgElementRole } from \"../../Constants\"\nimport { getClosestPoints } from \"../../utils\"\nimport { LoggerCategory, LoggerManager } from \"../../logger\"\nimport { TIISymbol, TPoint, TBox, Box, IIEraser, SymbolType } from \"../../symbol\"\nimport { TIIRendererConfiguration } from \"../RendererConfiguration\"\nimport { IISVGRendererConst } from \"./IISVGRendererConst\"\nimport { IISVGRendererEdgeUtil } from \"./IISVGRendererEdgeUtil\"\nimport { IISVGRendererEraserUtil } from \"./IISVGRendererEraserUtil\"\nimport { IISVGRendererGroupUtil } from \"./IISVGRendererGroupUtil\"\nimport { IISVGRendererShapeUtil } from \"./IISVGRendererShapeUtil\"\nimport { IISVGRendererStrokeUtil } from \"./IISVGRendererStrokeUtil\"\nimport { IISVGRendererTextUtil } from \"./IISVGRendererTextUtil\"\nimport { IISVGRendererRecognizedUtil } from \"./IISVGRendererRecognizedUtil\"\nimport { SVGBuilder } from \"./SVGBuilder\"\n\n/**\n * @group Renderer\n */\nexport class IISVGRenderer\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.RENDERER)\n  groupGuidesId = \"guides-wrapper\"\n\n  configuration: TIIRendererConfiguration\n  parent!: HTMLElement\n  layer!: SVGSVGElement\n  definitionGroup!: SVGGElement\n\n  verticalGuides: number[] = []\n  horizontalGuides: number[] = []\n\n  constructor(configuration: TIIRendererConfiguration)\n  {\n    this.#logger.info(\"constructor\", { configuration })\n    this.configuration = configuration\n  }\n\n  protected initLayer(): void\n  {\n    const width = Math.max(this.configuration.minWidth, this.parent.clientWidth)\n    const height = Math.max(this.configuration.minHeight, this.parent.clientHeight)\n    this.layer = SVGBuilder.createLayer({ x: 0, y: 0, width, height })\n    this.layer.style.setProperty(\"height\", \"auto\")\n    this.layer.style.setProperty(\"width\", \"auto\")\n    this.layer.appendChild(this.createSVGTools())\n    this.parent.style.setProperty(\"overflow\", \"auto\")\n    this.parent.appendChild(this.layer)\n  }\n\n  protected createDefs(): SVGDefsElement\n  {\n    const defs = SVGBuilder.createDefs()\n\n    const SIZE = 5\n    const REFX = SIZE - 1, REFY = SIZE / 2\n    const arrowHeadMarkerAttrs = {\n      style: IISVGRendererConst.noSelection,\n      fill: \"context-stroke\",\n      markerWidth: SIZE.toString(),\n      markerHeight: SIZE.toString(),\n      refX: REFX.toString(),\n      refY: REFY.toString(),\n    }\n\n    const arrowHeadStart = SVGBuilder.createMarker(IISVGRendererConst.arrowHeadStartMarker, { ...arrowHeadMarkerAttrs, orient: \"auto-start-reverse\" })\n    arrowHeadStart.appendChild(SVGBuilder.createPolygon([0, 0, SIZE, REFY, 0, SIZE], arrowHeadMarkerAttrs))\n    defs.appendChild(arrowHeadStart)\n\n    const arrowHeadEnd = SVGBuilder.createMarker(IISVGRendererConst.arrowHeadEndMaker, { ...arrowHeadMarkerAttrs, orient: \"auto\" })\n    arrowHeadEnd.appendChild(SVGBuilder.createPolygon([0, 0, SIZE, REFY, 0, SIZE], arrowHeadMarkerAttrs))\n    defs.appendChild(arrowHeadEnd)\n\n    const crossMarkerAttrs = {\n      style: IISVGRendererConst.noSelection,\n      markerWidth: \"5\",\n      markerHeight: \"5\",\n      refX: \"0\",\n      refY: \"0\",\n      viewBox: \"-5 -5 10 10\"\n    }\n    const cross = SVGBuilder.createMarker(IISVGRendererConst.crossMarker, crossMarkerAttrs)\n    cross.appendChild(SVGBuilder.createPath({ d: \"M -4,-4 L 4,4 M -4,4 L 4,-4\", stroke: \"white\", \"stroke-width\": \"3\" }))\n    cross.appendChild(SVGBuilder.createPath({ d: \"M -4,-4 L 4,4 M -4,4 L 4,-4\", stroke: \"context-stroke\", \"stroke-width\": \"2\" }))\n    defs.appendChild(cross)\n\n    return defs\n  }\n\n  protected createFilters(): SVGGElement\n  {\n    const filtersGroup = SVGBuilder.createGroup({ id: \"definition-group\" })\n    const removalFilter = SVGBuilder.createFilter(IISVGRendererConst.removalFilterId, { filterUnits: \"userSpaceOnUse\" })\n    const bfeComponentTransfer = SVGBuilder.createComponentTransfert()\n    const bfeFuncA = SVGBuilder.createTransfertFunctionTable(\"feFuncA\", \"0 0.25\")\n    bfeComponentTransfer.appendChild(bfeFuncA)\n    removalFilter.appendChild(bfeComponentTransfer)\n    filtersGroup.appendChild(removalFilter)\n\n    const selectionFilter = SVGBuilder.createFilter(IISVGRendererConst.selectionFilterId, { filterUnits: \"userSpaceOnUse\" })\n    selectionFilter.appendChild(SVGBuilder.createDropShadow({ dx: -1, dy: -1, deviation: 1 }))\n    filtersGroup.appendChild(selectionFilter)\n\n    return filtersGroup\n  }\n\n  protected drawGuides(): void\n  {\n    this.verticalGuides = []\n    this.horizontalGuides = []\n    const height = Number(this.layer.getAttribute(\"height\")?.replace(\"px\", \"\"))\n    const width = Number(this.layer.getAttribute(\"width\")?.replace(\"px\", \"\"))\n    const offSet = this.configuration.guides.gap\n    const subOffSet = this.configuration.guides.gap / 5\n    const attrs = {\n      id: this.groupGuidesId,\n      stroke: \"grey\",\n      opacity: \"0.5\",\n      style: IISVGRendererConst.noSelection,\n      role: SvgElementRole.Guide\n    }\n    const guidesGroup = SVGBuilder.createGroup(attrs)\n    switch (this.configuration.guides.type) {\n      case \"line\":\n        for (let y = offSet; y < height; y += offSet) {\n          const begin: TPoint = { x: offSet, y }\n          const end: TPoint = { x: width - offSet, y }\n          this.horizontalGuides.push(y)\n          const svgLine = SVGBuilder.createLine(begin, end, { \"stroke-width\": \"1\", style: IISVGRendererConst.noSelection })\n          guidesGroup.appendChild(svgLine)\n        }\n        break\n      case \"grid\":\n        for (let y = 0; y < height; y += offSet) {\n          const begin: TPoint = { x: 0, y }\n          const end: TPoint = { x: width, y }\n          const svgLine = SVGBuilder.createLine(begin, end, { \"stroke-width\": \"1\", style: IISVGRendererConst.noSelection })\n          guidesGroup.appendChild(svgLine)\n          this.horizontalGuides.push(y)\n          for (let subY = y + subOffSet; subY < y + offSet; subY += subOffSet) {\n            this.horizontalGuides.push(subY)\n            const svgLine = SVGBuilder.createLine({ x: 0, y: subY }, { x: width, y: subY }, { \"stroke-width\": \"0.25\", style: IISVGRendererConst.noSelection })\n            guidesGroup.appendChild(svgLine)\n          }\n        }\n        for (let x = 0; x < width; x += offSet) {\n          const begin: TPoint = { x, y: 0 }\n          const end: TPoint = { x, y: height }\n          const svgLine = SVGBuilder.createLine(begin, end, { \"stroke-width\": \"1\", style: IISVGRendererConst.noSelection })\n          guidesGroup.appendChild(svgLine)\n          this.verticalGuides.push(x)\n          for (let subX = x + subOffSet; subX < x + offSet; subX += subOffSet) {\n            this.verticalGuides.push(subX)\n            const svgLine = SVGBuilder.createLine({ x: subX, y: 0 }, { x: subX, y: height }, { \"stroke-width\": \"0.25\", style: IISVGRendererConst.noSelection })\n            guidesGroup.appendChild(svgLine)\n          }\n        }\n        break\n      case \"point\":\n        for (let x = offSet; x < width; x += offSet) {\n          this.verticalGuides.push(x)\n          for (let y = offSet; y < height; y += offSet) {\n            this.horizontalGuides.push(y)\n            const svgPoint = SVGBuilder.createCircle({ x, y }, 1)\n            guidesGroup.appendChild(svgPoint)\n          }\n        }\n        break\n      default:\n        this.#logger.error(\"drawGuides\", `Guide type unknow: ${ this.configuration.guides.type }`)\n        break\n    }\n    this.horizontalGuides = [...new Set(this.horizontalGuides)]\n    this.verticalGuides = [...new Set(this.verticalGuides)]\n    this.definitionGroup.appendChild(guidesGroup)\n  }\n\n  protected removeGuides(): void\n  {\n    this.verticalGuides = []\n    this.horizontalGuides = []\n    this.layer.querySelector(`#${ this.groupGuidesId }`)?.remove()\n  }\n\n  protected createSVGTools(): SVGGElement\n  {\n    this.definitionGroup = SVGBuilder.createGroup({ id: \"definition-group\" })\n    this.definitionGroup.appendChild(this.createDefs())\n    this.definitionGroup.appendChild(this.createFilters())\n    if (this.configuration.guides.enable) {\n      this.drawGuides()\n    }\n    return this.definitionGroup\n  }\n\n  init(element: HTMLElement): void\n  {\n    this.#logger.info(\"init\", { element })\n    this.parent = element\n    this.parent.oncontextmenu = () => false\n    this.initLayer()\n  }\n\n  getAttribute(id: string, name: string): string | undefined | null\n  {\n    const element = this.layer.querySelector(`#${ id }`) as HTMLElement | null\n    return element?.getAttribute(name)\n  }\n\n  setAttribute(id: string, name: string, value: string): void\n  {\n    const element = this.layer.querySelector(`#${ id }`) as HTMLElement | null\n    element?.setAttribute(name, value)\n  }\n\n  buildElementFromSymbol(symbol: TIISymbol | IIEraser): SVGGraphicsElement | undefined\n  {\n    let element: SVGGraphicsElement | undefined\n    switch (symbol.type) {\n      case SymbolType.Stroke:\n        element = IISVGRendererStrokeUtil.getSVGElement(symbol)\n        break\n      case SymbolType.Eraser:\n        element = IISVGRendererEraserUtil.getSVGElement(symbol)\n        break\n      case SymbolType.Shape:\n        element = IISVGRendererShapeUtil.getSVGElement(symbol)\n        break\n      case SymbolType.Edge:\n        element = IISVGRendererEdgeUtil.getSVGElement(symbol)\n        break\n      case SymbolType.Text:\n        element = IISVGRendererTextUtil.getSVGElement(symbol)\n        break\n      case SymbolType.Group:\n        element = IISVGRendererGroupUtil.getSVGElement(symbol)\n        break\n      case SymbolType.Recognized:\n        element = IISVGRendererRecognizedUtil.getSVGElement(symbol)\n        break\n      default:\n        this.#logger.error(\"buildElementFromSymbol\", `symbol unknow: \"${ JSON.stringify(symbol) }\"`)\n    }\n    return element\n  }\n\n  prependElement(el: Element): void\n  {\n    this.layer.prepend(el)\n  }\n\n  changeOrderSymbol(symbolToMove: TIISymbol, position: \"first\" | \"last\" | \"forward\" | \"backward\"): void\n  {\n    const moveEl = this.layer.querySelector(`#${ symbolToMove.id }`)\n    if (!moveEl) return\n    switch (position) {\n      case \"first\":\n        this.definitionGroup.insertAdjacentElement(\"afterend\", moveEl)\n        break\n      case \"last\":\n        this.layer.insertAdjacentElement(\"beforeend\", moveEl)\n        break\n      case \"forward\":\n        moveEl.nextElementSibling?.insertAdjacentElement(\"afterend\", moveEl)\n        break\n      case \"backward\":\n        if (moveEl.previousElementSibling !== this.definitionGroup) {\n          moveEl.previousElementSibling?.insertAdjacentElement(\"beforebegin\", moveEl)\n        }\n        break\n    }\n  }\n\n  appendElement(el: Element): void\n  {\n    this.layer.appendChild(el)\n  }\n\n  removeElement(id: string): void\n  {\n    this.#logger.debug(\"Element\", { id })\n    const oldStroke = this.layer.querySelector(`#${ id }`)\n    if (oldStroke) {\n      oldStroke.remove()\n    }\n  }\n\n  drawSymbol(symbol: TIISymbol | IIEraser): SVGGraphicsElement | undefined\n  {\n    this.#logger.debug(\"drawSymbol\", { symbol })\n    const oldNode = this.layer.querySelector(`#${ symbol?.id }`)\n    const svgEl = this.buildElementFromSymbol(symbol)\n\n    if (svgEl) {\n      if (oldNode) {\n        oldNode.replaceWith(svgEl)\n      }\n      else {\n        this.layer.appendChild(svgEl)\n      }\n    }\n    return svgEl\n  }\n\n  replaceSymbol(id: string, symbols: TIISymbol[]): SVGGraphicsElement[] | undefined\n  {\n    this.#logger.debug(\"drawSymbol\", { symbols })\n    const oldNode = this.layer.querySelector(`#${ id }`)\n    const elements = symbols.map(s => this.buildElementFromSymbol(s)).filter(x => !!x) as SVGGraphicsElement[]\n\n    if (elements.length) {\n      if (oldNode) {\n        elements.forEach(e => oldNode.insertAdjacentElement(\"beforebegin\", e))\n        oldNode.remove()\n      }\n      else {\n        elements.forEach(e => this.layer.appendChild(e))\n      }\n    }\n    return elements\n  }\n\n  removeSymbol(id: string): void\n  {\n    this.#logger.debug(\"removeSymbol\", { id })\n    this.removeElement(id)\n  }\n\n  drawCircle(point: TPoint, radius: number, attrs: { [key: string]: string } = {}): void\n  {\n    this.#logger.info(\"drawCircle\", { point, radius, attrs })\n    this.layer.appendChild(SVGBuilder.createCircle(point, radius, attrs))\n  }\n\n  drawRect(box: TBox, attrs: { [key: string]: string } = {}): void\n  {\n    this.#logger.info(\"drawCircle\", { box, attrs })\n    this.layer.appendChild(SVGBuilder.createRect(box, attrs))\n  }\n\n  drawLine(p1: TPoint, p2: TPoint, attrs: { [key: string]: string } = {}): void\n  {\n    this.#logger.info(\"drawLine\", { p1, p2, attrs })\n    this.layer.appendChild(SVGBuilder.createLine(p1, p2, attrs))\n  }\n\n  drawConnectionBetweenBox(id: string, box1: TBox, box2: TBox, attrs?: { [key: string]: string }): void\n  {\n    const points1: TPoint[] = new Box(box1).corners\n    const points2: TPoint[] = new Box(box2).corners\n    const { p1, p2 } = getClosestPoints(points1, points2)\n    const attrsLine = {\n      id,\n      fill: \"transparent\",\n      style: IISVGRendererConst.noSelection,\n      ...attrs\n    }\n    this.drawLine(p1, p2, attrsLine)\n  }\n\n  resize(height: number, width: number): void\n  {\n    this.#logger.info(\"resize\", { height, width })\n    this.layer.setAttribute(\"width\", `${ width }px`)\n    this.layer.setAttribute(\"height\", `${ height }px`)\n    this.layer.setAttribute(\"viewBox\", `0, 0, ${ width }, ${ height }`)\n    this.removeGuides()\n    if (this.configuration.guides.enable) {\n      this.drawGuides()\n    }\n  }\n\n  getElementById(id: string): SVGGraphicsElement | null\n  {\n    return this.layer.querySelector(`#${ id }`) as SVGGraphicsElement | null\n  }\n\n  getElements({ tagName, attrs }: { tagName?: string, attrs?: { [key: string]: string } }): NodeListOf<Element>\n  {\n    this.#logger.info(\"getElements\", { tagName, attrs })\n    let query = tagName || \"*\"\n    if (attrs) {\n      Object.keys(attrs).forEach(k =>\n      {\n        query += `[${ k }=${ attrs[k] }]`\n      })\n    }\n    return this.layer.querySelectorAll(query)\n  }\n\n  clearElements({ tagName, attrs }: { tagName?: string, attrs?: { [key: string]: string } }): void\n  {\n    this.#logger.info(\"clearElements\", { tagName, attrs })\n    this.getElements({ tagName, attrs })\n      .forEach(e => e.remove())\n  }\n\n  clear(): void\n  {\n    this.#logger.info(\"clear\")\n    if (this.layer) {\n      while (this.layer.firstChild) {\n        this.layer.firstChild.remove()\n      }\n      this.layer.appendChild(this.createSVGTools())\n    }\n  }\n\n  destroy(): void\n  {\n    if (this.layer) {\n      this.layer.remove()\n    }\n  }\n}", "import { TPointer, TStroke } from \"../../symbol\"\nimport { computeAngleAxeRadian, computeLinksPointers, computeMiddlePointer } from \"../../utils\"\n\n/**\n * @group Renderer\n */\nexport class SVGStroker\n{\n\n  protected getArcPath(center: TPointer, radius: number): string\n  {\n    const svgPath = [\n      `M ${ center.x },${ center.y }`,\n      `m ${ -radius },0`,\n      `a ${ radius },${ radius } 0 1 0 ${ radius * 2 },0`,\n      `a ${ radius },${ radius } 0 1 0 ${ -(radius * 2) },0`\n    ].join(\" \")\n    return svgPath\n  }\n\n  protected getLinePath(begin: TPointer, end: TPointer, width: number): string\n  {\n    const linkPoints1 = computeLinksPointers(begin, computeAngleAxeRadian(begin, end), width)\n    const linkPoints2 = computeLinksPointers(end, computeAngleAxeRadian(begin, end), width)\n    const svgPath = [\n      `M ${ linkPoints1[0].x },${ linkPoints1[0].y }`,\n      `L ${ linkPoints2[0].x },${ linkPoints2[0].y }`,\n      `L ${ linkPoints2[1].x },${ linkPoints2[1].y }`,\n      `L ${ linkPoints1[1].x },${ linkPoints1[1].y }`\n    ].join(\" \")\n    return svgPath\n  }\n\n  protected getFinalPath(begin: TPointer, end: TPointer, width: number): string\n  {\n    const ARCSPLIT = 6\n    const angle = computeAngleAxeRadian(begin, end)\n    const linkPoints = computeLinksPointers(end, angle, width)\n    const parts = [`M ${ linkPoints[0].x },${ linkPoints[0].y }`]\n    for (let i = 1; i <= ARCSPLIT; i++) {\n      const newAngle = angle - (i * (Math.PI / ARCSPLIT))\n      parts.push(`L ${ end.x - (end.p * width * Math.sin(newAngle)) },${ end.y + (end.p * width * Math.cos(newAngle)) }`)\n    }\n    const svgPath = parts.join(\" \")\n    return svgPath\n  }\n\n  protected getQuadraticPath(begin: TPointer, end: TPointer, central: TPointer, width: number): string\n  {\n    const linkPoints1 = computeLinksPointers(begin, computeAngleAxeRadian(begin, central), width)\n    const linkPoints2 = computeLinksPointers(end, computeAngleAxeRadian(central, end), width)\n    const linkPoints3 = computeLinksPointers(central, computeAngleAxeRadian(begin, end), width)\n    const svgPath = [\n      `M ${ linkPoints1[0].x },${ linkPoints1[0].y }`,\n      `Q ${ linkPoints3[0].x },${ linkPoints3[0].y } ${ linkPoints2[0].x },${ linkPoints2[0].y }`,\n      `L ${ linkPoints2[1].x },${ linkPoints2[1].y }`,\n      `Q ${ linkPoints3[1].x },${ linkPoints3[1].y } ${ linkPoints1[1].x },${ linkPoints1[1].y }`\n    ].join(\" \")\n    return svgPath\n  }\n\n  protected buildSVGPath(stroke: TStroke): string\n  {\n    const STROKE_LENGTH = stroke.pointers.length\n    const STROKE_WIDTH = (stroke.style.width as number)\n    const NB_QUADRATICS = STROKE_LENGTH - 2\n    const firstPoint = stroke.pointers[0]\n\n    const parts = []\n    if (STROKE_LENGTH < 3) {\n      parts.push(this.getArcPath(firstPoint, STROKE_WIDTH * 0.6))\n    } else {\n      parts.push(this.getArcPath(firstPoint, STROKE_WIDTH * firstPoint.p))\n      parts.push(this.getLinePath(firstPoint, computeMiddlePointer(firstPoint, stroke.pointers[1]), STROKE_WIDTH))\n\n      for (let i = 0; i < NB_QUADRATICS; i++) {\n        const begin = computeMiddlePointer(stroke.pointers[i], stroke.pointers[i + 1])\n        const end = computeMiddlePointer(stroke.pointers[i + 1], stroke.pointers[i + 2])\n        const central = stroke.pointers[i + 1]\n        parts.push(this.getQuadraticPath(begin, end, central, STROKE_WIDTH)\n        )\n      }\n      const beforeLastPoint = stroke.pointers[STROKE_LENGTH - 2]\n      const lastPoint = stroke.pointers[STROKE_LENGTH - 1]\n      parts.push(this.getLinePath(computeMiddlePointer(beforeLastPoint, lastPoint), lastPoint, STROKE_WIDTH))\n      parts.push(this.getFinalPath(beforeLastPoint, lastPoint, STROKE_WIDTH))\n    }\n    return parts.join(\" \")\n  }\n\n  drawStroke(svgElement: SVGElement, stroke: TStroke, attrs?: { name: string, value: string }[]): void\n  {\n    const svgPathElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\")\n    svgPathElement.classList.add(\"pending-stroke\")\n    svgPathElement.setAttribute(\"id\", stroke.id)\n    svgPathElement.setAttribute(\"type\", stroke.pointerType)\n    attrs?.forEach(a =>\n    {\n      svgPathElement.setAttribute(a.name, a.value)\n    })\n    const svgPath = this.buildSVGPath(stroke)\n    svgPathElement.setAttribute(\"d\", `${ svgPath }Z`)\n    svgElement.appendChild(svgPathElement)\n  }\n}\n", "import { LoggerCategory, LoggerManager } from \"../../logger\"\nimport { Model } from \"../../model\"\nimport { TStroke } from \"../../symbol\"\nimport { TRendererConfiguration } from \"../RendererConfiguration\"\nimport { TUpdatePatch, TUpdatePatchAppendChild, TUpdatePatchInsertBefore, TUpdatePatchRemoveAttribut, TUpdatePatchRemoveChild, TUpdatePatchRemoveElement, TUpdatePatchReplaceAll, TUpdatePatchReplaceELement, TUpdatePatchSetAttribut } from \"../../recognizer\"\nimport { SVGStroker } from \"./SVGStroker\"\n\n/**\n * @group Renderer\n */\nexport class InteractiveInkSSRSVGRenderer\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.RENDERER)\n\n  config: TRendererConfiguration\n  stroker: SVGStroker\n  context!: {\n    parent: HTMLElement\n  }\n\n  constructor(config: TRendererConfiguration)\n  {\n    this.#logger.info(\"constructor\", { config })\n    this.config = config\n    this.stroker = new SVGStroker()\n  }\n\n  init(element: HTMLElement): void\n  {\n    this.#logger.info(\"init\", { element })\n    element.style.fontSize = \"10px\"\n    this.context = {\n      parent: element\n    }\n  }\n\n  protected drawStroke(svgElement: SVGElement, stroke: TStroke)\n  {\n    let style: string\n    if (stroke.pointerType === \"eraser\") {\n      stroke.style.width = 12\n      style = \"fill:grey;stroke:transparent;shadowBlur:5;opacity:0.2;\"\n    } else {\n      style = `fill:${ stroke.style.color };stroke:transparent;`\n    }\n    this.stroker.drawStroke(svgElement, stroke, [{ name: \"style\", value: style }])\n  }\n\n  protected replaceAll(layerName: string, update: TUpdatePatchReplaceAll): void\n  {\n    const oldLayer = this.context.parent.querySelector(`svg[data-layer=\"${ layerName }\"]`) as SVGElement | null\n    oldLayer?.remove()\n    this.context.parent.insertAdjacentHTML(\"beforeend\", update.svg)\n    const layer = this.context.parent.querySelector(`svg[data-layer=\"${ layerName }\"]`) as SVGElement\n    if (layerName === \"MODEL\") {\n      const pendingStrokesGroup = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\")\n      pendingStrokesGroup.id = \"pendingStrokes\"\n      layer.appendChild(pendingStrokesGroup)\n    }\n  }\n\n  protected replaceElement(update: TUpdatePatchReplaceELement): void\n  {\n    const elementToRemove = this.context.parent.querySelector(`#${ update.id }`) as HTMLElement | null\n    if (elementToRemove) {\n      const parent = elementToRemove.parentNode as HTMLElement | null | undefined\n      elementToRemove?.remove()\n      parent?.insertAdjacentHTML(\"beforeend\", update.svg)\n    }\n  }\n\n  protected appendChild(layerName: string, update: TUpdatePatchAppendChild): void\n  {\n    const parentSelector = update.parentId ? `#${ update.parentId }` : `svg[data-layer=\"${ layerName }\"]`\n    const parent = this.context.parent.querySelector(parentSelector) as HTMLElement\n    parent?.insertAdjacentHTML(\"beforeend\", update.svg)\n  }\n\n  protected removeChild(update: TUpdatePatchRemoveChild): void\n  {\n    this.context.parent.querySelector(`#${ update.parentId } > *:nth-child(${ update.index + 1 })`)?.remove()\n  }\n\n  protected removeElement(update: TUpdatePatchRemoveElement): void\n  {\n    const elementToRemove = this.context.parent.querySelector(`#${ update.id }`)\n    if (elementToRemove) {\n      if (update.id.includes(\"s\") || update.id.includes(\"MODEL\")) {\n        elementToRemove.remove()\n      } else {\n        elementToRemove.setAttribute(\"class\", \"removed-stroke\")\n        setTimeout(() =>\n        {\n          elementToRemove?.remove()\n        }, 100)\n      }\n    }\n  }\n\n  protected insertBefore(update: TUpdatePatchInsertBefore): void\n  {\n    const parent = this.context.parent.querySelector(`#${ update.refId }`) as HTMLElement | null\n    parent?.insertAdjacentHTML(\"beforebegin\", update.svg)\n  }\n\n  protected setAttribute(update: TUpdatePatchSetAttribut): void\n  {\n    const selector = update.id ? `#${ update.id }` : \"svg\"\n    const element = this.context.parent.querySelector(selector) as HTMLElement | null\n    element?.setAttribute(update.name, update.value)\n  }\n\n  protected removeAttribute(update: TUpdatePatchRemoveAttribut): void\n  {\n    const selector = update.id ? `#${ update.id }` : \"svg\"\n    const element = this.context.parent.querySelector(selector) as HTMLElement | null\n    element?.removeAttribute(update.name)\n  }\n\n  updateLayer(layerName: string, update: TUpdatePatch): void\n  {\n    this.#logger.info(\"updateLayer\", { layerName, update })\n    switch (update.type) {\n      case \"REPLACE_ALL\":\n        this.replaceAll(layerName, update as TUpdatePatchReplaceAll)\n        break\n      case \"REPLACE_ELEMENT\":\n        this.replaceElement(update as TUpdatePatchReplaceELement)\n        break\n      case \"APPEND_CHILD\":\n        this.appendChild(layerName, update as TUpdatePatchAppendChild)\n        break\n      case \"REMOVE_ELEMENT\":\n        this.removeElement(update as TUpdatePatchRemoveElement)\n        break\n      case \"REMOVE_CHILD\":\n        this.removeChild(update as TUpdatePatchRemoveChild)\n        break\n      case \"INSERT_BEFORE\":\n        this.insertBefore(update as TUpdatePatchInsertBefore)\n        break\n      case \"SET_ATTRIBUTE\":\n        this.setAttribute(update as TUpdatePatchSetAttribut)\n        break\n      case \"REMOVE_ATTRIBUTE\":\n        this.removeAttribute(update as TUpdatePatchRemoveAttribut)\n        break\n      default:\n        this.#logger.warn(\"updateLayer\", `update.type unknow ${update.type}`)\n        break\n    }\n  }\n\n  updatesLayer(layerName: string, updates: TUpdatePatch[]): void\n  {\n    this.#logger.info(\"updatesLayer\", { layerName, updates })\n    updates.forEach(u => this.updateLayer(layerName, u))\n    this.clearPendingStroke()\n  }\n\n  clearPendingStroke(): void\n  {\n    this.#logger.info(\"clearPendingStroke\")\n    const pendingStrokeGroup = this.context.parent.querySelector(\"#pendingStrokes\") as SVGElement\n    if (pendingStrokeGroup) {\n      pendingStrokeGroup.innerHTML = \"\"\n    }\n  }\n\n  drawPendingStroke(stroke: TStroke): void\n  {\n    this.#logger.info(\"drawPendingStroke\", { stroke })\n    if (stroke) {\n      const pendingStrokeGroup = this.context.parent.querySelector(\"#pendingStrokes\") as SVGElement\n      if (pendingStrokeGroup) {\n        const oldStroke = pendingStrokeGroup.querySelector(`#${ stroke?.id }`)\n        if (oldStroke) {\n          oldStroke.remove()\n        }\n        this.drawStroke(pendingStrokeGroup, stroke)\n      }\n    }\n  }\n\n  clearErasingStrokes(): void\n  {\n    const erasingStrokeList = this.context.parent.querySelectorAll(\"[type=eraser]\") as NodeListOf<SVGElement>\n    erasingStrokeList.forEach(erasingStroke => {\n      erasingStroke.remove()\n    })\n  }\n\n  resize(model: Model): void\n  {\n    this.#logger.info(\"resize\", { model })\n    const rect = this.context.parent.getBoundingClientRect()\n    const svgList = this.context.parent.querySelectorAll(\"svg\")\n    const width = Math.max(rect.width, model.width)\n    const height = Math.max(rect.height, model.height)\n    svgList.forEach(svg =>\n    {\n      svg.setAttribute(\"viewBox\", `0 0 ${ width }, ${ height }`)\n      svg.setAttribute(\"width\", `${ width }px`)\n      svg.setAttribute(\"height\", `${ height }px`)\n    })\n  }\n\n  destroy(): void\n  {\n    this.#logger.info(\"destroy\", { context: this.context })\n    if (this.context?.parent) {\n      this.context.parent.querySelectorAll(\"svg\").forEach(n => n.remove())\n    }\n  }\n}", "\n/**\n * @group Renderer\n */\nexport type TGuidesConfiguration = {\n  enable: boolean,\n  gap: number\n}\n\n/**\n * @group Renderer\n * @source\n */\nexport const DefaultGuidesConfiguration: TGuidesConfiguration = {\n  enable: true,\n  gap: 50,\n}\n\n/**\n * @group Renderer\n */\nexport type TRendererConfiguration = {\n  minHeight: number\n  minWidth: number\n  guides: TGuidesConfiguration\n}\n\n/**\n * @group Renderer\n * @source\n */\nexport const DefaultRendererConfiguration: TRendererConfiguration = {\n  guides: DefaultGuidesConfiguration,\n  minHeight: 100,\n  minWidth: 100,\n}\n\n/**\n * @group Renderer\n */\nexport type TIIRendererConfiguration = TRendererConfiguration & {\n  guides: TGuidesConfiguration & {\n    type: \"line\" | \"grid\" | \"point\"\n  },\n}\n\n/**\n * @group Renderer\n * @source\n */\nexport const DefaultIIRendererConfiguration: TIIRendererConfiguration = {\n  guides: {\n    enable: true,\n    gap: 50,\n    type: \"point\"\n  },\n  minHeight: 100,\n  minWidth: 100,\n}\n", "import { InteractiveInkEditor } from \"../editor\"\nimport { LoggerManager, LoggerCategory } from \"../logger\"\nimport\n{\n  IIModel,\n  TJIIXChar,\n  TJIIXEdgeArc,\n  TJIIXEdgeElement,\n  JIIXEdgeKind,\n  TJIIXEdgeLine,\n  TJIIXEdgePolyEdge,\n  TJIIXExport,\n  TJIIXNodeCircle,\n  TJIIXNodeElement,\n  TJIIXNodeEllipse,\n  JIIXNodeKind,\n  TJIIXNodeParrallelogram,\n  TJIIXNodePolygon,\n  TJIIXNodeRectangle,\n  TJIIXNodeRhombus,\n  TJIIXNodeTriangle,\n  TJIIXTextElement,\n  TJIIXWord\n} from \"../model\"\nimport\n{\n  Box,\n  DecoratorKind,\n  IIDecorator,\n  IIEdgeArc,\n  IIEdgeLine,\n  IIEdgePolyLine,\n  IIShapeCircle,\n  IIShapeEllipse,\n  IIShapePolygon,\n  IIStroke,\n  IIText,\n  SymbolType,\n  TIIEdge,\n  TIIShape,\n  TIISymbol,\n  TIISymbolChar,\n  TPoint\n} from \"../symbol\"\nimport { RecognizedKind } from \"../symbol\"\nimport { computeAngleAxeRadian, computeAverage, convertBoundingBoxMillimeterToPixel, convertMillimeterToPixel, createUUID } from \"../utils\"\n\n/**\n * @group Manager\n */\nexport class IIConversionManager\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.CONVERTER)\n  editor: InteractiveInkEditor\n\n  constructor(editor: InteractiveInkEditor)\n  {\n    this.#logger.info(\"constructor\")\n    this.editor = editor\n  }\n\n  get configuration(): { size: number | \"auto\", weight: \"bold\" | \"normal\" | \"auto\" } {\n    return this.editor.configuration.fontStyle\n  }\n\n  get model(): IIModel\n  {\n    return this.editor.model\n  }\n\n  get rowHeight(): number\n  {\n    return this.editor.configuration.rendering.guides.gap\n  }\n\n  protected computeFontSize(chars: TJIIXChar[]): number\n  {\n    if (chars.some(c => c[\"bounding-box\"])) {\n      const height = convertMillimeterToPixel(computeAverage(chars.map(c => c[\"bounding-box\"]?.height || 1)))\n      return Math.round(Math.round(height * this.rowHeight) / this.rowHeight / 2) * 2\n    }\n    return Math.round(this.rowHeight / 2)\n  }\n\n  buildChar(char: TJIIXChar, strokes: IIStroke[], fontSize: number): TIISymbolChar\n  {\n    const points = char.grid.map(p => ({\n      x: convertMillimeterToPixel(p.x),\n      y: convertMillimeterToPixel(p.y),\n    }))\n    let fontWeight = this.configuration.weight\n    if (fontWeight === \"auto\") {\n      fontWeight = (strokes[0].style.width || 1) > 2 ? \"bold\" : \"normal\"\n    }\n\n    const color = strokes[0].style.color || \"black\"\n    return {\n      id: `text-char-${ createUUID() }`,\n      label: char.label,\n      color,\n      fontSize,\n      fontWeight,\n      bounds: Box.createFromPoints(points)\n    }\n  }\n\n  buildText(word: TJIIXWord, chars: TJIIXChar[], strokes: IIStroke[], size: number | \"auto\"): IIText\n  {\n    const boundingBox = Box.createFromBoxes([convertBoundingBoxMillimeterToPixel(word[\"bounding-box\"])])\n    const charSymbols: TIISymbolChar[] = []\n    const charFontSize = size === \"auto\" ? this.computeFontSize(chars) : size\n\n    chars.forEach(char =>\n    {\n      const charStrokes = strokes.filter(s => char.items?.some(i => i[\"full-id\"] === s.id)) as IIStroke[]\n      if (charStrokes.length) {\n        charSymbols.push(this.buildChar(char, charStrokes, charFontSize))\n      }\n    })\n    const point: TPoint = {\n      x: boundingBox.xMin,\n      y: boundingBox.yMax\n    }\n    const text = new IIText(charSymbols, point, boundingBox, strokes[0].style)\n    const decorators = strokes.flatMap(s => s.decorators)\n    strokes.forEach(s =>\n    {\n      const sym = this.model.getRootSymbol(s.id)\n      if ((sym?.type === SymbolType.Recognized && sym.kind === RecognizedKind.Text) || sym?.type === SymbolType.Group) {\n        const hightlight = sym.decorators.find(d => d.kind === DecoratorKind.Highlight)\n        if (hightlight) decorators.push(hightlight)\n        const strikethrough = sym.decorators.find(d => d.kind === DecoratorKind.Strikethrough)\n        if (strikethrough) decorators.push(strikethrough)\n        const surround = sym.decorators.find(d => d.kind === DecoratorKind.Surround)\n        if (surround) decorators.push(surround)\n        const underline = sym.decorators.find(d => d.kind === DecoratorKind.Underline)\n        if (underline) decorators.push(underline)\n      }\n    })\n    if (decorators.length) {\n      const hightlight = decorators.find(d => d.kind === DecoratorKind.Highlight)\n      if (hightlight) {\n        text.decorators.push(new IIDecorator(DecoratorKind.Highlight, hightlight.style))\n      }\n      const strikethrough = decorators.find(d => d.kind === DecoratorKind.Strikethrough)\n      if (strikethrough) {\n        text.decorators.push(new IIDecorator(DecoratorKind.Strikethrough, strikethrough.style))\n      }\n      const surround = decorators.find(d => d.kind === DecoratorKind.Surround)\n      if (surround) {\n        text.decorators.push(new IIDecorator(DecoratorKind.Surround, surround.style))\n      }\n      const underline = decorators.find(d => d.kind === DecoratorKind.Underline)\n      if (underline) {\n        text.decorators.push(new IIDecorator(DecoratorKind.Underline, underline.style))\n      }\n    }\n\n    return text\n  }\n\n  convertText(text: TJIIXTextElement, strokes: IIStroke[], onlyText: boolean): { symbol: IIText, strokes: IIStroke[] }[] | undefined\n  {\n    if (!text.lines) {\n      throw new Error(\"You need to active configuration.recognition.export.jiix.text.lines = true\")\n    }\n    if (!text.words) {\n      throw new Error(\"You need to active configuration.recognition.export.jiix.text.words = true\")\n    }\n    if (!text.chars) {\n      throw new Error(\"You need to active configuration.recognition.export.jiix.text.chars = true\")\n    }\n    if (!text.chars.some(c => c.items)) {\n      throw new Error(\"You need to active configuration.recognition.export.jiix.strokes = true\")\n    }\n\n    const jiixWords = text.words as TJIIXWord[]\n    const jiixChars = text.chars as TJIIXChar[]\n\n    const result: { symbol: IIText, strokes: IIStroke[] }[] = []\n\n\n    let textFontSize = this.configuration.size\n    if (onlyText && textFontSize === \"auto\") {\n      textFontSize = Math.round(this.computeFontSize(jiixChars.filter(c => c.items?.length)) / 2) * 2\n    }\n    else if (this.configuration.size !== \"auto\") {\n      textFontSize = this.configuration.size * this.rowHeight\n    }\n\n    let isNewLine = false\n    let currentY = convertMillimeterToPixel(text.lines[0][\"baseline-y\"])\n    const leftX = convertMillimeterToPixel(text[\"bounding-box\"]?.x || 0)\n    let currentX = convertMillimeterToPixel(jiixWords[0][\"bounding-box\"]?.x || 0)\n    jiixWords.forEach(word =>\n    {\n      if (word.label === \" \") {\n        currentX += this.editor.texter.getSpaceWidth(result.at(-1)?.symbol.chars[0].fontSize|| (this.rowHeight / 2))\n        return\n      }\n      const wordStrokes = strokes.filter(s => word.items?.some(i => i[\"full-id\"] === s.id)) as IIStroke[]\n      if (wordStrokes.length) {\n        const chars = jiixChars.slice(word[\"first-char\"] as number, (word[\"last-char\"] || 0) + 1)\n        const wordSymbol = this.buildText(word, chars, wordStrokes, textFontSize)\n\n        if (onlyText) {\n          if (isNewLine) {\n            isNewLine = false\n            const nbRow = Math.round((wordSymbol.point.y - currentY) / this.rowHeight) || 1\n            currentY += nbRow * this.rowHeight\n            if (Math.abs(wordSymbol.point.x - leftX) < this.rowHeight) {\n              currentX = leftX\n            }\n            else {\n              currentX = wordSymbol.point.x\n            }\n          }\n          wordSymbol.point.x = currentX\n          wordSymbol.point.y = this.model.roundToLineGuide(currentY)\n        }\n\n        this.editor.texter.setBounds(wordSymbol)\n        currentX += wordSymbol.bounds.width\n        result.push({\n          symbol: wordSymbol,\n          strokes: wordStrokes\n        })\n      }\n      isNewLine = word.label === \"\\n\"\n    })\n\n    return result\n  }\n\n  buildCircle(circle: TJIIXNodeCircle, strokes: IIStroke[]): IIShapeCircle\n  {\n    const center: TPoint = {\n      x: convertMillimeterToPixel(circle.cx),\n      y: convertMillimeterToPixel(circle.cy)\n    }\n    return new IIShapeCircle(center, convertMillimeterToPixel(circle.r), strokes[0]?.style)\n  }\n\n  buildEllipse(ellipse: TJIIXNodeEllipse, strokes: IIStroke[]): IIShapeEllipse\n  {\n    const center: TPoint = {\n      x: convertMillimeterToPixel(ellipse.cx),\n      y: convertMillimeterToPixel(ellipse.cy),\n    }\n    return new IIShapeEllipse(center, convertMillimeterToPixel(ellipse.rx), convertMillimeterToPixel(ellipse.ry), ellipse.orientation, strokes[0]?.style)\n  }\n\n  buildRectangle(rectangle: TJIIXNodeRectangle, strokes: IIStroke[]): IIShapePolygon\n  {\n    const height = convertMillimeterToPixel(rectangle.height)\n    const width = convertMillimeterToPixel(rectangle.width)\n    const x = convertMillimeterToPixel(rectangle.x)\n    const y = convertMillimeterToPixel(rectangle.y)\n    const points: TPoint[] = [\n      { x, y },\n      { x: x + width, y },\n      { x: x + width, y: y + height },\n      { x, y: y + height }\n    ]\n    return new IIShapePolygon(points, strokes[0]?.style)\n  }\n\n  buildPolygon(polygon: TJIIXNodePolygon, strokes: IIStroke[]): IIShapePolygon\n  {\n    const points: TPoint[] = []\n    for (let i = 0; i < polygon.points.length; i += 2) {\n      points.push({\n        x: convertMillimeterToPixel(polygon.points[i]),\n        y: convertMillimeterToPixel(polygon.points[i + 1])\n      })\n    }\n\n    return new IIShapePolygon(points, strokes[0]?.style)\n  }\n\n  buildRhombus(polygon: TJIIXNodeRhombus, strokes: IIStroke[]): IIShapePolygon\n  {\n    const points: TPoint[] = []\n    for (let i = 0; i < polygon.points.length; i += 2) {\n      points.push({\n        x: convertMillimeterToPixel(polygon.points[i]),\n        y: convertMillimeterToPixel(polygon.points[i + 1])\n      })\n    }\n\n    return new IIShapePolygon(points, strokes[0]?.style)\n  }\n\n  buildTriangle(polygon: TJIIXNodeTriangle, strokes: IIStroke[]): IIShapePolygon\n  {\n    const points: TPoint[] = []\n    for (let i = 0; i < polygon.points.length; i += 2) {\n      points.push({\n        x: convertMillimeterToPixel(polygon.points[i]),\n        y: convertMillimeterToPixel(polygon.points[i + 1])\n      })\n    }\n\n    return new IIShapePolygon(points, strokes[0]?.style)\n  }\n\n  buildParallelogram(polygon: TJIIXNodeParrallelogram, strokes: IIStroke[]): IIShapePolygon\n  {\n    const points: TPoint[] = []\n    for (let i = 0; i < polygon.points.length; i += 2) {\n      points.push({\n        x: convertMillimeterToPixel(polygon.points[i]),\n        y: convertMillimeterToPixel(polygon.points[i + 1])\n      })\n    }\n\n    return new IIShapePolygon(points, strokes[0]?.style)\n  }\n\n  convertNode(node: TJIIXNodeElement, strokes: IIStroke[]): { symbol: TIIShape, strokes: IIStroke[] } | undefined\n  {\n    const associatedStroke = strokes.filter(s => node.items?.some(i => i[\"full-id\"] === s.id))\n    if (!associatedStroke.length) return\n\n    const uniqStrokes = associatedStroke.filter((a, i) => associatedStroke.findIndex((s) => a.id === s.id) === i)\n\n    let shape: TIIShape\n    switch (node.kind) {\n      case JIIXNodeKind.Circle:\n        shape = this.buildCircle(node, uniqStrokes)\n        break\n      case JIIXNodeKind.Ellipse:\n        shape = this.buildEllipse(node, uniqStrokes)\n        break\n      case JIIXNodeKind.Rectangle:\n        shape = this.buildRectangle(node, uniqStrokes)\n        break\n      case JIIXNodeKind.Triangle:\n        shape = this.buildTriangle(node, uniqStrokes)\n        break\n      case JIIXNodeKind.Parallelogram:\n        shape = this.buildParallelogram(node, uniqStrokes)\n        break\n      case JIIXNodeKind.Polygon:\n        shape = this.buildPolygon(node, uniqStrokes)\n        break\n      case JIIXNodeKind.Rhombus:\n        shape = this.buildRhombus(node, uniqStrokes)\n        break\n      default:\n        this.#logger.warn(\"convertNode\", `Conversion of Node with kind equal to ${ JSON.stringify(node) } is unknow`)\n        return\n    }\n    return { symbol: shape, strokes: uniqStrokes }\n  }\n\n  buildLine(line: TJIIXEdgeLine, strokes: IIStroke[]): IIEdgeLine\n  {\n    const point1: TPoint = { x: convertMillimeterToPixel(line.x1), y: convertMillimeterToPixel(line.y1) }\n    const point2: TPoint = { x: convertMillimeterToPixel(line.x2), y: convertMillimeterToPixel(line.y2) }\n    const angle = computeAngleAxeRadian(point1, point2)\n\n    if (Math.abs(angle % Math.PI) < 0.1) {\n      // to adjust the line with the horizontal\n      point1.y = +((point1.y + point2.y) / 2).toFixed(3)\n      point2.y = point1.y\n    }\n    else if (Math.abs(angle % (Math.PI / 2)) < 0.1) {\n      // to adjust the line with the vertical\n      point1.x = +((point1.x + point2.x) / 2).toFixed(3)\n      point2.x = point1.x\n    }\n    return new IIEdgeLine(point1, point2, line.p1Decoration, line.p2Decoration, strokes[0]?.style)\n  }\n\n  buildPolyEdge(polyline: TJIIXEdgePolyEdge, strokes: IIStroke[]): IIEdgePolyLine\n  {\n    const start: TPoint = { x: convertMillimeterToPixel(polyline.edges[0].x1), y: convertMillimeterToPixel(polyline.edges[0].y1) }\n    const points = polyline.edges.map(e => ({ x: convertMillimeterToPixel(e.x2), y: convertMillimeterToPixel(e.y2) }))\n    points.unshift(start)\n    for (let index = 0; index < points.length - 1; index++) {\n      const p1 = points[index]\n      const p2 = points[index + 1]\n      const angle = computeAngleAxeRadian(p1, p2)\n      if (Math.abs(angle % Math.PI) < 0.1) {\n        p1.y = +((p1.y + p2.y) / 2).toFixed(3)\n        p2.y = p1.y\n      }\n      else if (Math.abs(angle % (Math.PI / 2)) < 0.1) {\n        p1.x = +((p1.x + p2.x) / 2).toFixed(3)\n        p2.x = p1.x\n      }\n    }\n\n    return new IIEdgePolyLine(points, polyline.edges[0].p1Decoration, polyline.edges.at(-1)!.p2Decoration, strokes[0]?.style)\n  }\n\n  buildArc(arc: TJIIXEdgeArc, strokes: IIStroke[]): IIEdgeArc\n  {\n    const center: TPoint = { x: convertMillimeterToPixel(arc.cx), y: convertMillimeterToPixel(arc.cy) }\n    const radiusX = convertMillimeterToPixel(arc.rx)\n    const radiusY = convertMillimeterToPixel(arc.ry)\n    return new IIEdgeArc(center, arc.startAngle, arc.sweepAngle, radiusX, radiusY, arc.phi, arc.startDecoration, arc.endDecoration, strokes[0]?.style)\n  }\n\n  convertEdge(edge: TJIIXEdgeElement, strokes: IIStroke[]): { symbol: TIIEdge, strokes: IIStroke[] } | undefined\n  {\n    switch (edge.kind) {\n      case JIIXEdgeKind.Line: {\n        const associatedStroke = strokes.filter(s => edge.items?.some(i => i[\"full-id\"] === s.id))\n        if (!associatedStroke.length) return\n        const uniqStrokes = associatedStroke.filter((a, i) => associatedStroke.findIndex((s) => a.id === s.id) === i)\n        const oiEdge = this.buildLine(edge, uniqStrokes)\n        return {\n          symbol: oiEdge,\n          strokes: uniqStrokes\n        }\n      }\n      case JIIXEdgeKind.Arc: {\n        const associatedStroke = strokes.filter(s => edge.items?.some(i => i[\"full-id\"] === s.id))\n        if (!associatedStroke.length) return\n        const uniqStrokes = associatedStroke.filter((a, i) => associatedStroke.findIndex((s) => a.id === s.id) === i)\n        const oiEdge = this.buildArc(edge, uniqStrokes)\n        return {\n          symbol: oiEdge,\n          strokes: uniqStrokes\n        }\n      }\n      case JIIXEdgeKind.PolyEdge: {\n        const associatedStroke = strokes.filter(s => edge.edges.flatMap(e => e.items)?.some(i => i![\"full-id\"] === s.id))\n        if (!associatedStroke.length) return\n        const uniqStrokes = associatedStroke.filter((a, i) => associatedStroke.findIndex((s) => a.id === s.id) === i)\n        const oiEdge = this.buildPolyEdge(edge, uniqStrokes)\n        return {\n          symbol: oiEdge,\n          strokes: uniqStrokes\n        }\n      }\n      default:\n        this.#logger.error(\"convertEdge\", `Conversion of Edge with kind equal to ${ JSON.stringify(edge) } is unknow`)\n        return\n    }\n  }\n\n  async apply(symbols: TIISymbol[] = []): Promise<void>\n  {\n    this.#logger.info(\"convert\")\n    if (!this.model.exports?.[\"application/vnd.myscript.jiix\"]) {\n      await this.editor.export([\"application/vnd.myscript.jiix\"])\n    }\n    this.editor.selector.removeSelectedGroup()\n    const jiix = this.model.exports?.[\"application/vnd.myscript.jiix\"] as TJIIXExport\n    if (jiix?.elements?.length) {\n      const strokesToConvert = this.editor.extractStrokesFromSymbols(symbols.length ? symbols : this.model.symbols)\n\n      const onlyText = !jiix.elements?.some(e => e.type !== \"Text\")\n      const conversionResults: { symbol: TIISymbol, strokes: IIStroke[] }[] = []\n      jiix.elements.forEach(el =>\n      {\n        switch (el.type) {\n          case \"Text\": {\n            const conversion = this.convertText(el, strokesToConvert, onlyText)\n            if (conversion) {\n              conversionResults.push(...conversion)\n            }\n            break\n          }\n          case \"Node\": {\n            const conversion = this.convertNode(el, strokesToConvert)\n            if (conversion) {\n              conversionResults.push(conversion)\n            }\n            break\n          }\n          case \"Edge\": {\n            const conversion = this.convertEdge(el, strokesToConvert)\n            if (conversion) {\n              conversionResults.push(conversion)\n            }\n            break\n          }\n          default: {\n            this.#logger.warn(\"buildConversions\", `Unknow jiix element type: ${ el.type }`)\n          }\n        }\n      })\n\n      this.editor.addSymbols(conversionResults.map(cs => cs.symbol), false)\n      this.editor.removeSymbols(conversionResults.flatMap(cs => cs.strokes.map(s => s.id)), false)\n      this.editor.history.push(this.model, { added: conversionResults.map(c => c.symbol), erased: conversionResults.flatMap(cs => cs.strokes) })\n    }\n  }\n}\n", "import { ResizeDirection, SvgElementRole } from \"../Constants\"\nimport { InteractiveInkEditor } from \"../editor/InteractiveInkEditor\"\nimport { LoggerCategory, LoggerManager } from \"../logger\"\nimport { IIModel } from \"../model\"\nimport\n{\n  Box,\n  EdgeKind,\n  IIStroke,\n  IISymbolGroup,\n  IIText,\n  ShapeKind,\n  SymbolType,\n  TIIEdge,\n  TIIShape,\n  TIISymbol,\n  TPoint,\n  TIIRecognized,\n  RecognizedKind\n} from \"../symbol\"\n\n/**\n * @group Manager\n */\nexport class IIResizeManager\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.TRANSFORMER)\n  editor: InteractiveInkEditor\n\n  interactElementsGroup?: SVGElement\n  direction!: ResizeDirection\n  boundingBox!: Box\n  transformOrigin!: TPoint\n  keepRatio = false\n\n  constructor(editor: InteractiveInkEditor)\n  {\n    this.#logger.info(\"constructor\")\n    this.editor = editor\n  }\n\n  get model(): IIModel\n  {\n    return this.editor.model\n  }\n\n  protected applyToStroke(stroke: IIStroke, origin: TPoint, scaleX: number, scaleY: number): IIStroke\n  {\n    this.#logger.debug(\"applyToStroke\", { stroke, origin, scaleX, scaleY })\n    stroke.pointers.forEach(p =>\n    {\n      p.x = +(origin.x + scaleX * (p.x - origin.x)).toFixed(3)\n      p.y = +(origin.y + scaleY * (p.y - origin.y)).toFixed(3)\n    })\n    return stroke\n  }\n\n  protected applyToShape(shape: TIIShape, origin: TPoint, scaleX: number, scaleY: number): TIIShape\n  {\n    this.#logger.debug(\"applyToShape\", { shape, origin, scaleX, scaleY })\n    switch (shape.kind) {\n      case ShapeKind.Ellipse: {\n        const cosPhi = Math.cos(shape.orientation)\n        const sinPhi = Math.sin(shape.orientation)\n        shape.center.x = +(shape.center.x + ((scaleX - 1) * cosPhi + (scaleY - 1) * sinPhi) * (shape.center.x - origin.x)).toFixed(3)\n        shape.center.y = +(shape.center.y + ((scaleX - 1) * -sinPhi + (scaleY - 1) * cosPhi) * (shape.center.y - origin.y)).toFixed(3)\n        shape.radiusX = +(Math.abs(shape.radiusX * (scaleX * cosPhi - scaleY * sinPhi))).toFixed(3)\n        shape.radiusY = +(Math.abs(shape.radiusY * (scaleX * sinPhi + scaleY * cosPhi))).toFixed(3)\n        return shape\n      }\n      case ShapeKind.Circle: {\n        shape.radius = +(shape.radius * (scaleX + scaleY) / 2).toFixed(3)\n        shape.center.x = +(origin.x + scaleX * (shape.center.x - origin.x)).toFixed(3)\n        shape.center.y = +(origin.y + scaleY * (shape.center.y - origin.y)).toFixed(3)\n        return shape\n      }\n      case ShapeKind.Polygon: {\n        shape.points.forEach(p =>\n        {\n          p.x = +(origin.x + scaleX * (p.x - origin.x)).toFixed(3)\n          p.y = +(origin.y + scaleY * (p.y - origin.y)).toFixed(3)\n        })\n        return shape\n      }\n      default:\n        throw new Error(`Can't apply resize on shape, kind unknow: ${ JSON.stringify(shape) }`)\n    }\n  }\n\n  protected applyToEdge(edge: TIIEdge, origin: TPoint, scaleX: number, scaleY: number): TIIEdge\n  {\n    this.#logger.debug(\"applyToEdge\", { edge, origin, scaleX, scaleY })\n    switch (edge.kind) {\n      case EdgeKind.Arc: {\n        const cosPhi = Math.cos(edge.phi)\n        const sinPhi = Math.sin(edge.phi)\n        edge.center.x = +(edge.center.x + ((scaleX - 1) * cosPhi + (scaleY - 1) * sinPhi) * (edge.center.x - origin.x)).toFixed(3)\n        edge.center.y = +(edge.center.y + ((scaleX - 1) * -sinPhi + (scaleY - 1) * cosPhi) * (edge.center.y - origin.y)).toFixed(3)\n        edge.radiusX = +(edge.radiusX * Math.abs(scaleX * cosPhi + scaleY * sinPhi)).toFixed(3)\n        edge.radiusY = +(edge.radiusY * Math.abs(scaleX * sinPhi + scaleY * cosPhi)).toFixed(3)\n\n        if (scaleX < 0) {\n          edge.startAngle = +(Math.PI - edge.startAngle).toFixed(3)\n          edge.sweepAngle *= -1\n        }\n        else if (scaleY < 0) {\n          edge.sweepAngle *= -1\n        }\n        return edge\n      }\n      case EdgeKind.Line: {\n        edge.start.x = +(origin.x + scaleX * (edge.start.x - origin.x)).toFixed(3)\n        edge.start.y = +(origin.y + scaleY * (edge.start.y - origin.y)).toFixed(3)\n        edge.end.x = +(origin.x + scaleX * (edge.end.x - origin.x)).toFixed(3)\n        edge.end.y = +(origin.y + scaleY * (edge.end.y - origin.y)).toFixed(3)\n        return edge\n      }\n      case EdgeKind.PolyEdge: {\n        edge.points.forEach(p =>\n        {\n          p.x = +(origin.x + scaleX * (p.x - origin.x)).toFixed(3)\n          p.y = +(origin.y + scaleY * (p.y - origin.y)).toFixed(3)\n          return p\n        })\n        return edge\n      }\n      default:\n        throw new Error(`Can't apply resize on edge, kind unknow: ${ JSON.stringify(edge) }`)\n    }\n  }\n\n  protected applyOnText(text: IIText, origin: TPoint, scaleX: number, scaleY: number): IIText\n  {\n    text.point.x = +(origin.x + scaleX * (text.point.x - origin.x)).toFixed(3)\n    text.point.y = +(origin.y + scaleY * (text.point.y - origin.y)).toFixed(3)\n\n    text.chars.forEach(c =>\n    {\n      c.fontSize = +(c.fontSize * (scaleX + scaleY) / 2).toFixed(3)\n    })\n    return this.editor.texter.updateBounds(text)\n  }\n\n  protected applyOnGroup(group: IISymbolGroup, origin: TPoint, scaleX: number, scaleY: number): IISymbolGroup\n  {\n    group.children.forEach(s => this.applyToSymbol(s, origin, scaleX, scaleY))\n    return group\n  }\n\n  protected applyOnRecognizedSymbol(recognizedSymbol: TIIRecognized, origin: TPoint, scaleX: number, scaleY: number): TIIRecognized\n  {\n    recognizedSymbol.strokes.forEach(s => this.applyToStroke(s, origin, scaleX, scaleY))\n    if (recognizedSymbol.kind === RecognizedKind.Text) {\n      recognizedSymbol.xHeight *= scaleY\n    }\n    return recognizedSymbol\n  }\n\n  applyToSymbol(symbol: TIISymbol, origin: TPoint, scaleX: number, scaleY: number): TIISymbol\n  {\n    this.#logger.info(\"applyToSymbol\", { symbol, scaleX, scaleY })\n    switch (symbol.type) {\n      case SymbolType.Stroke:\n        return this.applyToStroke(symbol, origin, scaleX, scaleY)\n      case SymbolType.Shape:\n        return this.applyToShape(symbol, origin, scaleX, scaleY)\n      case SymbolType.Edge:\n        return this.applyToEdge(symbol, origin, scaleX, scaleY)\n      case SymbolType.Text:\n        return this.applyOnText(symbol, origin, scaleX, scaleY)\n      case SymbolType.Group:\n        return this.applyOnGroup(symbol, origin, scaleX, scaleY)\n      case SymbolType.Recognized:\n        return this.applyOnRecognizedSymbol(symbol, origin, scaleX, scaleY)\n      default:\n        throw new Error(`Can't apply resize on symbol, type unknow: ${ JSON.stringify(symbol) }`)\n    }\n  }\n\n  setTransformOrigin(id: string, originX: number, originY: number): void\n  {\n    this.editor.renderer.setAttribute(id, \"transform-origin\", `${ originX }px ${ originY }px`)\n  }\n\n  scaleElement(id: string, sx: number, sy: number): void\n  {\n    this.#logger.info(\"scaleElement\", { id, sx, sy })\n    this.editor.renderer.setAttribute(id, \"transform\", `scale(${ sx },${ sy })`)\n  }\n\n  start(target: Element, origin: TPoint): void\n  {\n    this.#logger.info(\"start\", { target })\n    this.interactElementsGroup = (target.closest(`[role=${ SvgElementRole.InteractElementsGroup }]`) as unknown) as SVGGElement\n    this.direction = target.getAttribute(\"resize-direction\") as ResizeDirection\n\n    this.keepRatio = this.model.symbolsSelected.some(s => s.type === SymbolType.Text || (s.type === SymbolType.Shape && (s as TIIShape).kind === ShapeKind.Circle))\n\n    this.transformOrigin = origin\n    this.boundingBox = Box.createFromPoints(this.model.symbolsSelected.flatMap(s => s.vertices))\n    this.setTransformOrigin(this.interactElementsGroup!.id, this.transformOrigin.x, this.transformOrigin.y)\n    this.model.symbolsSelected.forEach(s =>\n    {\n      this.setTransformOrigin(s.id, this.transformOrigin.x, this.transformOrigin.y)\n    })\n  }\n\n  continue(point: TPoint): { scaleX: number, scaleY: number }\n  {\n    this.#logger.info(\"continue\", { point })\n    if (!this.interactElementsGroup) {\n      throw new Error(\"Can't resize, you must call start before\")\n    }\n    const localPoint = point\n    const horizontalResize = [\n      ResizeDirection.East,\n      ResizeDirection.NorthEast,\n      ResizeDirection.SouthEast,\n      ResizeDirection.West,\n      ResizeDirection.NorthWest,\n      ResizeDirection.SouthWest\n    ].includes(this.direction)\n    const verticalResize = [\n      ResizeDirection.North,\n      ResizeDirection.NorthEast,\n      ResizeDirection.NorthWest,\n      ResizeDirection.South,\n      ResizeDirection.SouthEast,\n      ResizeDirection.SouthWest\n    ].includes(this.direction)\n    const { x, y } = this.editor.snaps.snapResize(point, horizontalResize, verticalResize)\n    localPoint.x = x\n    localPoint.y = y\n\n    let deltaX = 0, deltaY = 0\n    if ([ResizeDirection.East, ResizeDirection.NorthEast, ResizeDirection.SouthEast].includes(this.direction)) {\n      deltaX = localPoint.x - this.boundingBox.xMax\n    }\n    else if ([ResizeDirection.West, ResizeDirection.NorthWest, ResizeDirection.SouthWest].includes(this.direction)) {\n      deltaX = this.boundingBox.xMin - localPoint.x\n    }\n\n    if ([ResizeDirection.North, ResizeDirection.NorthEast, ResizeDirection.NorthWest].includes(this.direction)) {\n      deltaY = this.boundingBox.yMin - localPoint.y\n    }\n    else if ([ResizeDirection.South, ResizeDirection.SouthEast, ResizeDirection.SouthWest].includes(this.direction)) {\n      deltaY = localPoint.y - this.boundingBox.yMax\n    }\n\n    let scaleX = this.boundingBox.width ? 1 + (deltaX / this.boundingBox.width) : 1\n    let scaleY = this.boundingBox.height ? 1 + (deltaY / this.boundingBox.height) : 1\n\n    if (this.keepRatio) {\n      if ([ResizeDirection.North, ResizeDirection.South].includes(this.direction)) {\n        scaleX = scaleY\n      }\n      else if ([ResizeDirection.East, ResizeDirection.West].includes(this.direction)) {\n        scaleY = scaleX\n      }\n      else {\n        scaleX = Math.max(scaleX, scaleY)\n        scaleY = scaleX\n      }\n    }\n    this.scaleElement(this.interactElementsGroup.id, scaleX, scaleY)\n    this.model.symbolsSelected.forEach(s =>\n    {\n      this.scaleElement(s.id, scaleX, scaleY)\n    })\n    return {\n      scaleX,\n      scaleY\n    }\n  }\n\n  async end(point: TPoint): Promise<void>\n  {\n    this.#logger.info(\"end\", { point })\n    const { scaleX, scaleY } = this.continue(point)\n    this.editor.snaps.clearSnapToElementLines()\n    const oldSymbols = this.model.symbolsSelected.map(s => s.clone())\n    this.model.symbolsSelected.forEach(s =>\n    {\n      this.applyToSymbol(s, this.transformOrigin, scaleX, scaleY)\n      this.editor.renderer.drawSymbol(s)\n      this.model.updateSymbol(s)\n    })\n\n    const strokesFromSymbols = this.editor.extractStrokesFromSymbols(this.model.symbolsSelected)\n    this.editor.recognizer.transformScale(strokesFromSymbols.map(s => s.id), scaleX, scaleY, this.transformOrigin.x, this.transformOrigin.y)\n    this.editor.history.push(this.model, { scale: [{ symbols: oldSymbols, origin: {...this.transformOrigin}, scaleX, scaleY }] })\n\n    this.interactElementsGroup = undefined\n    this.editor.svgDebugger.apply()\n  }\n}\n", "import { SvgElementRole } from \"../Constants\"\nimport { InteractiveInkEditor } from \"../editor/InteractiveInkEditor\"\nimport { LoggerCategory, LoggerManager } from \"../logger\"\nimport { IIModel } from \"../model\"\nimport\n{\n  Box,\n  EdgeKind,\n  IIStroke,\n  IISymbolGroup,\n  IIText,\n  TIIRecognized,\n  ShapeKind,\n  SymbolType,\n  TIIEdge,\n  TIIShape,\n  TIISymbol,\n  TPoint\n} from \"../symbol\"\nimport { computeAngleRadian, convertDegreeToRadian, convertRadianToDegree, computeRotatedPoint } from \"../utils\"\n\n/**\n * @group Manager\n */\nexport class IIRotationManager\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.TRANSFORMER)\n  editor: InteractiveInkEditor\n  interactElementsGroup?: SVGElement\n  center!: TPoint\n  origin!: TPoint\n\n  constructor(editor: InteractiveInkEditor)\n  {\n    this.#logger.info(\"constructor\")\n    this.editor = editor\n  }\n\n  get model(): IIModel\n  {\n    return this.editor.model\n  }\n\n  protected applyToStroke(stroke: IIStroke, center: TPoint, angleRad: number): IIStroke\n  {\n    stroke.pointers.forEach(p =>\n    {\n      const { x, y } = computeRotatedPoint(p, center, angleRad)\n      p.x = x\n      p.y = y\n    })\n    return stroke\n  }\n\n  protected applyToShape(shape: TIIShape, center: TPoint, angleRad: number): TIIShape\n  {\n    switch (shape.kind) {\n      case ShapeKind.Ellipse: {\n        shape.center = computeRotatedPoint(shape.center, center, angleRad)\n        shape.orientation = (shape.orientation + angleRad) % (2 * Math.PI)\n        return shape\n      }\n      case ShapeKind.Circle: {\n        shape.center = computeRotatedPoint(shape.center, center, angleRad)\n        return shape\n      }\n      case ShapeKind.Polygon: {\n        shape.points.forEach(p =>\n        {\n          const { x, y } = computeRotatedPoint(p, center, angleRad)\n          p.x = x\n          p.y = y\n        })\n        return shape\n      }\n      default:\n        throw new Error(`Can't apply rotate on shape, kind unknow: ${ JSON.stringify(shape) }`)\n    }\n  }\n\n  protected applyToEdge(edge: TIIEdge, center: TPoint, angleRad: number): TIIEdge\n  {\n    switch (edge.kind) {\n      case EdgeKind.Arc: {\n        edge.phi = (edge.phi - angleRad) % (2 * Math.PI)\n        edge.center = computeRotatedPoint(edge.center, center, angleRad)\n        return edge\n      }\n      case EdgeKind.Line: {\n        edge.start = computeRotatedPoint(edge.start, center, angleRad)\n        edge.end = computeRotatedPoint(edge.end, center, angleRad)\n        return edge\n      }\n      case EdgeKind.PolyEdge: {\n        edge.points = edge.points.map(p => computeRotatedPoint(p, center, angleRad))\n        return edge\n      }\n      default:\n        throw new Error(`Can't apply rotate on edge, kind unknow: ${ JSON.stringify(edge) }`)\n    }\n    return edge\n  }\n\n  protected applyOnText(text: IIText, center: TPoint, angleRad: number): IIText\n  {\n    text.rotation = {\n      degree: convertRadianToDegree(angleRad) + (text.rotation?.degree || 0),\n      center: center\n    }\n    return this.editor.texter.updateBounds(text)\n  }\n\n  protected applyOnGroup(group: IISymbolGroup, center: TPoint, angleRad: number): IISymbolGroup\n  {\n    group.children.forEach(s => this.applyToSymbol(s, center, angleRad))\n    return group\n  }\n\n  protected applyOnRecognizedSymbol(strokeText: TIIRecognized, center: TPoint, angleRad: number): TIIRecognized\n  {\n    strokeText.strokes.forEach(s => this.applyToStroke(s, center, angleRad))\n    return strokeText\n  }\n\n  applyToSymbol(symbol: TIISymbol, center: TPoint, angleRad: number): TIISymbol\n  {\n    switch (symbol.type) {\n      case SymbolType.Stroke:\n        return this.applyToStroke(symbol, center, angleRad)\n      case SymbolType.Shape:\n        return this.applyToShape(symbol, center, angleRad)\n      case SymbolType.Edge:\n        return this.applyToEdge(symbol, center, angleRad)\n      case SymbolType.Text:\n        return this.applyOnText(symbol, center, angleRad)\n      case SymbolType.Group:\n        return this.applyOnGroup(symbol, center, angleRad)\n      case SymbolType.Recognized:\n        return this.applyOnRecognizedSymbol(symbol, center, angleRad)\n      default:\n        throw new Error(`Can't apply rotate on symbol, type unknow: ${ JSON.stringify(symbol) }`)\n    }\n  }\n\n  setTransformOrigin(id: string, originX: number, originY: number): void\n  {\n    this.editor.renderer.setAttribute(id, \"transform-origin\", `${ originX }px ${ originY }px`)\n  }\n\n  rotateElement(id: string, degree: number): void\n  {\n    this.#logger.info(\"rotateElement\", { id, degree })\n    this.editor.renderer.setAttribute(id, \"transform\", `rotate(${ degree })`)\n  }\n\n  start(target: Element, origin: TPoint): void\n  {\n    this.#logger.info(\"start\", { target })\n    this.interactElementsGroup = (target.closest(`[role=${ SvgElementRole.InteractElementsGroup }]`) as unknown) as SVGGElement\n    const boundingBox = Box.createFromPoints(this.model.symbolsSelected.flatMap(s => s.vertices))\n\n    this.center = {\n      x: boundingBox.xMin + boundingBox.width / 2,\n      y: boundingBox.yMid\n    }\n    this.origin = origin\n    this.setTransformOrigin(this.interactElementsGroup.id, this.center.x, this.center.y)\n    this.model.symbolsSelected.forEach(s =>\n    {\n      this.setTransformOrigin(s.id, this.center.x, this.center.y)\n    })\n  }\n\n  continue(point: TPoint): number\n  {\n    this.#logger.info(\"continue\", { point })\n    if (!this.interactElementsGroup) {\n      throw new Error(\"Can't rotate, you must call start before\")\n    }\n    let angleDegree = Math.round(convertRadianToDegree(computeAngleRadian(this.origin, this.center, point)))\n\n    angleDegree = this.editor.snaps.snapRotation(angleDegree)\n\n    if (point.x - this.center.x < 0) {\n      angleDegree = 360 - angleDegree\n    }\n\n    this.rotateElement(this.interactElementsGroup.id, angleDegree)\n    this.model.symbolsSelected.forEach(s =>\n    {\n      this.rotateElement(s.id, angleDegree)\n    })\n    return angleDegree\n  }\n\n  async end(point: TPoint): Promise<void>\n  {\n    this.#logger.info(\"end\", { point })\n    const angleDegree = this.continue(point)\n    const angleRad = convertDegreeToRadian(angleDegree) % (2 * Math.PI)\n    const oldSymbols = this.model.symbolsSelected.map(s => s.clone())\n    this.model.symbolsSelected.forEach(s =>\n    {\n      this.applyToSymbol(s, this.center, angleRad)\n      this.editor.renderer.drawSymbol(s)\n      this.model.updateSymbol(s)\n    })\n    const strokesFromSymbols = this.editor.extractStrokesFromSymbols(this.model.symbolsSelected)\n    this.editor.recognizer.transformRotate(strokesFromSymbols.map(s => s.id), angleRad, this.center.x, this.center.y)\n    this.editor.history.push(this.model, { rotate: [{ symbols: oldSymbols, angle: angleRad, center: {...this.center}, }] })\n\n    this.interactElementsGroup = undefined\n    this.editor.svgDebugger.apply()\n  }\n}\n", "\n/**\n * @group Grabber\n */\nexport type TListenerConfiguration = {\n  capture: boolean\n  passive: boolean\n}\n\n/**\n * @group Grabber\n * @source\n */\nexport const DefaultListenerConfiguration: TListenerConfiguration = {\n  capture: false,\n  passive: true\n}\n\n/**\n * @group Grabber\n */\nexport type TGrabberConfiguration = {\n  listenerOptions: TListenerConfiguration\n  xyFloatPrecision: number\n  timestampFloatPrecision: number\n  delayLongTouch: number\n}\n\n/**\n * @group Grabber\n * @source\n */\nexport const DefaultGrabberConfiguration: TGrabberConfiguration = {\n  listenerOptions: DefaultListenerConfiguration,\n  xyFloatPrecision: 0,\n  timestampFloatPrecision: 0,\n  delayLongTouch: 500\n}\n", "import { TGrabberConfiguration } from \"./GrabberConfiguration\"\nimport { LoggerCategory, LoggerLevel, LoggerManager } from \"../logger\"\nimport { TPointer } from \"../symbol\"\n\nexport type PointerInfo = {\n  clientX: number,\n  clientY: number,\n  isPrimary: boolean,\n  type: string,\n  pointerType: string,\n  target: HTMLElement,\n  pointer: TPointer,\n  button: number,\n  buttons: number\n}\n\n/**\n * @group Grabber\n */\nexport class PointerEventGrabber\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.GRABBER)\n\n  protected configuration: TGrabberConfiguration\n  protected layerCapture!: HTMLElement\n  protected capturing: boolean = false\n  protected pointerType?: string\n  protected prevent = (e: Event) => e.preventDefault()\n\n  onPointerDown?: (info: PointerInfo) => void\n  onPointerMove?: (info: PointerInfo) => void\n  onPointerUp?: (info: PointerInfo) => void\n  onContextMenu?: (info: PointerInfo) => void\n\n  constructor(configuration: TGrabberConfiguration)\n  {\n    this.#logger.info(\"constructor\", { configuration })\n    this.configuration = configuration\n  }\n\n  protected roundFloat(oneFloat: number, requestedFloatPrecision: number): number\n  {\n    if (requestedFloatPrecision >= 0) {\n      const floatPrecision: number = Math.pow(10, requestedFloatPrecision)\n      return Math.round(oneFloat / floatPrecision) * floatPrecision\n    }\n    this.#logger.debug(\"roundFloat\", { oneFloat, requestedFloatPrecision })\n    return oneFloat\n  }\n\n  protected extractPointer(event: MouseEvent | TouchEvent): TPointer\n  {\n    let clientX: number, clientY: number\n    if (\"changedTouches\" in event) {\n      ({ clientX, clientY } = event.changedTouches[0])\n    } else {\n      ({ clientX, clientY } = event)\n    }\n    const rect: DOMRect = this.layerCapture.getBoundingClientRect()\n    const pointer = {\n      x: this.roundFloat(clientX - rect.left - this.layerCapture.clientLeft + this.layerCapture.scrollLeft, this.configuration.xyFloatPrecision),\n      y: this.roundFloat(clientY - rect.top - this.layerCapture.clientTop + this.layerCapture.scrollTop, this.configuration.xyFloatPrecision),\n      t: this.roundFloat(Date.now(), this.configuration.timestampFloatPrecision),\n      p: (event as PointerEvent).pressure,\n    }\n    this.#logger.debug(\"extractPointer\", { event, pointer })\n    return pointer\n  }\n\n  protected getPointerInfos(evt: PointerEvent): PointerInfo\n  {\n    return {\n      clientX: evt.clientX,\n      clientY: evt.clientY,\n      isPrimary: evt.isPrimary,\n      type: evt.type,\n      target: evt.target as HTMLElement,\n      pointerType: evt.pointerType,\n      pointer: this.extractPointer(evt),\n      button: evt.button,\n      buttons: evt.buttons\n    }\n  }\n\n  protected pointerDownHandler = (evt: PointerEvent) =>\n  {\n    const pointerInfo = this.getPointerInfos(evt)\n    this.#logger.debug(\"pointerDownHandler\", pointerInfo)\n\n    // exit if not a left click or multi-touch\n    if (pointerInfo.button !== 0 || evt.buttons !== 1) {\n      return\n    }\n    this.capturing = true\n    this.pointerType = evt.pointerType\n\n    if (this.#logger.level === LoggerLevel.INFO) {\n      this.#logger.info(\"pointerDownHandler\", pointerInfo)\n    }\n\n    if (this.onPointerDown) {\n      this.onPointerDown(pointerInfo)\n    }\n  }\n\n  protected pointerMoveHandler = (evt: PointerEvent) =>\n  {\n    const pointerInfo = this.getPointerInfos(evt)\n    this.#logger.debug(\"pointerMoveHandler\", pointerInfo)\n    if (this.capturing && this.pointerType === evt.pointerType) {\n      if (this.#logger.level === LoggerLevel.INFO) {\n        this.#logger.info(\"pointerMoveHandler\", pointerInfo)\n      }\n      if (this.onPointerMove) {\n        this.onPointerMove(pointerInfo)\n      }\n    }\n  }\n\n  protected pointerUpHandler = (evt: PointerEvent) =>\n  {\n    const pointerInfo = this.getPointerInfos(evt)\n    this.#logger.debug(\"pointerUpHandler\", pointerInfo)\n    if (this.capturing && this.pointerType === evt.pointerType) {\n      if (this.#logger.level === LoggerLevel.INFO) {\n        this.#logger.info(\"pointerUpHandler\", pointerInfo)\n      }\n      this.pointerType = undefined\n      this.capturing = false\n      if (this.onPointerUp) {\n        this.onPointerUp(pointerInfo)\n      }\n    }\n  }\n\n  protected pointerOutHandler = (evt: PointerEvent) =>\n  {\n    const pointerInfo = this.getPointerInfos(evt)\n    this.#logger.debug(\"pointerOutHandler\", pointerInfo)\n    if (this.capturing && this.pointerType === evt.pointerType && !this.layerCapture.contains(evt.target as HTMLElement)) {\n      if (this.#logger.level === LoggerLevel.INFO) {\n        this.#logger.info(\"pointerOutHandler\", pointerInfo)\n      }\n      this.pointerType = undefined\n      this.capturing = false\n      if (this.onPointerUp) {\n        this.onPointerUp(pointerInfo)\n      }\n    }\n  }\n\n  protected contextMenuHandler = (evt: MouseEvent) =>\n  {\n    const pointerInfo = this.getPointerInfos(evt as PointerEvent)\n    this.#logger.debug(\"contextMenuHandler\", pointerInfo)\n    if (evt.target && this.onContextMenu){\n      if (this.#logger.level === LoggerLevel.INFO) {\n        this.#logger.info(\"contextMenuHandler\", pointerInfo)\n      }\n      this.onContextMenu(pointerInfo)\n    }\n  }\n\n  stopPointerEvent(): void\n  {\n    this.capturing = false\n    this.pointerType = undefined\n  }\n\n  attach(layerCapture: HTMLElement)\n  {\n    this.#logger.info(\"attach\", { domElement: layerCapture })\n    if (this.layerCapture) {\n      this.detach()\n    }\n    this.layerCapture = layerCapture\n    // The touch-action CSS property prevents the input from continuing.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event\n    this.layerCapture.style.setProperty(\"touch-action\", \"none\")\n    this.layerCapture.addEventListener(\"pointerdown\", this.pointerDownHandler, this.configuration.listenerOptions)\n    this.layerCapture.addEventListener(\"pointermove\", this.pointerMoveHandler, this.configuration.listenerOptions)\n    this.layerCapture.addEventListener(\"pointerup\", this.pointerUpHandler, this.configuration.listenerOptions)\n    this.layerCapture.addEventListener(\"pointercancel\", this.pointerUpHandler, this.configuration.listenerOptions)\n    this.layerCapture.addEventListener(\"pointerleave\", this.pointerUpHandler, this.configuration.listenerOptions)\n    this.layerCapture.addEventListener(\"pointerout\", this.pointerOutHandler, this.configuration.listenerOptions)\n    this.layerCapture.addEventListener(\"contextmenu\", this.contextMenuHandler)\n  }\n\n  detach()\n  {\n    this.#logger.info(\"detach\")\n    this.layerCapture?.style.removeProperty(\"touch-action\")\n    this.layerCapture?.removeEventListener(\"pointerdown\", this.pointerDownHandler, this.configuration.listenerOptions)\n    this.layerCapture?.removeEventListener(\"pointermove\", this.pointerMoveHandler, this.configuration.listenerOptions)\n    this.layerCapture?.removeEventListener(\"pointerup\", this.pointerUpHandler, this.configuration.listenerOptions)\n    this.layerCapture?.removeEventListener(\"pointerleave\", this.pointerUpHandler, this.configuration.listenerOptions)\n    this.layerCapture?.removeEventListener(\"pointercancel\", this.pointerUpHandler, this.configuration.listenerOptions)\n    this.layerCapture?.removeEventListener(\"pointerout\", this.pointerOutHandler, this.configuration.listenerOptions)\n    this.layerCapture?.removeEventListener(\"contextmenu\", this.contextMenuHandler)\n  }\n}\n", "import { ResizeDirection, SELECTION_MARGIN, SvgElementRole } from \"../Constants\"\nimport { LoggerCategory, LoggerManager } from \"../logger\"\nimport { IIModel } from \"../model\"\nimport { Box, IIText, SymbolType, TBox, TIIEdge, TIISymbol, TPoint } from \"../symbol\"\nimport { IISVGRenderer, SVGBuilder } from \"../renderer\"\nimport { IIResizeManager } from \"./IIResizeManager\"\nimport { IIRotationManager } from \"./IIRotationManager\"\nimport { IITranslateManager } from \"./IITranslateManager\"\nimport { InteractiveInkEditor } from \"../editor/InteractiveInkEditor\"\nimport { PointerEventGrabber, PointerInfo } from \"../grabber\"\n\n/**\n * @group Manager\n */\nexport class IISelectionManager\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.SELECTION)\n  grabber: PointerEventGrabber\n  editor: InteractiveInkEditor\n\n  #selectingId = \"selecting-rect\"\n  startSelectionPoint?: TPoint\n  endSelectionPoint?: TPoint\n  selectedGroup?: SVGGElement\n\n  constructor(editor: InteractiveInkEditor)\n  {\n    this.#logger.info(\"constructor\")\n    this.editor = editor\n    this.grabber = new PointerEventGrabber(editor.configuration.grabber)\n    this.grabber.onPointerDown = this.start.bind(this)\n    this.grabber.onPointerMove = this.continue.bind(this)\n    this.grabber.onPointerUp = this.end.bind(this)\n    this.grabber.onContextMenu = this.onContextMenu.bind(this)\n  }\n\n  get model(): IIModel\n  {\n    return this.editor.model\n  }\n\n  get renderer(): IISVGRenderer\n  {\n    return this.editor.renderer\n  }\n\n  get rotator(): IIRotationManager\n  {\n    return this.editor.rotator\n  }\n\n  get translator(): IITranslateManager\n  {\n    return this.editor.translator\n  }\n\n  get resizer(): IIResizeManager\n  {\n    return this.editor.resizer\n  }\n\n  get selectionBox(): Box | undefined\n  {\n    if (this.startSelectionPoint && this.endSelectionPoint) {\n      return Box.createFromPoints([this.startSelectionPoint, this.endSelectionPoint])\n    }\n    return\n  }\n\n  attach(layer: HTMLElement): void\n  {\n    this.removeSelectedGroup()\n    this.grabber.attach(layer)\n  }\n\n  detach(): void\n  {\n    this.removeSelectedGroup()\n    this.grabber.detach()\n  }\n\n  drawSelectingRect(box: TBox): void\n  {\n    this.clearSelectingRect()\n    const attrs = {\n      id: this.#selectingId,\n      fill: \"transparent\",\n      stroke: \"grey\",\n      opacity: \"0.25\",\n    }\n    this.renderer.appendElement(SVGBuilder.createRect(box, attrs))\n  }\n\n  clearSelectingRect(): void\n  {\n    this.renderer.clearElements({ attrs: { id: this.#selectingId } })\n  }\n\n  protected getPoint(ev: PointerEvent): TPoint\n  {\n    const { clientLeft, scrollLeft, clientTop, scrollTop } = this.renderer.parent\n    const rect: DOMRect = this.renderer.parent.getBoundingClientRect()\n    return {\n      x: ev.clientX - rect.left - clientLeft + scrollLeft,\n      y: ev.clientY - rect.top - clientTop + scrollTop,\n    }\n  }\n\n  protected createTranslateRect(box: TBox): SVGRectElement\n  {\n    const attrs = {\n      role: SvgElementRole.Translate,\n      style: \"cursor:move\",\n      fill: \"transparent\",\n      stroke: \"transparent\",\n    }\n    const boxWithMarge: TBox = {\n      height: box.height,\n      width: box.width,\n      x: box.x,\n      y: box.y\n    }\n    const translateEl = SVGBuilder.createRect(boxWithMarge, attrs)\n    const handler = (ev: PointerEvent) =>\n    {\n      ev.preventDefault()\n      ev.stopPropagation()\n      this.translator.continue(this.getPoint(ev))\n    }\n    const endHandler = (ev: PointerEvent) =>\n    {\n      ev.preventDefault()\n      ev.stopPropagation()\n      this.translator.end(this.getPoint(ev))\n      this.renderer.layer.removeEventListener(\"pointermove\", handler)\n      this.renderer.layer.removeEventListener(\"pointercancel\", endHandler)\n      this.renderer.layer.removeEventListener(\"pointerleave\", endHandler)\n      this.renderer.layer.removeEventListener(\"pointerup\", endHandler)\n      this.renderer.layer.style.cursor = \"\"\n      this.resetSelectedGroup(this.model.symbolsSelected)\n    }\n\n    translateEl.addEventListener(\"pointerdown\", (ev) =>\n    {\n      if (ev.button !== 0 || ev.buttons !== 1) {\n        return\n      }\n      ev.preventDefault()\n      ev.stopPropagation()\n      this.hideInteractElements()\n      this.translator.start(ev.target as Element, this.getPoint(ev))\n      this.renderer.layer.addEventListener(\"pointermove\", handler)\n      this.renderer.layer.addEventListener(\"pointercancel\", endHandler)\n      this.renderer.layer.addEventListener(\"pointerleave\", endHandler)\n      this.renderer.layer.addEventListener(\"pointerup\", endHandler)\n\n      this.renderer.layer.style.cursor = \"move\"\n    })\n    return translateEl\n  }\n\n  protected createRotateGroup(box: TBox): SVGGElement\n  {\n    const group = SVGBuilder.createGroup({\n      role: SvgElementRole.Rotate,\n      \"vector-effect\": \"non-scaling-size\",\n      \"style\": \"cursor:pointer;\",\n      \"opacity\": \"1\",\n    })\n    const radius = 8\n    const center: TPoint = {\n      x: (box.x + box.width / 2),\n      y: box.y - 4 * SELECTION_MARGIN\n    }\n    const attrs1 = {\n      role: SvgElementRole.Rotate,\n      \"stroke-width\": \"2\",\n      \"stroke\": \"black\",\n      fill: \"white\",\n    }\n    group.appendChild(SVGBuilder.createCircle(center, radius, attrs1))\n\n    const attrs2 = {\n      role: SvgElementRole.Rotate,\n      fill: \"black\",\n    }\n\n    group.appendChild(SVGBuilder.createCircle(center, radius / 2, attrs2))\n    const attrs3 = {\n      role: SvgElementRole.Rotate,\n      stroke: \"black\",\n      \"stroke-width\": \"2\"\n    }\n    group.appendChild(SVGBuilder.createLine({ x: center.x, y: center.y + radius }, { x: center.x, y: box.y - SELECTION_MARGIN }, attrs3))\n\n    const handler = (ev: PointerEvent) =>\n    {\n      ev.preventDefault()\n      ev.stopPropagation()\n      this.rotator.continue(this.getPoint(ev))\n    }\n    const endHandler = (ev: PointerEvent) =>\n    {\n      ev.preventDefault()\n      ev.stopPropagation()\n      this.rotator.end(this.getPoint(ev))\n      this.renderer.layer.removeEventListener(\"pointermove\", handler)\n      this.renderer.layer.removeEventListener(\"pointercancel\", endHandler)\n      this.renderer.layer.removeEventListener(\"pointerleave\", endHandler)\n      this.renderer.layer.removeEventListener(\"pointerup\", endHandler)\n      this.resetSelectedGroup(this.model.symbolsSelected)\n    }\n\n    group.addEventListener(\"pointerdown\", (ev) =>\n    {\n      if (ev.button !== 0 || ev.buttons !== 1) {\n        return\n      }\n      ev.preventDefault()\n      ev.stopPropagation()\n      this.hideInteractElements()\n      this.rotator.start(ev.target as Element, this.getPoint(ev))\n      this.renderer.layer.addEventListener(\"pointermove\", handler)\n      this.renderer.layer.addEventListener(\"pointercancel\", endHandler)\n      this.renderer.layer.addEventListener(\"pointerleave\", endHandler)\n      this.renderer.layer.addEventListener(\"pointerup\", endHandler)\n    })\n    return group\n  }\n\n  protected createResizeGroup(box: TBox): SVGGElement\n  {\n    const group = SVGBuilder.createGroup({\n      role: SvgElementRole.Resize,\n      \"vector-effect\": \"non-scaling-size\",\n      \"stroke-width\": \"4\",\n      \"stroke\": \"#3e68ff\",\n    })\n    const P_NW: TPoint = { x: box.x - SELECTION_MARGIN, y: box.y - SELECTION_MARGIN }\n    const P_NE: TPoint = { x: box.x + box.width + SELECTION_MARGIN, y: box.y - SELECTION_MARGIN }\n    const P_SE: TPoint = { x: box.x + box.width + SELECTION_MARGIN, y: box.y + box.height + SELECTION_MARGIN }\n    const P_SW: TPoint = { x: box.x - SELECTION_MARGIN, y: box.y + box.height + SELECTION_MARGIN }\n\n    const bindEl = (el: SVGElement, transformOrigin: TPoint, cursor: string) =>\n    {\n      const handler = (ev: PointerEvent) =>\n      {\n        ev.preventDefault()\n        ev.stopPropagation()\n        this.resizer.continue(this.getPoint(ev))\n      }\n      const endHandler = (ev: PointerEvent) =>\n      {\n        ev.preventDefault()\n        ev.stopPropagation()\n        this.resizer.end(this.getPoint(ev))\n        this.renderer.layer.removeEventListener(\"pointermove\", handler)\n        this.renderer.layer.removeEventListener(\"pointercancel\", endHandler)\n        this.renderer.layer.removeEventListener(\"pointerleave\", endHandler)\n        this.renderer.layer.removeEventListener(\"pointerup\", endHandler)\n\n        this.renderer.layer.style.cursor = \"\"\n        this.resetSelectedGroup(this.model.symbolsSelected)\n      }\n\n      el.addEventListener(\"pointerdown\", (ev) =>\n      {\n        if (ev.button !== 0 || ev.buttons !== 1) {\n          return\n        }\n        ev.preventDefault()\n        ev.stopPropagation()\n        this.hideInteractElements()\n        this.renderer.layer.style.cursor = cursor\n        this.resizer.start(ev.target as Element, transformOrigin)\n        this.renderer.layer.addEventListener(\"pointermove\", handler)\n        this.renderer.layer.addEventListener(\"pointercancel\", endHandler)\n        this.renderer.layer.addEventListener(\"pointerleave\", endHandler)\n        this.renderer.layer.addEventListener(\"pointerup\", endHandler)\n      })\n    }\n\n    const sideResizeDefs = [\n      { direction: ResizeDirection.North, p1: P_NW, p2: P_NE, transformOrigin: { x: box.x + box.width / 2, y: box.y + box.height } },\n      { direction: ResizeDirection.East, p1: P_NE, p2: P_SE, transformOrigin: { x: box.x, y: box.y + box.height / 2 } },\n      { direction: ResizeDirection.South, p1: P_SW, p2: P_SE, transformOrigin: { x: box.x + box.width / 2, y: box.y } },\n      { direction: ResizeDirection.West, p1: P_NW, p2: P_SW, transformOrigin: { x: box.x + box.width, y: box.y + box.height / 2 } },\n    ]\n    sideResizeDefs.forEach(def =>\n    {\n      const attrs = {\n        role: SvgElementRole.Resize,\n        \"resize-direction\": def.direction,\n        \"transform-origin\": JSON.stringify(def.transformOrigin),\n        style: `cursor:${ def.direction };`\n      }\n      const lineResize = SVGBuilder.createLine(def.p1, def.p2, attrs)\n      bindEl(lineResize, def.transformOrigin, def.direction)\n      group.appendChild(lineResize)\n    })\n    const cornerResizeDefs = [\n      { direction: ResizeDirection.NorthWest, p: P_NW, transformOrigin: { x: box.x + box.width, y: box.y + box.height } },\n      { direction: ResizeDirection.NorthEast, p: P_NE, transformOrigin: { x: box.x, y: box.y + box.height } },\n      { direction: ResizeDirection.SouthEast, p: P_SE, transformOrigin: { x: box.x, y: box.y } },\n      { direction: ResizeDirection.SouthWest, p: P_SW, transformOrigin: { x: box.x + box.width, y: box.y } },\n    ]\n    cornerResizeDefs.forEach(def =>\n    {\n      const attrs = {\n        \"stroke-width\": \"4\",\n        role: SvgElementRole.Resize,\n        \"resize-direction\": def.direction,\n        \"transform-origin\": JSON.stringify(def.transformOrigin),\n        transform: \"scale(1, 1)\",\n        fill: \"white\",\n        style: `cursor:${ def.direction };`\n      }\n      const cornerResize = SVGBuilder.createCircle(def.p, 5, attrs)\n      bindEl(cornerResize, def.transformOrigin, def.direction)\n      group.appendChild(cornerResize)\n    })\n    return group\n  }\n\n  protected createInteractElementsGroup(symbols: TIISymbol[]): SVGGElement | undefined\n  {\n    this.#logger.info(\"createInteractElementsGroup\", { symbols })\n\n    if (!symbols.length) return\n\n    const symbolElementMap = symbols.map(s =>\n    {\n      return {\n        symbol: s,\n        element: this.renderer.getElementById(s.id),\n      }\n    })\n\n    const box1 = Box.createFromBoxes(symbols.map(s =>\n    {\n      return {\n        x: s.bounds.x - (s.style.width || 1),\n        y: s.bounds.y - (s.style.width || 1),\n        height: s.bounds.height + (s.style.width || 1) * 2,\n        width: s.bounds.width + (s.style.width || 1) * 2,\n      }\n    }))\n\n    const box2 = Box.createFromPoints(symbols.flatMap(s => s.vertices))\n    const box = Box.createFromBoxes([box1, box2])\n\n    const attrs = {\n      id: `selected-${ Date.now() }`,\n      role: SvgElementRole.InteractElementsGroup,\n    }\n    const surroundGroup = SVGBuilder.createGroup(attrs)\n    surroundGroup.appendChild(this.createTranslateRect(box))\n    surroundGroup.appendChild(this.createResizeGroup(box))\n    surroundGroup.appendChild(this.createRotateGroup(box))\n    const SURROUND_ATTRS = {\n      style: \"pointer-events: none\",\n      fill: \"transparent\",\n      stroke: \"#3e68ff\",\n      \"stroke-width\": \"1\",\n      \"stroke-dasharray\": \"4\",\n      \"vector-effect\": \"non-scaling-size\",\n      transform: \"rotate(0, 0, 0)\"\n    }\n    symbolElementMap.forEach(s =>\n    {\n      if (s.element) {\n        const bounds: TBox = {\n          x: s.symbol.bounds.x - (s.symbol.style.width || 1),\n          y: s.symbol.bounds.y - (s.symbol.style.width || 1),\n          height: s.symbol.bounds.height + (s.symbol.style.width || 1) * 2,\n          width: s.symbol.bounds.width + (s.symbol.style.width || 1) * 2,\n        }\n        if (s.symbol.type === SymbolType.Text) {\n          const t = s.symbol as IIText\n          SURROUND_ATTRS.transform = `rotate(${ t.rotation?.degree || 0 }, ${ t.rotation?.center.x || 0 }, ${ t.rotation?.center.y || 0 })`\n        }\n        else {\n          SURROUND_ATTRS.transform = \"rotate(0, 0, 0)\"\n        }\n        surroundGroup.prepend(SVGBuilder.createRect(bounds, SURROUND_ATTRS))\n      }\n    })\n    return surroundGroup\n  }\n\n  protected createEdgeResizeGroup(edge: TIIEdge): SVGGElement\n  {\n    const group = SVGBuilder.createGroup({\n      role: SvgElementRole.Resize,\n      \"vector-effect\": \"non-scaling-size\",\n      \"stroke-width\": \"4\",\n      \"stroke\": \"#3e68ff\",\n    })\n\n    const radius = 5\n    const attrs = {\n      role: SvgElementRole.Resize,\n      \"stroke-width\": \"4\",\n      \"stroke\": \"#3e68ff\",\n      fill: \"white\",\n      style: `cursor:grab;`\n    }\n    const bindEl = (el: SVGCircleElement, pointIndex: number) =>\n    {\n      const handler = (ev: PointerEvent) =>\n      {\n        ev.preventDefault()\n        ev.stopPropagation()\n        const point = this.getPoint(ev)\n        const { x, y } = this.editor.snaps.snapResize(point)\n        edge.vertices[pointIndex].x = x\n        edge.vertices[pointIndex].y = y\n        this.model.updateSymbol(edge)\n        this.renderer.drawSymbol(edge)\n      }\n      const endHandler = (ev: PointerEvent) =>\n      {\n        ev.preventDefault()\n        ev.stopPropagation()\n        const point = this.getPoint(ev)\n        const { x, y } = this.editor.snaps.snapResize(point)\n        edge.vertices[pointIndex].x = x\n        edge.vertices[pointIndex].y = y\n        this.renderer.layer.style.cursor = \"\"\n        this.editor.updateSymbol(edge)\n        this.renderer.layer.removeEventListener(\"pointermove\", handler)\n        this.renderer.layer.removeEventListener(\"pointercancel\", endHandler)\n        this.renderer.layer.removeEventListener(\"pointerleave\", endHandler)\n        this.renderer.layer.removeEventListener(\"pointerup\", endHandler)\n        this.editor.snaps.clearSnapToElementLines()\n        this.resetSelectedGroup(this.model.symbolsSelected)\n      }\n\n      el.addEventListener(\"pointerdown\", (ev) =>\n      {\n        if (ev.button !== 0 || ev.buttons !== 1) {\n          return\n        }\n        this.renderer.layer.style.cursor = \"grabbing\"\n        this.hideInteractElements()\n        ev.preventDefault()\n        ev.stopPropagation()\n        this.renderer.layer.addEventListener(\"pointermove\", handler)\n        this.renderer.layer.addEventListener(\"pointercancel\", endHandler)\n        this.renderer.layer.addEventListener(\"pointerleave\", endHandler)\n        this.renderer.layer.addEventListener(\"pointerup\", endHandler)\n      })\n    }\n    edge.vertices.forEach((p, i) =>\n    {\n      const pointEl = SVGBuilder.createCircle(p, radius, attrs)\n      bindEl(pointEl, i)\n      group.appendChild(pointEl)\n    })\n\n    return group\n  }\n\n  protected createInteractEdgeGroup(edge: TIIEdge): SVGGElement | undefined\n  {\n    this.#logger.info(\"createInteractEdgeGroup\", { edge })\n    const attrs = {\n      id: `selected-${ Date.now() }`,\n      role: SvgElementRole.InteractElementsGroup,\n    }\n    const surroundGroup = SVGBuilder.createGroup(attrs)\n    surroundGroup.appendChild(this.createTranslateRect(edge.bounds))\n    surroundGroup.appendChild(this.createEdgeResizeGroup(edge.clone()))\n    return surroundGroup\n  }\n\n  drawSelectedGroup(symbols: TIISymbol[]): void\n  {\n    if (!symbols.length) return\n    if (symbols.length === 1 && symbols[0].type === SymbolType.Edge) {\n      this.selectedGroup = this.createInteractEdgeGroup(symbols[0] as TIIEdge)\n    }\n    else {\n      this.selectedGroup = this.createInteractElementsGroup(symbols)\n    }\n    if (this.selectedGroup) {\n      this.renderer.layer.appendChild(this.selectedGroup)\n      const groupBox = this.selectedGroup.getBBox()\n      this.editor.menu.context.position.x = groupBox.x + groupBox.width / 2 - this.renderer.parent.clientLeft\n      this.editor.menu.context.position.y = groupBox.y + groupBox.height - this.renderer.parent.clientTop\n      this.editor.menu.context.show()\n    }\n    this.editor.menu.update()\n  }\n\n  resetSelectedGroup(symbols: TIISymbol[]): void\n  {\n    this.#logger.info(\"resetSelectedGroup\", { symbols })\n    this.removeSelectedGroup()\n    this.drawSelectedGroup(symbols)\n  }\n\n  removeSelectedGroup(): void\n  {\n    this.#logger.info(\"removeSelectedGroup\")\n    this.editor.menu.context.hide()\n    this.selectedGroup?.remove()\n    this.selectedGroup = undefined\n  }\n\n  hideInteractElements(): void\n  {\n    this.editor.menu.context.hide()\n    const query = `[role=${ SvgElementRole.Resize }],[role=${ SvgElementRole.Rotate }],[role=${ SvgElementRole.Translate }]`\n    this.selectedGroup?.querySelectorAll(query)\n      .forEach(el =>\n      {\n        el.setAttribute(\"visibility\", \"hidden\")\n      })\n  }\n\n  start(info: PointerInfo): void\n  {\n    this.removeSelectedGroup()\n    this.startSelectionPoint = info.pointer\n    this.endSelectionPoint = info.pointer\n    this.drawSelectingRect(this.selectionBox!)\n  }\n\n  continue(info: PointerInfo): TIISymbol[]\n  {\n    if (!this.startSelectionPoint) {\n      throw new Error(\"You need to call startSelectionByBox before\")\n    }\n    this.endSelectionPoint = info.pointer\n    const updatedSymbols: TIISymbol[] = []\n    this.model.symbols.forEach(s =>\n    {\n      if (s.selected !== s.overlaps(this.selectionBox!)) {\n        s.selected = s.overlaps(this.selectionBox!)\n        updatedSymbols.push(s)\n        this.renderer.drawSymbol(s)\n      }\n    })\n    this.drawSelectingRect(this.selectionBox!)\n    return updatedSymbols\n  }\n\n  end(info: PointerInfo): TIISymbol[]\n  {\n    const updatedSymbols = this.continue(info)\n    this.startSelectionPoint = undefined\n    this.endSelectionPoint = undefined\n    this.clearSelectingRect()\n    this.drawSelectedGroup(this.model.symbolsSelected)\n    this.editor.event.emitSelected(this.model.symbolsSelected)\n    this.editor.menu.style.update()\n    return updatedSymbols\n  }\n\n  protected async onContextMenu(info: PointerInfo): Promise<void>\n  {\n    let found = false\n    let currentEl = info.target as HTMLElement | null\n    const symbolTypesAllowed = [SymbolType.Edge.toString(), SymbolType.Shape.toString(), SymbolType.Stroke.toString(), SymbolType.Text.toString()]\n    while (currentEl && currentEl.tagName !== \"svg\" && !found) {\n      if (symbolTypesAllowed.includes(currentEl.getAttribute(\"type\") as string)) {\n        found = true\n      }\n      else {\n        currentEl = currentEl.parentElement\n      }\n    }\n    this.editor.unselectAll()\n    if (currentEl?.id) {\n      this.model.selectSymbol(currentEl.id)\n      this.renderer.drawSymbol(this.model.symbolsSelected[0])\n      this.drawSelectedGroup(this.model.symbolsSelected)\n      this.editor.updateLayerUI()\n    }\n    else {\n      this.editor.menu.context.position.x = info.pointer.x + this.renderer.parent.clientLeft\n      this.editor.menu.context.position.y = info.pointer.y + this.renderer.parent.clientTop\n      this.editor.menu.context.show()\n    }\n  }\n}\n", "import { LoggerCategory, LoggerManager } from \"../logger\"\nimport { IIModel } from \"../model\"\nimport { Box, IIText, SymbolType, TIISymbol, TIISymbolChar } from \"../symbol\"\nimport { IISVGRenderer } from \"../renderer\"\nimport { InteractiveInkEditor } from \"../editor/InteractiveInkEditor\"\n\n/**\n * @group Manager\n */\nexport class IITextManager\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.CONVERTER)\n  editor: InteractiveInkEditor\n\n  constructor(editor: InteractiveInkEditor)\n  {\n    this.#logger.info(\"constructor\")\n    this.editor = editor\n  }\n\n  get renderer(): IISVGRenderer\n  {\n    return this.editor.renderer\n  }\n\n  get rowHeight(): number\n  {\n    return this.editor.configuration.rendering.guides.gap\n  }\n\n  get model(): IIModel\n  {\n    return this.editor.model\n  }\n\n  protected drawSymbolHidden(text: IIText): SVGGElement\n  {\n    const clone = text.clone()\n    clone.id = \"text-to-measure\"\n    clone.chars.forEach(c => c.id += \"-to-measure\")\n    clone.decorators = []\n    this.renderer.layer.querySelector(`#${ clone.id }`)?.remove()\n    const el = this.renderer.buildElementFromSymbol(clone)!\n    el.setAttribute(\"visibility\", \"hidden\")\n    this.renderer.prependElement(el)\n    return el\n  }\n\n  setCharsBounds(text: IIText, textGroupEl: SVGGElement): IIText\n  {\n    const textEl = textGroupEl.querySelector(\"text\")\n    if (textEl) {\n      for (let i = 0; i < textEl.getNumberOfChars(); i++) {\n        const char = text.chars.at(i)\n        if (char) {\n          const ext = textEl.getExtentOfChar(i)\n          char.bounds = new Box(ext)\n        }\n      }\n    }\n    return text\n  }\n\n  setBounds(text: IIText): void\n  {\n    const element = this.drawSymbolHidden(text)\n    text.bounds = this.getElementBoundingBox(element)\n    this.setCharsBounds(text, element)\n  }\n\n  getElementBoundingBox(textElement: SVGElement): Box\n  {\n    return new Box(textElement.querySelector(\"text\")!.getBBox({ stroke: true, markers: true, clipped: true, fill: true }))\n  }\n\n  getBoundingBox(text: IIText): Box\n  {\n    const element = this.drawSymbolHidden(text)\n    return this.getElementBoundingBox(element)\n  }\n\n  getSpaceWidth(fontSize: number): number\n  {\n    const boundingBox = new Box({ height: 0, width: 0, x: 0, y: 0 })\n    const charSymbol: TIISymbolChar = {\n      id: `text-char-space`,\n      label: \"-\",\n      color: \"\",\n      fontSize,\n      fontWeight: \"normal\",\n      bounds: boundingBox\n    }\n    return this.getBoundingBox(new IIText([charSymbol], { x: 0, y: 0 }, boundingBox))?.width as number\n  }\n\n  updateBounds(textSymbol: IIText): IIText\n  {\n    this.setBounds(textSymbol)\n    this.model.updateSymbol(textSymbol)\n    return textSymbol\n  }\n\n  moveTextAfter(text: IIText, tx: number): TIISymbol[] | undefined\n  {\n    const row = this.model.getSymbolsByRowOrdered().find(r => r.rowIndex === this.model.getSymbolRowIndex(text))\n    if (row) {\n      const textsAfter = row.symbols.filter(s => s.type === SymbolType.Text && s.bounds.xMid > text.bounds.xMid) as IIText[]\n      textsAfter.forEach(symbol => {\n        symbol.point.x += tx\n        this.updateBounds(symbol)\n        this.model.updateSymbol(symbol)\n        this.renderer.drawSymbol(symbol)\n      })\n      return textsAfter\n    }\n    return\n  }\n}\n", "import { SvgElementRole } from \"../Constants\"\nimport { InteractiveInkEditor } from \"../editor/InteractiveInkEditor\"\nimport { LoggerCategory, LoggerManager } from \"../logger\"\nimport { IIModel } from \"../model\"\nimport\n{\n  EdgeKind,\n  IIStroke,\n  IIText,\n  IISymbolGroup,\n  ShapeKind,\n  SymbolType,\n  TIIEdge,\n  TIIShape,\n  TIISymbol,\n  TPoint,\n  TIIRecognized,\n  RecognizedKind\n} from \"../symbol\"\n\n/**\n * @group Manager\n */\nexport class IITranslateManager\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.TRANSFORMER)\n  editor: InteractiveInkEditor\n  interactElementsGroup?: SVGElement\n  transformOrigin!: TPoint\n\n  constructor(editor: InteractiveInkEditor)\n  {\n    this.#logger.info(\"constructor\")\n    this.editor = editor\n  }\n\n  get model(): IIModel\n  {\n    return this.editor.model\n  }\n\n  protected applyToStroke(stroke: IIStroke, tx: number, ty: number): IIStroke\n  {\n    stroke.pointers.forEach(p =>\n    {\n      p.x += tx\n      p.y += ty\n    })\n    return stroke\n  }\n\n  protected applyToShape(shape: TIIShape, tx: number, ty: number): TIIShape\n  {\n    switch (shape.kind) {\n      case ShapeKind.Ellipse:\n      case ShapeKind.Circle: {\n        shape.center.x += tx\n        shape.center.y += ty\n        return shape\n      }\n      case ShapeKind.Polygon: {\n        shape.points.forEach(p =>\n        {\n          p.x += tx\n          p.y += ty\n        })\n        return shape\n      }\n      default:\n        throw new Error(`Can't apply translate on shape, kind unknow: ${ JSON.stringify(shape) }`)\n    }\n  }\n\n  protected applyToEdge(edge: TIIEdge, tx: number, ty: number): TIIEdge\n  {\n    switch (edge.kind) {\n      case EdgeKind.Arc: {\n        edge.center.x += tx\n        edge.center.y += ty\n        return edge\n      }\n      case EdgeKind.Line: {\n        edge.start.x += tx\n        edge.start.y += ty\n        edge.end.x += tx\n        edge.end.y += ty\n        return edge\n      }\n      case EdgeKind.PolyEdge: {\n        edge.points.forEach(p =>\n        {\n          p.x += tx\n          p.y += ty\n        })\n        return edge\n      }\n    }\n\n    return edge\n  }\n\n  protected applyOnText(text: IIText, tx: number, ty: number): IIText\n  {\n    if (text.rotation) {\n      text.rotation.center = { x: text.rotation.center.x + tx, y: text.rotation.center.y + ty }\n    }\n    text.point.x += tx\n    text.point.y += ty\n    return this.editor.texter.updateBounds(text)\n  }\n\n  protected applyOnGroup(group: IISymbolGroup, tx: number, ty: number): IISymbolGroup\n  {\n    group.children.forEach(s => this.applyToSymbol(s, tx, ty))\n    return group\n  }\n\n  protected applyOnRecognizedSymbol(recognizedSymbol: TIIRecognized, tx: number, ty: number): TIIRecognized\n  {\n    recognizedSymbol.strokes.forEach(s => this.applyToStroke(s, tx, ty))\n    if (recognizedSymbol.kind === RecognizedKind.Text) {\n      recognizedSymbol.baseline += ty\n    }\n    return recognizedSymbol\n  }\n\n  applyToSymbol(symbol: TIISymbol, tx: number, ty: number): TIISymbol\n  {\n    this.#logger.info(\"applyToSymbol\", { symbol, tx, ty })\n    switch (symbol.type) {\n      case SymbolType.Stroke:\n        return this.applyToStroke(symbol, tx, ty)\n      case SymbolType.Shape:\n        return this.applyToShape(symbol, tx, ty)\n      case SymbolType.Edge:\n        return this.applyToEdge(symbol, tx, ty)\n      case SymbolType.Text:\n        return this.applyOnText(symbol, tx, ty)\n      case SymbolType.Group:\n        return this.applyOnGroup(symbol, tx, ty)\n      case SymbolType.Recognized:\n        return this.applyOnRecognizedSymbol(symbol, tx, ty)\n      default:\n        throw new Error(`Can't apply translate on symbol, type unknow: ${ JSON.stringify(symbol) }`)\n    }\n  }\n\n  translate(symbols: TIISymbol[], tx: number, ty: number, addToHistory = true): Promise<void>\n  {\n    this.#logger.info(\"translate\", { symbols, tx, ty })\n    symbols.forEach(s =>\n    {\n      this.applyToSymbol(s, tx, ty)\n      this.model.updateSymbol(s)\n      this.editor.renderer.drawSymbol(s)\n    })\n    if (addToHistory) {\n      this.editor.history.push(this.model, { translate: [{ symbols: this.model.symbolsSelected, tx, ty }] })\n    }\n    const strokes = this.editor.extractStrokesFromSymbols(symbols)\n    return this.editor.recognizer.transformTranslate(strokes.map(s => s.id), tx, ty)\n  }\n\n  translateElement(id: string, tx: number, ty: number): void\n  {\n    this.#logger.info(\"translateElement\", { id, tx, ty })\n    this.editor.renderer.setAttribute(id, \"transform\", `translate(${ tx },${ ty })`)\n  }\n\n  start(target: Element, origin: TPoint): void\n  {\n    this.#logger.info(\"start\", { origin })\n    this.interactElementsGroup = (target.closest(`[role=${ SvgElementRole.InteractElementsGroup }]`) as unknown) as SVGGElement\n    this.transformOrigin = origin\n  }\n\n  continue(point: TPoint): { tx: number, ty: number }\n  {\n    this.#logger.info(\"continue\", { point })\n    if (!this.interactElementsGroup) {\n      throw new Error(\"Can't translate, you must call start before\")\n    }\n\n    let tx = point.x - this.transformOrigin.x\n    let ty = point.y - this.transformOrigin.y\n\n    const nudge = this.editor.snaps.snapTranslate(tx, ty)\n    tx = nudge.x\n    ty = nudge.y\n\n    this.translateElement(this.interactElementsGroup.id as string, tx, ty)\n    this.model.symbolsSelected.forEach(s =>\n    {\n      this.translateElement(s.id as string, tx, ty)\n    })\n    return {\n      tx,\n      ty\n    }\n  }\n\n  async end(point: TPoint): Promise<void>\n  {\n    this.#logger.info(\"end\", { point })\n    const { tx, ty } = this.continue(point)\n    this.editor.snaps.clearSnapToElementLines()\n    this.translate(this.model.symbolsSelected, tx, ty)\n\n    this.interactElementsGroup = undefined\n    this.editor.svgDebugger.apply()\n  }\n\n}\n", "import { SELECTION_MARGIN, EditorWriteTool } from \"../Constants\"\nimport { TGesture } from \"../gesture\"\nimport { LoggerCategory, LoggerManager } from \"../logger\"\nimport { IIModel } from \"../model\"\nimport\n{\n  EdgeDecoration,\n  EdgeKind,\n  IIEdgeLine,\n  IIShapePolygon,\n  IIShapeCircle,\n  IIShapeEllipse,\n  IIStroke,\n  SymbolType,\n  TIIEdge,\n  TIISymbol,\n  TPoint,\n  TPointer\n} from \"../symbol\"\nimport { RecognizerWebSocket } from \"../recognizer\"\nimport { IISVGRenderer } from \"../renderer\"\nimport { TStyle } from \"../style\"\nimport { IIHistoryManager } from \"../history\"\nimport { IIGestureManager } from \"../gesture/IIGestureManager\"\nimport { IISnapManager } from \"../snap/IISnapManager\"\nimport { InteractiveInkEditor } from \"../editor/InteractiveInkEditor\"\nimport { PointerEventGrabber, PointerInfo } from \"../grabber\"\n\n\n/**\n * @group Manager\n */\nexport class IIWriteManager\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.WRITE)\n  grabber: PointerEventGrabber\n  editor: InteractiveInkEditor\n\n  #tool: EditorWriteTool = EditorWriteTool.Pencil\n  detectGesture: boolean = true\n\n  currentSymbolOrigin?: TPoint\n\n  constructor(editor: InteractiveInkEditor)\n  {\n    this.#logger.info(\"constructor\")\n    this.editor = editor\n    this.grabber = new PointerEventGrabber(editor.configuration.grabber)\n  }\n\n  get tool(): EditorWriteTool\n  {\n    return this.#tool\n  }\n  set tool(wt: EditorWriteTool)\n  {\n    this.#tool = wt\n    if (wt !== EditorWriteTool.Pencil) {\n      this.editor.layers.root.classList.add(\"shape\")\n    }\n    else {\n      this.editor.layers.root.classList.remove(\"shape\")\n    }\n    this.editor.unselectAll()\n  }\n\n  get model(): IIModel\n  {\n    return this.editor.model\n  }\n\n  get renderer(): IISVGRenderer\n  {\n    return this.editor.renderer\n  }\n\n  get history(): IIHistoryManager\n  {\n    return this.editor.history\n  }\n\n  get gestureManager(): IIGestureManager\n  {\n    return this.editor.gesture\n  }\n\n  get snaps(): IISnapManager\n  {\n    return this.editor.snaps\n  }\n\n  get recognizer(): RecognizerWebSocket\n  {\n    return this.editor.recognizer\n  }\n\n  attach(layer: HTMLElement): void\n  {\n    this.grabber.attach(layer)\n    this.grabber.onPointerDown = this.start.bind(this)\n    this.grabber.onPointerMove = this.continue.bind(this)\n    this.grabber.onPointerUp = this.end.bind(this)\n  }\n\n  detach(): void\n  {\n    this.grabber.detach()\n  }\n\n  protected needContextLessGesture(stroke: IIStroke): boolean\n  {\n    const strokeBoundsWithMargin = this.editor.getSymbolsBounds([stroke], 2 * SELECTION_MARGIN)\n    return this.detectGesture && this.model.symbols.some(s =>\n    {\n      switch (s.type) {\n        case SymbolType.Recognized:\n        case SymbolType.Stroke:\n          return false\n        case SymbolType.Group:\n          if (s.containsOnlyStroke()) {\n            return false\n          }\n          else {\n            return s.bounds.overlaps(strokeBoundsWithMargin)\n          }\n        default:\n          return s.bounds.overlaps(strokeBoundsWithMargin)\n      }\n    })\n  }\n\n  protected createCurrentSymbol(pointer: TPointer, style: TStyle, pointerType: string): TIISymbol\n  {\n    this.#logger.debug(\"createCurrentSymbol\", { pointer, style, pointerType })\n\n    switch (this.tool) {\n      case EditorWriteTool.Pencil:\n        this.model.currentSymbol = new IIStroke(style, pointerType)\n        break\n      case EditorWriteTool.Rectangle:\n        this.model.currentSymbol = IIShapePolygon.createRectangleBetweenPoints(pointer, pointer, style)\n        break\n      case EditorWriteTool.Triangle:\n        this.model.currentSymbol = IIShapePolygon.createTriangleBetweenPoints(pointer, pointer, style)\n        break\n      case EditorWriteTool.Parallelogram:\n        this.model.currentSymbol = IIShapePolygon.createParallelogramBetweenPoints(pointer, pointer, style)\n        break\n      case EditorWriteTool.Rhombus:\n        this.model.currentSymbol = IIShapePolygon.createRhombusBetweenPoints(pointer, pointer, style)\n        break\n      case EditorWriteTool.Circle:\n        this.model.currentSymbol = IIShapeCircle.createBetweenPoints(pointer, pointer, style)\n        break\n      case EditorWriteTool.Ellipse:\n        this.model.currentSymbol = IIShapeEllipse.createBetweenPoints(pointer, pointer, style)\n        break\n      case EditorWriteTool.Line:\n      case EditorWriteTool.Arrow:\n      case EditorWriteTool.DoubleArrow: {\n        let startDecoration, endDecoration\n        if (this.tool === EditorWriteTool.Arrow) {\n          endDecoration = EdgeDecoration.Arrow\n        }\n        else if (this.tool === EditorWriteTool.DoubleArrow) {\n          startDecoration = EdgeDecoration.Arrow\n          endDecoration = EdgeDecoration.Arrow\n        }\n        this.model.currentSymbol = new IIEdgeLine(pointer, pointer, startDecoration, endDecoration, style)\n        break\n      }\n      default:\n        throw new Error(`Can't create symbol, tool is unknow: \"${ this.tool }\"`)\n    }\n    return this.updateCurrentSymbol(pointer)\n  }\n\n  protected updateCurrentSymbolShape(pointer: TPointer): void\n  {\n    switch (this.tool) {\n      case EditorWriteTool.Rectangle:\n        IIShapePolygon.updateRectangleBetweenPoints(this.model.currentSymbol as IIShapePolygon, this.currentSymbolOrigin!, pointer)\n        break\n      case EditorWriteTool.Triangle:\n        IIShapePolygon.updateTriangleBetweenPoints(this.model.currentSymbol as IIShapePolygon, this.currentSymbolOrigin!, pointer)\n        break\n      case EditorWriteTool.Parallelogram:\n        IIShapePolygon.updateParallelogramBetweenPoints(this.model.currentSymbol as IIShapePolygon, this.currentSymbolOrigin!, pointer)\n        break\n      case EditorWriteTool.Rhombus:\n        IIShapePolygon.updateRhombusBetweenPoints(this.model.currentSymbol as IIShapePolygon, this.currentSymbolOrigin!, pointer)\n        break\n      case EditorWriteTool.Circle:\n        IIShapeCircle.updateBetweenPoints(this.model.currentSymbol as IIShapeCircle, this.currentSymbolOrigin!, pointer)\n        break\n      case EditorWriteTool.Ellipse:\n        IIShapeEllipse.updateBetweenPoints(this.model.currentSymbol as IIShapeEllipse, this.currentSymbolOrigin!, pointer)\n        break\n    }\n  }\n\n  protected updateCurrentSymbolEdge(pointer: TPointer): void\n  {\n    const edge = this.model.currentSymbol as TIIEdge\n    switch (edge.kind) {\n      case EdgeKind.Line:\n        edge.end = pointer\n        break\n    }\n  }\n\n  protected updateCurrentSymbol(pointer: TPointer): TIISymbol\n  {\n    this.#logger.debug(\"updateCurrentSymbol\", { pointer })\n    if (!this.model.currentSymbol) {\n      throw new Error(\"Can't update current symbol because currentSymbol is undefined\")\n    }\n\n    switch (this.model.currentSymbol.type) {\n      case SymbolType.Stroke:\n        this.model.currentSymbol!.addPointer(pointer)\n        break\n      case SymbolType.Shape:\n        this.updateCurrentSymbolShape(pointer)\n        break\n      case SymbolType.Edge:\n        this.updateCurrentSymbolEdge(pointer)\n        break\n    }\n    return this.model.currentSymbol\n  }\n\n  start(info: PointerInfo): void\n  {\n    this.#logger.info(\"startWriting\", { info })\n    const localPointer = info.pointer\n    if (this.tool !== EditorWriteTool.Pencil) {\n      const { x, y } = this.snaps.snapResize(localPointer)\n      localPointer.x = x\n      localPointer.y = y\n    }\n    this.currentSymbolOrigin = localPointer\n    this.createCurrentSymbol(localPointer, this.editor.penStyle, info.pointerType)\n    this.renderer.drawSymbol(this.model.currentSymbol!)\n  }\n\n  continue(info: PointerInfo): void\n  {\n    this.#logger.info(\"continueWriting\", { info })\n    const localPointer = info.pointer\n    if (this.tool !== EditorWriteTool.Pencil) {\n      const { x, y } = this.snaps.snapResize(localPointer)\n      localPointer.x = x\n      localPointer.y = y\n    }\n    this.updateCurrentSymbol(localPointer)\n    this.renderer.drawSymbol(this.model.currentSymbol!)\n  }\n\n  protected async interactWithBackend(stroke: IIStroke): Promise<void>\n  {\n    const localStroke = stroke.clone()\n    let gestureFromContextLess: TGesture | undefined\n    if (this.needContextLessGesture(stroke)) {\n      gestureFromContextLess = await this.gestureManager.getGestureFromContextLess(localStroke)\n    }\n    if (gestureFromContextLess) {\n      this.history.pop()\n      this.recognizer.addStrokes([localStroke], this.detectGesture)\n      await this.gestureManager.apply(localStroke, gestureFromContextLess)\n    }\n    else {\n      const gesture = await this.recognizer.addStrokes([localStroke], this.detectGesture)\n      if (gesture) {\n        this.history.pop()\n        await this.gestureManager.apply(localStroke, gesture)\n      }\n    }\n  }\n\n  async end(info: PointerInfo): Promise<void>\n  {\n    this.#logger.info(\"finishWriting\", { info })\n    const localPointer = info.pointer\n    if (this.tool !== EditorWriteTool.Pencil) {\n      const { x, y } = this.snaps.snapResize(localPointer)\n      localPointer.x = x\n      localPointer.y = y\n    }\n    const localSymbol = this.updateCurrentSymbol(localPointer)\n    this.model.currentSymbol = undefined\n    this.currentSymbolOrigin = undefined\n    this.snaps.clearSnapToElementLines()\n\n    this.renderer.drawSymbol(localSymbol!)\n    this.model.addSymbol(localSymbol)\n    this.history.push(this.model, { added: [localSymbol] })\n\n    if (localSymbol.type === SymbolType.Stroke) {\n      await this.interactWithBackend(localSymbol)\n    }\n  }\n}\n", "import { LoggerCategory, LoggerManager } from \"../logger\"\nimport { IIModel } from \"../model\"\nimport { IIEraser, TSegment } from \"../symbol\"\nimport { IISVGRenderer } from \"../renderer\"\nimport { InteractiveInkEditor } from \"../editor/InteractiveInkEditor\"\nimport { PointerEventGrabber, PointerInfo } from \"../grabber\"\n\n/**\n * @group Manager\n */\nexport class IIEraseManager\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.WRITE)\n  grabber: PointerEventGrabber\n  editor: InteractiveInkEditor\n\n  currentEraser?: IIEraser\n\n  constructor(editor: InteractiveInkEditor)\n  {\n    this.#logger.info(\"constructor\")\n    this.editor = editor\n    this.grabber = new PointerEventGrabber(editor.configuration.grabber)\n  }\n\n  get model(): IIModel\n  {\n    return this.editor.model\n  }\n\n  get renderer(): IISVGRenderer\n  {\n    return this.editor.renderer\n  }\n\n  attach(layer: HTMLElement): void\n  {\n    this.grabber.attach(layer)\n    this.grabber.onPointerDown = this.start.bind(this)\n    this.grabber.onPointerMove = this.continue.bind(this)\n    this.grabber.onPointerUp = this.end.bind(this)\n  }\n\n  detach(): void\n  {\n    this.grabber.detach()\n  }\n\n  start(info: PointerInfo): void\n  {\n    this.#logger.info(\"startErase\", { info })\n    this.currentEraser = new IIEraser()\n    this.currentEraser.pointers.push(info.pointer)\n    this.renderer.drawSymbol(this.currentEraser!)\n  }\n\n  continue(info: PointerInfo): void\n  {\n    this.#logger.info(\"continueErase\", { info })\n    if (!this.currentEraser) {\n      throw new Error(\"Can't update current eraser because currentEraser is undefined\")\n    }\n    this.currentEraser.pointers.push(info.pointer)\n    this.renderer.drawSymbol(this.currentEraser)\n    const lastSeg: TSegment = {\n      p1: this.currentEraser.pointers.at(-1)!,\n      p2: this.currentEraser.pointers.at(-2)!\n    }\n    this.model.symbols.forEach(s => {\n      if (s.isIntersected(lastSeg))\n      {\n        s.deleting = true\n      }\n    })\n    this.model.symbolsToDelete.map(s => this.renderer.drawSymbol(s))\n  }\n\n  async end(info: PointerInfo): Promise<void>\n  {\n    this.#logger.info(\"finishErasing\", { info })\n    this.continue(info)\n\n    this.renderer.removeSymbol(this.currentEraser!.id)\n    this.editor.removeSymbols(this.model.symbolsToDelete.map(s => s.id))\n    this.currentEraser = undefined\n  }\n}\n", "import { LoggerManager, LoggerCategory } from \"../logger\"\nimport { IIModel, JIIXEdgeKind } from \"../model\"\nimport { Box, IIText, SymbolType, TBox, TIISymbol } from \"../symbol\"\nimport { IISVGRenderer, IISVGRendererConst, SVGBuilder } from \"../renderer\"\nimport { convertBoundingBoxMillimeterToPixel, createUUID } from \"../utils\"\nimport { InteractiveInkEditor } from \"../editor/InteractiveInkEditor\"\n\n/**\n * @group Manager\n */\nexport class IIDebugSVGManager\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.SVGDEBUG)\n  #snapPointsVisibility = false\n  #verticesVisibility = false\n  #boundingBoxVisibility = false\n  #recognitionBoxVisibility = false\n  #recognitionItemBoxVisibility = false\n\n  editor: InteractiveInkEditor\n\n  constructor(editor: InteractiveInkEditor)\n  {\n    this.#logger.info(\"constructor\")\n    this.editor = editor\n  }\n\n  get model(): IIModel\n  {\n    return this.editor.model\n  }\n\n  get renderer(): IISVGRenderer\n  {\n    return this.editor.renderer\n  }\n\n  get snapPointsVisibility(): boolean\n  {\n    return this.#snapPointsVisibility\n  }\n  set snapPointsVisibility(show: boolean)\n  {\n    this.#snapPointsVisibility = show\n    this.debugSnapPoints()\n  }\n\n  get verticesVisibility(): boolean\n  {\n    return this.#verticesVisibility\n  }\n  set verticesVisibility(show: boolean)\n  {\n    this.#verticesVisibility = show\n    this.debugVertices()\n  }\n\n  get boundingBoxVisibility(): boolean\n  {\n    return this.#boundingBoxVisibility\n  }\n  set boundingBoxVisibility(show: boolean)\n  {\n    this.#boundingBoxVisibility = show\n    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n    this.#boundingBoxVisibility ? this.showBoundingBox() : this.hideBoundingBox()\n  }\n\n  get recognitionBoxVisibility(): boolean\n  {\n    return this.#recognitionBoxVisibility\n  }\n  set recognitionBoxVisibility(show: boolean)\n  {\n    this.#recognitionBoxVisibility = show\n    this.debugRecognitionBox()\n  }\n\n  get recognitionItemBoxVisibility(): boolean\n  {\n    return this.#recognitionItemBoxVisibility\n  }\n  set recognitionItemBoxVisibility(show: boolean)\n  {\n    this.#recognitionItemBoxVisibility = show\n    this.debugRecognitionItemBox()\n  }\n\n  protected showSnapPoints(): void\n  {\n    this.#logger.info(\"showSnapPoints\")\n    if (this.model.currentSymbol) {\n      this.model.currentSymbol.snapPoints.forEach(p => this.renderer.drawCircle(p, 2, { fill: \"blue\", \"debug\": \"snap-points\" }))\n    }\n    this.model.symbols.forEach(s => s.snapPoints.forEach(p => this.renderer.drawCircle(p, 2, { fill: \"blue\", \"debug\": \"snap-points\" })))\n  }\n  protected hideSnapPoints(): void\n  {\n    this.#logger.info(\"hideSnapPoints\")\n    this.renderer.clearElements({ attrs: { \"debug\": \"snap-points\" } })\n  }\n  debugSnapPoints(): void\n  {\n    this.hideSnapPoints()\n    if (this.snapPointsVisibility) {\n      this.showSnapPoints()\n    }\n  }\n\n  protected showVertices(): void\n  {\n    this.#logger.info(\"showVertices\")\n    if (this.model.currentSymbol) {\n      this.model.currentSymbol.vertices.forEach(p => this.renderer.drawCircle(p, 2, { fill: \"red\", \"debug\": \"vertices\" }))\n    }\n    this.model.symbols.forEach(s => s.vertices.forEach(p => this.renderer.drawCircle(p, 2, { fill: \"red\", \"debug\": \"vertices\" })))\n  }\n  protected hideVertices(): void\n  {\n    this.#logger.info(\"hideVertices\")\n    this.renderer.clearElements({ attrs: { \"debug\": \"vertices\" } })\n  }\n  debugVertices(): void\n  {\n    this.hideVertices()\n    if (this.verticesVisibility) {\n      this.showVertices()\n    }\n  }\n\n  protected drawBoundingBox(symbols: TIISymbol[]): void\n  {\n    const symbolAttrs = {\n      style: \"pointer-events: none\",\n      fill: \"transparent\",\n      stroke: \"red\",\n      \"stroke-width\": \"1\",\n      \"stroke-dasharray\": \"5 5\",\n      \"vector-effect\": \"non-scaling-stroke\",\n      \"debug\": \"bounding-box\"\n    }\n    const charAttrs = {\n      style: \"pointer-events: none\",\n      fill: \"transparent\",\n      stroke: \"orange\",\n      \"stroke-width\": \"1\",\n      \"stroke-dasharray\": \"0 5 0\",\n      \"vector-effect\": \"non-scaling-stroke\",\n      \"debug\": \"bounding-box\"\n    }\n    symbols.forEach(s =>\n    {\n      const symEl = this.renderer.getElementById(s.id)\n      if (symEl) {\n        if (s.type === SymbolType.Text) {\n          const text = s as IIText\n          let transform: string = \"\"\n          if (text.rotation) {\n            transform = `rotate(${ text.rotation.degree }, ${ text.rotation.center.x }, ${ text.rotation.center.y })`\n          }\n          text.chars.forEach(c =>\n          {\n            const ca = {\n              ...charAttrs,\n              char: c.label,\n              transform\n            }\n            symEl.insertAdjacentElement(\"beforebegin\", SVGBuilder.createRect(c.bounds, ca))\n          })\n          const sa = {\n            ...symbolAttrs,\n            symbol: s.id,\n            transform\n          }\n          symEl.insertAdjacentElement(\"beforebegin\", SVGBuilder.createRect(s.bounds, sa))\n        }\n        else {\n          const sa = {\n            ...symbolAttrs,\n            symbol: s.id,\n          }\n          symEl.insertAdjacentElement(\"beforebegin\", SVGBuilder.createRect(s.bounds, sa))\n        }\n      }\n    })\n  }\n  protected showBoundingBox(): void\n  {\n    this.#logger.info(\"showBoundingBox\")\n    if (this.model.currentSymbol) {\n      this.drawBoundingBox([this.model.currentSymbol])\n    }\n    this.drawBoundingBox(this.model.symbols)\n  }\n  protected hideBoundingBox(): void\n  {\n    this.#logger.info(\"hideBoundingBox\")\n    this.renderer.clearElements({ attrs: { \"debug\": \"bounding-box\" } })\n  }\n  debugBoundingBox(): void\n  {\n    this.hideBoundingBox()\n    if (this.boundingBoxVisibility) {\n      this.showBoundingBox()\n    }\n  }\n\n  protected drawRecognitionBox(box: TBox, infos?: string[]): void\n  {\n    const COLOR = \"green\"\n    const TEXT_HEIGHT = 20\n    const recognitionGroup = SVGBuilder.createGroup({ \"debug\": \"recognition-box\" })\n\n    const rect = SVGBuilder.createRect(box, { fill: \"transparent\", stroke: COLOR, style: IISVGRendererConst.noSelection })\n    recognitionGroup.appendChild(rect)\n\n    const infosGroup = SVGBuilder.createGroup({ id: `infos-group-${ createUUID() }` })\n    const infoX = box.x + box.width\n    let infoY = box.y + TEXT_HEIGHT / 2\n    infos?.forEach(w =>\n    {\n      infosGroup.appendChild(SVGBuilder.createText({ x: infoX, y: infoY }, w, { stroke: COLOR, style: IISVGRendererConst.noSelection }))\n      infoY += TEXT_HEIGHT\n    })\n    recognitionGroup.appendChild(infosGroup)\n    this.renderer.layer.appendChild(recognitionGroup)\n\n    const infosGroupBox = infosGroup.getBBox()\n    const rectBox = {\n      width: infosGroupBox.width + 10,\n      height: infosGroupBox.height + 10,\n      x: infosGroupBox.x - 5,\n      y: infosGroupBox.y - 5,\n    }\n    const rectTranslate = SVGBuilder.createRect(rectBox, { fill: \"white\", style: \"cursor:move\", stroke: COLOR })\n    infosGroup.prepend(rectTranslate)\n\n    const translateEl = (e: PointerEvent) =>\n    {\n      e.preventDefault()\n      e.stopPropagation()\n      const originX = Number(this.renderer.getAttribute(infosGroup.id, \"originX\"))\n      const originY = Number(this.renderer.getAttribute(infosGroup.id, \"originY\"))\n      const tx = e.clientX - originX\n      const ty = e.clientY - originY\n      this.renderer.setAttribute(infosGroup.id, \"transform\", `translate(${ tx },${ ty })`)\n      const newRectBox = {\n        width: rectBox.width,\n        height: rectBox.height,\n        x: rectBox.x + tx,\n        y: rectBox.y + ty,\n      }\n      this.renderer.removeSymbol(`connection-${ infosGroup.id }`)\n      this.renderer.drawConnectionBetweenBox(`connection-${ infosGroup.id }`, box, newRectBox, { stroke: COLOR, debug: \"recognition-box-link\" })\n    }\n\n    rectTranslate.addEventListener(\"pointerdown\", e =>\n    {\n      e.preventDefault()\n      e.stopPropagation()\n      if (!this.renderer.getAttribute(infosGroup.id, \"originX\")) {\n        this.renderer.setAttribute(infosGroup.id, \"originX\", e.clientX.toString())\n        this.renderer.setAttribute(infosGroup.id, \"originY\", e.clientY.toString())\n      }\n      this.renderer.layer.addEventListener(\"pointermove\", translateEl)\n      this.renderer.layer.addEventListener(\"pointerup\", () => this.renderer.layer.removeEventListener(\"pointermove\", translateEl))\n      this.renderer.layer.addEventListener(\"pointerleave\", () => this.renderer.layer.removeEventListener(\"pointermove\", translateEl))\n      this.renderer.layer.addEventListener(\"pointercancel\", () => this.renderer.layer.removeEventListener(\"pointermove\", translateEl))\n    })\n  }\n\n  protected async showRecognitionBox(): Promise<void>\n  {\n    this.#logger.info(\"showRecognitionBox\")\n    await this.editor.export([\"application/vnd.myscript.jiix\"])\n    const jiix = this.model.exports?.[\"application/vnd.myscript.jiix\"]\n    this.#logger.debug(\"showRecognitionBox\", { jiix })\n    if (jiix) {\n      if (!jiix[\"bounding-box\"]) {\n        this.#logger.warn(\"drawRecognitionBox\", \"You must to enabled configuration.recognition.exports[\\\"bounding-box\\\"]\")\n        return\n      }\n      jiix.elements?.forEach(el =>\n      {\n        switch (el.type) {\n          case \"Node\": {\n            if (el[\"bounding-box\"]) {\n              const box = convertBoundingBoxMillimeterToPixel(el[\"bounding-box\"])\n              const hideProperties = [\"bounding-box\", \"items\", \"id\"]\n              const infos = Object.keys(el).filter(k => !hideProperties.includes(k)).map(k => `${ k }: ${ JSON.stringify(el[k as keyof typeof el]) }`)\n              this.drawRecognitionBox(box, infos)\n            }\n            break\n          }\n          case \"Text\": {\n            el.words?.forEach(w =>\n            {\n              if (w?.[\"bounding-box\"]) {\n                const box = convertBoundingBoxMillimeterToPixel(w[\"bounding-box\"])\n                this.drawRecognitionBox(box, [`type: ${ el.type }`, `candidates: ${ JSON.stringify(w.candidates || []) }`])\n              }\n            })\n            break\n          }\n          case \"Edge\": {\n            if (el.kind === JIIXEdgeKind.PolyEdge) {\n              const infos = [\n                `type: ${ el.type }`,\n                `kind: ${ el.kind }`,\n              ]\n              el.edges.forEach((e, i) =>\n              {\n                let inf = `edge-${ i }: [{ x1: ${ e.x1 }, y2: ${ e.y1 } },{ x2: ${ e.x2 }, y2: ${ e.y2 } }]`\n                if (e.p1Decoration) {\n                  inf += `, p1Decoration: ${ e.p1Decoration }`\n                }\n                if (e.p2Decoration) {\n                  inf += `, p2Decoration: ${ e.p2Decoration }`\n                }\n                infos.push(inf)\n              })\n              const box = convertBoundingBoxMillimeterToPixel(Box.createFromBoxes(el.edges.map(e => e[\"bounding-box\"] as TBox)))\n              this.drawRecognitionBox(box, infos)\n            }\n            else if (el[\"bounding-box\"]) {\n              const box = convertBoundingBoxMillimeterToPixel(el[\"bounding-box\"])\n              const hideProperties = [\"bounding-box\", \"items\", \"id\", \"ports\", \"connected\"]\n              const infos = Object.keys(el).filter(k => !hideProperties.includes(k)).map(k => `${ k }: ${ JSON.stringify(el[k as keyof typeof el]) }`)\n              this.drawRecognitionBox(box, infos)\n            }\n            break\n          }\n          default: {\n            this.#logger.warn(\"drawRecognitionBox\", `Unknow jiix element type: ${ el.type }`)\n            break\n          }\n        }\n      })\n    }\n  }\n  protected clearRecognitionBox(): void\n  {\n    this.#logger.info(\"clearRecognitionBox\")\n    this.renderer.clearElements({ attrs: { \"debug\": \"recognition-box\" } })\n    this.renderer.clearElements({ attrs: { \"debug\": \"recognition-box-link\" } })\n  }\n  async debugRecognitionBox(): Promise<void>\n  {\n    this.clearRecognitionBox()\n    if (this.#recognitionBoxVisibility) {\n      this.showRecognitionBox()\n    }\n  }\n\n  protected drawRecognitionItemBox(box: TBox, label?: string, chars?: string[]): void\n  {\n    const COLOR = \"blue\"\n    const CHAR_SIZE = 14\n\n    const recognitionItemGroup = SVGBuilder.createGroup({ \"debug\": \"recognition-item-box\" })\n    const rect = SVGBuilder.createRect(box, { fill: \"transparent\", stroke: COLOR, style: IISVGRendererConst.noSelection })\n    recognitionItemGroup.appendChild(rect)\n\n    const charX = box.x\n    let charY = box.y - CHAR_SIZE\n\n    const charsGroup = SVGBuilder.createGroup({ id: `chars-group-${ createUUID() }` })\n    if (label) {\n      charsGroup.appendChild(SVGBuilder.createText({ x: charX, y: charY }, `label: ${ label }`, { fill: COLOR, \"font-size\": CHAR_SIZE.toString(), style: IISVGRendererConst.noSelection }))\n    }\n    if (chars?.length) {\n      charY += CHAR_SIZE\n      charsGroup.appendChild(SVGBuilder.createText({ x: charX, y: charY }, `[${ chars.join(\", \") }]`, { fill: COLOR, \"font-size\": CHAR_SIZE.toString(), style: IISVGRendererConst.noSelection }))\n    }\n\n    recognitionItemGroup.appendChild(charsGroup)\n    this.renderer.layer.appendChild(recognitionItemGroup)\n\n    const charsGroupBox = charsGroup.getBBox()\n    const rectBox = {\n      width: charsGroupBox.width + 10,\n      height: charsGroupBox.height + 10,\n      x: charsGroupBox.x - 5,\n      y: charsGroupBox.y - 5,\n    }\n    const rectTranslate = SVGBuilder.createRect(rectBox, { fill: \"white\", style: \"cursor:move\", stroke: COLOR })\n    charsGroup.prepend(rectTranslate)\n\n    const translateEl = (e: PointerEvent) =>\n    {\n      e.preventDefault()\n      e.stopPropagation()\n      const originX = Number(this.renderer.getAttribute(charsGroup.id, \"originX\"))\n      const originY = Number(this.renderer.getAttribute(charsGroup.id, \"originY\"))\n      const tx = e.clientX - originX\n      const ty = e.clientY - originY\n      this.renderer.setAttribute(charsGroup.id, \"transform\", `translate(${ tx },${ ty })`)\n      const newRectBox = {\n        width: rectBox.width,\n        height: rectBox.height,\n        x: rectBox.x + tx,\n        y: rectBox.y + ty,\n      }\n      this.renderer.removeSymbol(`connection-${ charsGroup.id }`)\n      this.renderer.drawConnectionBetweenBox(`connection-${ charsGroup.id }`, box, newRectBox, { stroke: COLOR, debug: \"recognition-item-box-link\" })\n    }\n\n    rectTranslate.addEventListener(\"pointerdown\", e =>\n    {\n      e.preventDefault()\n      e.stopPropagation()\n      if (!this.renderer.getAttribute(charsGroup.id, \"originX\")) {\n        this.renderer.setAttribute(charsGroup.id, \"originX\", e.clientX.toString())\n        this.renderer.setAttribute(charsGroup.id, \"originY\", e.clientY.toString())\n      }\n      this.renderer.layer.addEventListener(\"pointermove\", translateEl)\n    })\n    this.renderer.layer.addEventListener(\"pointerup\", () => this.renderer.layer.removeEventListener(\"pointermove\", translateEl))\n    this.renderer.layer.addEventListener(\"pointerleave\", () => this.renderer.layer.removeEventListener(\"pointermove\", translateEl))\n    this.renderer.layer.addEventListener(\"pointercancel\", () => this.renderer.layer.removeEventListener(\"pointermove\", translateEl))\n\n  }\n  protected async showRecognitionItemBox(): Promise<void>\n  {\n    this.#logger.info(\"showRecognitionBoxItem\")\n    await this.editor.export([\"application/vnd.myscript.jiix\"])\n    const jiix = this.model.exports?.[\"application/vnd.myscript.jiix\"]\n    this.#logger.debug(\"showRecognitionBoxItem\", { jiix })\n    if (jiix) {\n      jiix.elements?.forEach(el =>\n      {\n        switch (el.type) {\n          case \"Text\": {\n            el.chars?.forEach(c =>\n            {\n              if (c?.[\"bounding-box\"]) {\n                const box = convertBoundingBoxMillimeterToPixel(c[\"bounding-box\"])\n                this.drawRecognitionItemBox(box, c.label, c.candidates)\n              }\n            })\n            break\n          }\n          case \"Node\": {\n            if (el?.[\"bounding-box\"]) {\n              const box = convertBoundingBoxMillimeterToPixel(el[\"bounding-box\"])\n              this.drawRecognitionItemBox(box, el.kind)\n            }\n            break\n          }\n          case \"Edge\": {\n            if (el.kind === JIIXEdgeKind.PolyEdge) {\n              el.edges.forEach(e =>\n              {\n                const box = convertBoundingBoxMillimeterToPixel(e[\"bounding-box\"])\n                this.drawRecognitionItemBox(box, e.kind)\n              })\n            }\n            else if (el[\"bounding-box\"]) {\n              const box = convertBoundingBoxMillimeterToPixel(el[\"bounding-box\"])\n              this.drawRecognitionItemBox(box, el.kind)\n            }\n            break\n          }\n          default:\n            this.#logger.warn(\"drawRecognitionBoxItem\", `Unknow jiix element type: ${ el.type }`)\n            break\n        }\n      })\n    }\n  }\n  protected clearRecognitionItemBox(): void\n  {\n    this.#logger.info(\"clearRecognitionBoxItem\")\n    this.renderer.clearElements({ attrs: { \"debug\": \"recognition-item-box\" } })\n    this.renderer.clearElements({ attrs: { \"debug\": \"recognition-item-box-link\" } })\n  }\n  async debugRecognitionItemBox(): Promise<void>\n  {\n    this.clearRecognitionItemBox()\n    if (this.#recognitionItemBoxVisibility) {\n      this.showRecognitionItemBox()\n    }\n  }\n\n  apply(): void\n  {\n    this.debugBoundingBox()\n    this.debugVertices()\n    this.debugSnapPoints()\n    this.debugRecognitionBox()\n    this.debugRecognitionItemBox()\n  }\n}\n", "import { InteractiveInkEditor } from \"../editor/InteractiveInkEditor\"\nimport { PointerEventGrabber, PointerInfo } from \"../grabber\"\nimport { IISVGRenderer } from \"../renderer\"\n\n/**\n * @group Manager\n */\nexport class IIMoveManager\n{\n  grabber: PointerEventGrabber\n  editor: InteractiveInkEditor\n\n  origin?: {\n    left: number,\n    top: number,\n    x: number,\n    y: number\n  }\n\n  constructor(editor: InteractiveInkEditor)\n  {\n    this.editor = editor\n    this.grabber = new PointerEventGrabber(editor.configuration.grabber)\n  }\n\n  get renderer(): IISVGRenderer\n  {\n    return this.editor.renderer\n  }\n\n  attach(layer: HTMLElement): void\n  {\n    this.grabber.attach(layer)\n    this.grabber.onPointerDown = this.start.bind(this)\n    this.grabber.onPointerMove = this.continue.bind(this)\n    this.grabber.onPointerUp = this.end.bind(this)\n  }\n\n  detach(): void\n  {\n    this.grabber.detach()\n  }\n\n  start(info: PointerInfo): void\n  {\n    this.origin = {\n      left: this.renderer.parent.scrollLeft,\n      top: this.renderer.parent.scrollTop,\n      x: info.clientX,\n      y: info.clientY,\n    }\n  }\n\n  continue(info: PointerInfo): void\n  {\n    if (!this.origin) {\n      throw new Error(\"Can't move cause origin is undefined\")\n    }\n    const dx = info.clientX - this.origin.x\n    const dy = info.clientY - this.origin.y\n\n    this.renderer.parent.scrollTop = this.origin.top - dy\n    this.renderer.parent.scrollLeft = this.origin.left - dx\n  }\n\n  end(info: PointerInfo): void\n  {\n    this.continue(info)\n    this.origin = undefined\n  }\n}\n", "/**\n * @group History\n */\nexport type THistoryContext = {\n  canUndo: boolean\n  canRedo: boolean\n  empty: boolean\n  stackIndex: number\n  possibleUndoCount: number\n}\n\n/**\n * @group History\n */\nexport const getInitialHistoryContext = (): THistoryContext => {\n  return {\n    stackIndex: 0,\n    possibleUndoCount: 0,\n    canRedo: false,\n    canUndo: false,\n    empty: true,\n  }\n}\n", "import { EditorEvent } from \"../editor/EditorEvent\"\nimport { LoggerCategory, LoggerManager } from \"../logger\"\nimport { Model } from \"../model\"\nimport { THistoryConfiguration } from \"./HistoryConfiguration\"\nimport { THistoryContext, getInitialHistoryContext } from \"./HistoryContext\"\n\n/**\n * @group History\n */\nexport class HistoryManager\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.HISTORY)\n\n  configuration: THistoryConfiguration\n  event: EditorEvent\n  context: THistoryContext\n  stack: Model[]\n\n  constructor(configuration: THistoryConfiguration, event: EditorEvent)\n  {\n    this.#logger.info(\"constructor\", { configuration })\n    this.configuration = configuration\n    this.event = event\n    this.context = getInitialHistoryContext()\n    this.stack = []\n  }\n\n  private updateContext(): void\n  {\n    this.context.canRedo = this.stack.length - 1 > this.context.stackIndex\n    this.context.canUndo = this.context.stackIndex > 0\n    this.context.empty = this.stack[this.context.stackIndex].symbols.length === 0\n  }\n\n  push(model: Model): void\n  {\n    this.#logger.info(\"push\", { model })\n    if (this.context.stackIndex + 1 < this.stack.length) {\n      this.stack.splice(this.context.stackIndex + 1)\n    }\n\n    this.stack.push(model.clone())\n    this.context.stackIndex = this.stack.length - 1\n\n    if (this.stack.length > this.configuration.maxStackSize) {\n      this.stack.shift()\n      this.context.stackIndex--\n    }\n\n    this.updateContext()\n    this.event.emitChanged(this.context)\n  }\n\n  updateStack(model: Model): void\n  {\n    this.#logger.info(\"updateStack\", { model })\n    const index = this.stack.findIndex(m => m.modificationDate === model.modificationDate)\n    if (index > -1) {\n      this.stack.splice(index, 1, model.clone())\n    }\n    this.updateContext()\n    this.event.emitChanged(this.context)\n  }\n\n  undo(): Model\n  {\n    this.#logger.info(\"undo\")\n    if (this.context.canUndo) {\n      this.context.stackIndex--\n      this.updateContext()\n      this.event.emitChanged(this.context)\n    }\n    const previousModel = this.stack[this.context.stackIndex].clone()\n    this.#logger.debug(\"undo\", previousModel)\n    return previousModel\n  }\n\n  redo(): Model\n  {\n    this.#logger.info(\"redo\")\n    if (this.context.canRedo) {\n      this.context.stackIndex++\n      this.updateContext()\n      this.event.emitChanged(this.context)\n    }\n    const nextModel = this.stack[this.context.stackIndex].clone()\n    this.#logger.debug(\"redo\", nextModel)\n    return nextModel\n  }\n}\n", "import { EditorEvent } from \"../editor/EditorEvent\"\nimport { LoggerCategory, LoggerManager } from \"../logger\"\nimport { IIModel } from \"../model\"\nimport { IIDecorator, IIStroke, TIISymbol, TPoint } from \"../symbol\"\nimport { TStyle } from \"../style\"\nimport { MatrixTransform, TMatrixTransform } from \"../transform\"\nimport { THistoryContext, getInitialHistoryContext } from \"./HistoryContext\"\nimport { PartialDeep } from \"../utils\"\nimport { THistoryConfiguration } from \"./HistoryConfiguration\"\n\n/**\n * @group History\n */\nexport type TIIHistoryChanges = {\n  added?: TIISymbol[]\n  updated?: TIISymbol[]\n  erased?: TIISymbol[]\n  replaced?: { oldSymbols: TIISymbol[], newSymbols: TIISymbol[] }\n  matrix?: { symbols: TIISymbol[], matrix: TMatrixTransform }\n  translate?: { symbols: TIISymbol[], tx: number, ty: number }[]\n  scale?: { symbols: TIISymbol[], scaleX: number, scaleY: number, origin: TPoint }[]\n  rotate?: { symbols: TIISymbol[], angle: number, center: TPoint }[]\n  style?: { symbols: TIISymbol[], style?: PartialDeep<TStyle>, fontSize?: number }\n  order?: { symbols: TIISymbol[], position: \"first\" | \"last\" | \"forward\" | \"backward\" }\n  decorator?: { symbol: TIISymbol, decorator: IIDecorator, added: boolean }[]\n  group?: { symbols: TIISymbol[] }\n  ungroup?: { group: TIISymbol }\n}\n\n/**\n * @group History\n * @remarks used to send messages to the backend on undo or redo\n */\nexport type TIIHistoryBackendChanges = {\n  added?: IIStroke[]\n  erased?: IIStroke[]\n  replaced?: { oldStrokes: IIStroke[], newStrokes: IIStroke[] }\n  matrix?: { strokes: IIStroke[], matrix: TMatrixTransform },\n  translate?: { strokes: IIStroke[], tx: number, ty: number }[]\n  scale?: { strokes: IIStroke[], scaleX: number, scaleY: number, origin: TPoint }[]\n  rotate?: { strokes: IIStroke[], angle: number, center: TPoint }[]\n}\n\n/**\n * @group History\n */\nexport type TIIHistoryStackItem = {\n  changes: TIIHistoryChanges\n  model: IIModel\n}\n\n/**\n * @group History\n */\nexport class IIHistoryManager\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.HISTORY)\n\n  configuration: THistoryConfiguration\n  event: EditorEvent\n  context: THistoryContext\n  stack: TIIHistoryStackItem[]\n\n  constructor(configuration: THistoryConfiguration, event: EditorEvent)\n  {\n    this.#logger.info(\"constructor\", { configuration })\n    this.configuration = configuration\n    this.event = event\n    this.context = getInitialHistoryContext()\n    this.stack = []\n  }\n\n  private updateContext(): void\n  {\n    this.context.canRedo = this.stack.length - 1 > this.context.stackIndex\n    this.context.canUndo = this.context.stackIndex > 0\n    this.context.empty = this.stack[this.context.stackIndex].model.symbols.length === 0\n  }\n\n  isChangesEmpty(changes: TIIHistoryChanges): boolean\n  {\n    return !(\n      changes.added?.length ||\n      changes.updated?.length ||\n      changes.erased?.length ||\n      changes.replaced?.oldSymbols.length ||\n      changes.matrix?.symbols.length ||\n      changes.translate?.length ||\n      changes.rotate?.length ||\n      changes.scale?.length ||\n      changes.style?.symbols?.length ||\n      changes.order?.symbols?.length ||\n      changes.decorator?.length ||\n      changes.group?.symbols.length ||\n      changes.ungroup?.group\n    )\n  }\n\n  init(model: IIModel): void\n  {\n    this.stack.push({ model: model.clone(), changes: {} })\n    this.event.emitChanged(this.context)\n  }\n\n  push(model: IIModel, changes: TIIHistoryChanges): void\n  {\n    this.#logger.info(\"push\", { model, changes })\n    if (this.isChangesEmpty(changes)) return\n\n    if (this.context.stackIndex + 1 < this.stack.length) {\n      this.stack.splice(this.context.stackIndex + 1)\n    }\n\n    this.stack.push({ model: model.clone(), changes })\n    this.context.stackIndex = this.stack.length - 1\n\n    if (this.stack.length > this.configuration.maxStackSize) {\n      this.stack.shift()\n      this.context.stackIndex--\n    }\n\n    this.updateContext()\n    this.event.emitChanged(this.context)\n  }\n\n  update(model: IIModel): void\n  {\n    this.#logger.info(\"pop\")\n    const stackIdx = this.stack.findIndex(s => s.model.modificationDate === model.modificationDate)\n    if (stackIdx > -1) {\n      this.stack[stackIdx].model = model\n      this.updateContext()\n    }\n  }\n\n  pop(): void\n  {\n    this.#logger.info(\"pop\")\n    this.stack.pop()\n    this.context.stackIndex = this.stack.length - 1\n    this.updateContext()\n  }\n\n  protected reverseChanges(changes: TIIHistoryChanges): TIIHistoryChanges\n  {\n    const reversedChanges: TIIHistoryChanges = {}\n    if (changes.added) {\n      reversedChanges.erased = changes.added\n    }\n    if (changes.erased) {\n      reversedChanges.added = changes.erased\n    }\n    if (changes.replaced) {\n      reversedChanges.replaced = {\n        newSymbols: changes.replaced.oldSymbols,\n        oldSymbols: changes.replaced.newSymbols\n      }\n    }\n    if (changes.matrix) {\n      reversedChanges.matrix = {\n        symbols: changes.matrix.symbols,\n        matrix: new MatrixTransform(changes.matrix.matrix.xx, changes.matrix.matrix.yx, changes.matrix.matrix.xy, changes.matrix.matrix.yy, changes.matrix.matrix.tx, changes.matrix.matrix.ty).invert()\n      }\n    }\n    if (changes.translate?.length) {\n      reversedChanges.translate = changes.translate.map(tr =>\n      {\n        return {\n          symbols: tr.symbols,\n          tx: -tr.tx,\n          ty: -tr.ty,\n        }\n      })\n    }\n    if (changes.rotate?.length) {\n      reversedChanges.rotate = changes.rotate.map(tr =>\n      {\n        return {\n          symbols: tr.symbols,\n          angle: 2 * Math.PI - tr.angle,\n          center: tr.center\n        }\n      })\n    }\n    if (changes.scale?.length) {\n      reversedChanges.scale = changes.scale.map(tr =>\n      {\n        return {\n          symbols: tr.symbols,\n          origin: tr.origin,\n          scaleX: 1 / tr.scaleX,\n          scaleY: 1 / tr.scaleY\n        }\n      })\n    }\n\n    return reversedChanges\n  }\n\n  undo(): TIIHistoryStackItem\n  {\n    this.#logger.info(\"undo\")\n    const currentStackItem = this.stack[this.context.stackIndex]\n    if (this.context.canUndo) {\n      this.context.stackIndex--\n      this.updateContext()\n      this.event.emitChanged(this.context)\n    }\n    const previousStackItem = this.stack[this.context.stackIndex]\n    this.#logger.debug(\"undo\", previousStackItem)\n    return {\n      model: previousStackItem.model,\n      changes: this.reverseChanges(currentStackItem.changes)\n    }\n  }\n\n  redo(): TIIHistoryStackItem\n  {\n    this.#logger.info(\"redo\")\n    if (this.context.canRedo) {\n      this.context.stackIndex++\n      this.updateContext()\n      this.event.emitChanged(this.context)\n    }\n    const nextStackItem = this.stack[this.context.stackIndex]\n    this.#logger.debug(\"redo\", nextStackItem)\n    return nextStackItem\n  }\n\n  clear(): void\n  {\n    this.context = getInitialHistoryContext()\n    this.stack = []\n  }\n}", "\n/**\n * @group History\n */\nexport type THistoryConfiguration = {\n  maxStackSize: number\n}\n\n/**\n * @group History\n * @source\n */\nexport const DefaultHistoryConfiguration: THistoryConfiguration = {\n  maxStackSize: 100\n}\n", "import ArrowDown from \"../assets/svg/nav-arrow-down.svg\"\n\n/**\n * @group Menu\n */\nexport type TMenuItem = {\n  id: string,\n  label: string,\n  type: \"button\" | \"checkbox\" | \"select\" | \"list\" | \"colors\"\n  disabled?: boolean\n}\n\n/**\n * @group Menu\n */\nexport type TMenuItemButton = TMenuItem & {\n  type: \"button\"\n  icon?: string\n  callback: () => void\n}\n\n/**\n * @group Menu\n */\nexport type TMenuItemButtonList = TMenuItem & {\n  type: \"list\"\n  initValue: string,\n  values: { label: string, value: string }[]\n  callback: (value: string) => void\n}\n\n/**\n * @group Menu\n */\nexport type TMenuItemColorList = TMenuItem & {\n  type: \"colors\"\n  initValue: string,\n  values: string[]\n  fill: boolean\n  callback: (value: string) => void\n}\n\n/**\n * @group Menu\n */\nexport type TMenuItemBoolean = TMenuItem & {\n  type: \"checkbox\",\n  initValue: boolean | \"indeterminate\",\n  callback: (value: boolean) => void\n}\n\n/**\n * @group Menu\n */\nexport type TMenuItemSelect = TMenuItem & {\n  type: \"select\",\n  initValue: string,\n  values: { label: string, value: string }[]\n  callback: (value: string) => void\n}\n\n/**\n * @group Menu\n */\nexport abstract class IIMenu\n{\n  thicknessList = [\n    { label: \"S\", value: 1 },\n    { label: \"M\", value: 2 },\n    { label: \"L\", value: 4 },\n    { label: \"XL\", value: 8 },\n  ]\n\n  fontSizeList = [\n    { label: \"Auto\", value: \"auto\" },\n    { label: \"S\", value: 0.5 },\n    { label: \"M\", value: 0.75 },\n    { label: \"L\", value: 1 },\n  ]\n\n  fontWeightList = [\n    { label: \"Auto\", value: \"auto\" },\n    { label: \"Normal\", value: \"normal\" },\n    { label: \"Bold\", value: \"bold\" },\n  ]\n\n  colors = [\n    \"#000000\", \"#808080\", \"#ffffff\", \"transparent\",\n    \"#ff0000\", \"#ff6400\", \"#ffc800\", \"#ffff00\",\n    \"#0000ff\", \"#0064ff\", \"#00c8ff\", \"#00ffff\",\n    \"#008000\", \"#00af00\", \"#00e100\", \"#00ff00\"\n  ]\n\n  protected createWrapCollapsible(el: Node, title: string): HTMLDivElement\n  {\n    const wrapper = document.createElement(\"div\")\n    wrapper.classList.add(\"collapsible-wrapper\")\n    const head = document.createElement(\"div\")\n    head.classList.add(\"collapsible-header\")\n    head.textContent = title\n    const btn = document.createElement(\"span\")\n    btn.classList.add(\"collapsible-header-icon\")\n    btn.innerHTML = ArrowDown\n    head.appendChild(btn)\n    head.style.setProperty(\"pointer\", \"cursor\")\n    const content = document.createElement(\"div\")\n    content.classList.add(\"collapsible-content\")\n    head.addEventListener(\"pointerup\", () => wrapper.classList.toggle(\"active\"))\n    wrapper.appendChild(head)\n    content.appendChild(el)\n    wrapper.appendChild(content)\n    return wrapper\n  }\n\n  protected createMenuItemBoolean(item: TMenuItemBoolean): HTMLDivElement\n  {\n    const wrapper = document.createElement(\"div\")\n    wrapper.classList.add(\"ms-menu-item\", item.type)\n    const labelEl = document.createElement(\"span\")\n    labelEl.textContent = item.label\n    wrapper.appendChild(labelEl)\n    const checkbox = document.createElement(\"input\")\n    checkbox.id = item.id\n    checkbox.setAttribute(\"type\", \"checkbox\")\n    if (item.disabled) {\n      checkbox.disabled = true\n    }\n    if (item.initValue === \"indeterminate\") {\n      checkbox.indeterminate = true\n    } else {\n      checkbox.checked = item.initValue\n    }\n    checkbox.addEventListener(\"change\", (e) => item.callback((e.target as HTMLInputElement).checked))\n    wrapper.appendChild(checkbox)\n    return wrapper\n  }\n\n  protected createMenuItemSelect(item: TMenuItemSelect): HTMLDivElement\n  {\n    const wrapper = document.createElement(\"div\")\n    wrapper.classList.add(\"ms-menu-item\", item.type)\n    const labelEl = document.createElement(\"span\")\n    labelEl.textContent = item.label\n    wrapper.appendChild(labelEl)\n    const select = document.createElement(\"select\")\n    select.id = item.id\n    if (item.disabled) {\n      select.disabled = true\n    }\n    item.values.forEach(v =>\n    {\n      const selected = v.value === item.initValue\n      const opt = new Option(v.label, v.value.toString(), selected, selected)\n      select.appendChild(opt)\n    })\n    select.addEventListener(\"change\", (e) => item.callback((e.target as HTMLInputElement).value))\n    wrapper.appendChild(select)\n    return wrapper\n  }\n\n  protected createMenuItemButton(item: TMenuItemButton): HTMLElement\n  {\n    const btn = document.createElement(\"button\")\n    btn.classList.add(\"ms-menu-item\", \"ms-menu-button\")\n    btn.innerHTML = item.icon || item.label\n    btn.addEventListener(\"pointerup\", item.callback)\n    return btn\n  }\n\n  protected createMenuItemButtonList(item: TMenuItemButtonList): HTMLElement\n  {\n    const wrapper = document.createElement(\"div\")\n    wrapper.classList.add(\"ms-menu-item\", item.type)\n    wrapper.id = item.id\n    const labelEl = document.createElement(\"span\")\n    labelEl.textContent = item.label\n    wrapper.appendChild(labelEl)\n    item.values.forEach((v) =>\n    {\n      const btn = document.createElement(\"button\")\n      if (item.disabled) {\n        btn.disabled = true\n      }\n      btn.id = `${item.id}-${ v.value }-btn`\n      if (item.initValue === v.value) {\n        btn.classList.add(\"active\")\n      }\n      btn.textContent = v.label\n      btn.addEventListener(\"pointerup\", () =>\n      {\n        item.callback(v.value)\n        wrapper.querySelectorAll(\"*\").forEach(e => e.classList.remove(\"active\"))\n        btn.classList.add(\"active\")\n      })\n      wrapper.appendChild(btn)\n    })\n    return wrapper\n  }\n\n  protected createMenuItemColorList(item: TMenuItemColorList): HTMLDivElement\n  {\n    const wrapper = document.createElement(\"div\")\n    wrapper.classList.add(\"ms-menu-item\", item.type)\n    wrapper.id = item.id\n    const labelEl = document.createElement(\"span\")\n    labelEl.textContent = item.label\n    wrapper.appendChild(labelEl)\n    wrapper.appendChild(this.createColorList(item))\n    return wrapper\n  }\n\n  protected createColorList(item: TMenuItemColorList): HTMLDivElement\n  {\n    const list = document.createElement(\"div\")\n    list.id = `${ item.id }-list`\n    list.classList.add(\"ms-menu-row\", \"color-list\")\n    item.values.forEach((color) =>\n    {\n      const btn = document.createElement(\"button\")\n      if (item.disabled) {\n        btn.disabled = true\n      }\n      btn.id = `${ item.id }-${ color.replace(\"#\", \"\") }-btn`\n      btn.classList.add(\"ms-menu-button\", \"square\")\n      const colorEl = document.createElement(\"div\")\n      colorEl.classList.add(\"color\")\n      if (item.fill) {\n        colorEl.style.setProperty(\"background-color\", color)\n        colorEl.style.setProperty(\"border\", \"1px solid lightgrey\")\n      } else {\n        colorEl.style.setProperty(\"background-color\", \"transparent\")\n        colorEl.style.setProperty(\"border\", `3px solid ${ color }`)\n      }\n      if (color === \"#ffffff\") {\n        colorEl.style.setProperty(\"border\", \"1px solid black\")\n      }\n      if (color === \"transparent\") {\n        colorEl.style.setProperty(\"background-image\", \"linear-gradient(45deg, #AAA 10%, transparent 20%, #AAA 30%, transparent 40%, #AAA 50%, transparent 60%, #AAA 70%, transparent 80%, #AAA 90%, transparent 100%)\")\n      }\n      if (item.initValue === color) {\n        btn.classList.add(\"active\")\n      }\n      btn.appendChild(colorEl)\n      btn.addEventListener(\"pointerup\", (e) =>\n      {\n        e.preventDefault()\n        e.stopPropagation()\n        item.callback(color)\n        list.querySelectorAll(\"*\").forEach(e => e.classList.remove(\"active\"))\n        btn.classList.add(\"active\")\n      })\n      list!.appendChild(btn)\n    })\n    return list\n  }\n\n  protected createMenuItem(item: TMenuItem): HTMLElement\n  {\n    switch (item.type) {\n      case \"checkbox\":\n        return this.createMenuItemBoolean(item as TMenuItemBoolean)\n      case \"select\":\n        return this.createMenuItemSelect(item as TMenuItemSelect)\n      case \"list\":\n        return this.createMenuItemButtonList(item as TMenuItemButtonList)\n      case \"colors\":\n        return this.createMenuItemColorList(item as TMenuItemColorList)\n      case \"button\":\n      default:\n        return this.createMenuItemButton(item as TMenuItemButton)\n    }\n  }\n\n  abstract render(domElement: HTMLElement): void\n\n  abstract update(): void\n\n  abstract show(): void\n\n  abstract hide(): void\n\n  abstract destroy(): void\n}\n", "\n/**\n * @group Gesture\n * @summary List all authorized gestures\n */\nexport type TGestureType = \"UNDERLINE\" | \"SCRATCH\" | \"JOIN\" | \"INSERT\" | \"STRIKETHROUGH\" | \"SURROUND\"\n\n/**\n * @group Gesture\n * @remarks\n *  when gestureType = \"INSERT\", subStrokes represent the two parts\n *  when gestureType = \"SCRATCH\", subStrokes represent the part to substract at the stroke corresponding fullStrokeId\n */\nexport type TGesture = {\n  gestureType: TGestureType\n  gestureStrokeId: string\n  strokeIds: string[]\n  strokeBeforeIds: string[]\n  strokeAfterIds: string[]\n  subStrokes?: { fullStrokeId: string, x: number[], y: number[] }[]\n}\n\n/**\n * @group Gesture\n * @summary\n * List all action allowed on surround detected\n * @remarks\n * only usable in the case of offscreen\n */\nexport enum SurroundAction\n{\n  Select = \"select\",\n  Surround = \"surround\",\n  Highlight = \"highlight\"\n}\n\n/**\n * @group Gesture\n * @summary\n * List all action allowed on strikeThrough detected\n * @remarks\n * only usable in the case of offscreen\n */\nexport enum StrikeThroughAction\n{\n  Erase = \"erase\",\n  Draw = \"draw\"\n}\n\n/**\n * @group Gesture\n * @summary\n * List all action allowed on split detected\n * @remarks\n * only usable in the case of offscreen\n */\nexport enum InsertAction\n{\n  /**\n   * @remarks Add line break on gesture place\n   */\n  LineBreak = \"line-break\",\n  /**\n   * @remarks Insert place in gesture place\n   */\n  Insert = \"insert\"\n}\n", "import { InsertAction, StrikeThroughAction, SurroundAction } from \"./Gesture\"\n\n/**\n * @group Gesture\n * @source\n */\nexport type TGestureConfiguration = {\n  surround: SurroundAction\n  strikeThrough: StrikeThroughAction\n  insert: InsertAction\n}\n\n/**\n * @group Gesture\n * @source\n */\nexport const DefaultGestureConfiguration: TGestureConfiguration = {\n  surround: SurroundAction.Select,\n  strikeThrough: StrikeThroughAction.Draw,\n  insert: InsertAction.LineBreak\n}\n", "import { EditorTool } from \"../Constants\"\nimport { LoggerManager, LoggerCategory } from \"../logger\"\nimport { IIModel } from \"../model\"\nimport\n{\n  IIDecorator,\n  IIStroke,\n  SymbolType,\n  IIText,\n  DecoratorKind,\n  IISymbolGroup,\n  TIISymbol,\n  Box,\n  TPoint,\n  IIRecognizedText,\n  RecognizedKind,\n} from \"../symbol\"\nimport { RecognizerWebSocket } from \"../recognizer\"\nimport { IISVGRenderer } from \"../renderer\"\nimport { IIHistoryManager, TIIHistoryChanges } from \"../history\"\nimport { computeAverage, isBetween, PartialDeep } from \"../utils\"\nimport { IITranslateManager } from \"../manager/IITranslateManager\"\nimport { IITextManager } from \"../manager/IITextManager\"\nimport { InteractiveInkEditor } from \"../editor\"\nimport { InsertAction, StrikeThroughAction, SurroundAction, TGesture } from \"./Gesture\"\nimport { DefaultGestureConfiguration, TGestureConfiguration } from \"./GestureConfiguration\"\n\n/**\n * @group Gesture\n */\nexport class IIGestureManager\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.GESTURE)\n\n  insertAction: InsertAction = InsertAction.LineBreak\n  surroundAction: SurroundAction = SurroundAction.Select\n  strikeThroughAction: StrikeThroughAction = StrikeThroughAction.Draw\n  editor: InteractiveInkEditor\n\n  constructor(editor: InteractiveInkEditor, gestureAction?: PartialDeep<TGestureConfiguration>)\n  {\n    this.#logger.info(\"constructor\")\n    this.editor = editor\n    this.surroundAction = gestureAction?.surround || DefaultGestureConfiguration.surround\n    this.strikeThroughAction = gestureAction?.strikeThrough || DefaultGestureConfiguration.strikeThrough\n    this.insertAction = gestureAction?.insert || DefaultGestureConfiguration.insert\n  }\n\n  get renderer(): IISVGRenderer\n  {\n    return this.editor.renderer\n  }\n\n  get recognizer(): RecognizerWebSocket\n  {\n    return this.editor.recognizer\n  }\n\n  get translator(): IITranslateManager\n  {\n    return this.editor.translator\n  }\n\n  get texter(): IITextManager\n  {\n    return this.editor.texter\n  }\n\n  get model(): IIModel\n  {\n    return this.editor.model\n  }\n\n  get history(): IIHistoryManager\n  {\n    return this.editor.history\n  }\n\n  get rowHeight(): number\n  {\n    return this.editor.configuration.rendering.guides.gap\n  }\n\n  get strokeSpaceWidth(): number\n  {\n    return this.editor.configuration.rendering.guides.gap * 2\n  }\n\n  async applySurroundGesture(gestureStroke: IIStroke, gesture: TGesture): Promise<void>\n  {\n    this.#logger.info(\"applySurroundGesture\", { gestureStroke, gesture })\n    const changes: TIIHistoryChanges = {}\n    const ids = this.model.symbols.filter(s => gestureStroke.bounds.contains(s.bounds)).map(s => s.id)\n    switch (this.surroundAction) {\n      case SurroundAction.Select: {\n        if (ids.length) {\n          this.editor.tool = EditorTool.Select\n          this.editor.select(ids)\n        }\n        break\n      }\n      case SurroundAction.Highlight: {\n        const symbolIds: string[] = []\n        changes.decorator = []\n        ids.forEach(id =>\n        {\n          const sym = this.model.getRootSymbol(id)\n          if (sym && [SymbolType.Group, SymbolType.Stroke, SymbolType.Text, SymbolType.Recognized].includes(sym.type) && !symbolIds.includes(sym.id)) {\n            const symWithDec = sym as (IIText | IIStroke | IISymbolGroup | IIRecognizedText)\n            const highlight = new IIDecorator(DecoratorKind.Highlight, this.editor.penStyle)\n            const index = symWithDec.decorators.findIndex(d => d.kind === DecoratorKind.Highlight)\n            const added = index === -1\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n            added ? symWithDec.decorators.push(highlight) : symWithDec.decorators.splice(index, 1)\n            this.model.updateSymbol(symWithDec)\n            this.renderer.drawSymbol(symWithDec)\n            symbolIds.push(symWithDec.id)\n            changes.decorator!.push({ symbol: symWithDec, decorator: highlight, added })\n          }\n        })\n        if (changes.decorator.length) {\n          this.history.push(this.model, changes)\n        }\n        break\n      }\n      case SurroundAction.Surround: {\n        const symbolIds: string[] = []\n        changes.decorator = []\n        ids.forEach(id =>\n        {\n          const sym = this.model.getRootSymbol(id)\n          if (sym && [SymbolType.Group, SymbolType.Stroke, SymbolType.Text, SymbolType.Recognized].includes(sym.type) && !symbolIds.includes(sym.id)) {\n            const symWithDec = sym as (IIText | IIStroke | IISymbolGroup | IIRecognizedText)\n            const surround = new IIDecorator(DecoratorKind.Surround, this.editor.penStyle)\n            const index = symWithDec.decorators.findIndex(d => d.kind === DecoratorKind.Surround)\n            const added = index === -1\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n            added ? symWithDec.decorators.push(surround) : symWithDec.decorators.splice(index, 1)\n            this.model.updateSymbol(symWithDec)\n            this.renderer.drawSymbol(symWithDec)\n            changes.decorator!.push({ symbol: symWithDec, decorator: surround, added })\n            symbolIds.push(symWithDec.id)\n          }\n        })\n        this.history.push(this.model, changes)\n        break\n      }\n      default:\n        this.#logger.error(\"applySurroundGesture\", `Unknow surroundAction: ${ this.surroundAction }, values allowed are: ${ SurroundAction.Highlight }, ${ SurroundAction.Select }, ${ SurroundAction.Surround }`)\n        break\n    }\n    return\n  }\n\n  protected computeScratchOnStrokes(gesture: TGesture, stroke: IIStroke): IIStroke[]\n  {\n    const newStrokes: IIStroke[] = []\n    const partPointersToRemove = gesture.subStrokes?.find(ss => ss.fullStrokeId === stroke.id)\n    if (partPointersToRemove) {\n      const strokePartToErase = new IIStroke()\n      partPointersToRemove.x.forEach((x, i) => strokePartToErase.addPointer({ x, y: partPointersToRemove.y[i], p: 1, t: 1 }))\n      const subStrokes = IIStroke.substract(stroke, strokePartToErase)\n      if (subStrokes.before && subStrokes.before.pointers.length > 1) newStrokes.push(subStrokes.before)\n      if (subStrokes.after && subStrokes.after.pointers.length > 1) newStrokes.push(subStrokes.after)\n    }\n    return newStrokes\n  }\n\n  protected computeScratchOnText(gestureStroke: IIStroke, textSymbol: IIText): IIText | undefined\n  {\n    const charsToRemove = textSymbol.getCharsOverlaps(gestureStroke.pointers)\n    if (textSymbol.chars.length == charsToRemove.length) {\n      return\n    }\n    else {\n      charsToRemove.forEach(c =>\n      {\n        const cIndex = textSymbol.chars.findIndex(c1 => c1.id === c.id)\n        textSymbol.chars.splice(cIndex, 1)\n      })\n      this.texter.updateBounds(textSymbol)\n      return textSymbol\n    }\n  }\n\n  protected computeScratchOnSymbol(gestureStroke: IIStroke, gesture: TGesture, symbol: TIISymbol): { erased?: boolean, replaced?: TIISymbol[] }\n  {\n    switch (symbol.type) {\n      case SymbolType.Stroke: {\n        const strokesScratchedResult = this.computeScratchOnStrokes(gesture, symbol)\n        if (strokesScratchedResult.length) {\n          return {\n            replaced: strokesScratchedResult\n          }\n        }\n        else {\n          return { erased: true }\n        }\n      }\n      case SymbolType.Recognized: {\n        if (symbol.kind === RecognizedKind.Text) {\n          const childrenNotTouch = symbol.strokes.filter(s => !gestureStroke.bounds.overlaps(s.bounds))\n          const childrenTouch = symbol.strokes.filter(s => gestureStroke.bounds.overlaps(s.bounds))\n          const results = childrenTouch.map(s =>\n          {\n            return {\n              symbol: s,\n              result: this.computeScratchOnStrokes(gesture, s)\n            }\n          })\n          if (childrenNotTouch.length === 0 && results.every(r => r.result.length === 0)) {\n            return { erased: true }\n          }\n          else {\n            const strokesToConserve: IIStroke[] = childrenNotTouch.concat(...results.flatMap(r => r.result))\n            const strokeText = new IIRecognizedText(strokesToConserve, { baseline: symbol.baseline, xHeight: symbol.xHeight }, symbol.style)\n            strokeText.decorators = symbol.decorators\n            return {\n              replaced: [strokeText]\n            }\n          }\n        }\n        return {}\n      }\n      case SymbolType.Group: {\n        const childrenNotTouch = symbol.children.filter(s => !gestureStroke.bounds.overlaps(s.bounds))\n        const childrenTouch = symbol.children.filter(s => gestureStroke.bounds.overlaps(s.bounds))\n        const results = childrenTouch.map(s =>\n        {\n          return {\n            symbol: s,\n            result: this.computeScratchOnSymbol(gestureStroke, gesture, s)\n          }\n        })\n        if (childrenNotTouch.length === 0 && results.every(r => r.result.erased)) {\n          return { erased: true }\n        }\n        else {\n          const symbolsGroup: TIISymbol[] = childrenNotTouch\n          results.forEach(r =>\n          {\n            if (r.result.replaced) {\n              symbolsGroup.push(...r.result.replaced)\n            }\n          })\n          const newGroup = new IISymbolGroup(symbolsGroup, symbol.style)\n          newGroup.decorators = symbol.decorators\n          return {\n            replaced: [newGroup]\n          }\n        }\n      }\n      case SymbolType.Text: {\n        const textScratchedResult = this.computeScratchOnText(gestureStroke, symbol)\n        if (textScratchedResult) {\n          return {\n            replaced: [textScratchedResult]\n          }\n        }\n        else {\n          return {\n            erased: true\n          }\n        }\n      }\n      case SymbolType.Shape:\n      case SymbolType.Edge: {\n        return {\n          erased: true\n        }\n      }\n    }\n  }\n\n  async applyScratch(gestureStroke: IIStroke, gesture: TGesture): Promise<void>\n  {\n    this.#logger.debug(\"applyScratchGesture\", { gestureStroke, gesture })\n    if (!gesture.strokeIds.length) {\n      this.#logger.warn(\"applyScratchGesture\", \"Unable to apply underline because there are no strokes\")\n      return\n    }\n    const symbolsToUpdate: TIISymbol[] = []\n    const symbolsToErase: TIISymbol[] = []\n    const symbolsToReplace: { oldSymbols: TIISymbol[], newSymbols: TIISymbol[] } = { oldSymbols: [], newSymbols: [] }\n\n    gesture.strokeIds.forEach(id =>\n    {\n      const sym = this.model.getRootSymbol(id)\n      if (sym && !symbolsToErase.some(s => s.id === sym.id) && !symbolsToReplace.oldSymbols.some(s => s.id === sym.id)) {\n        const result = this.computeScratchOnSymbol(gestureStroke, gesture, sym)\n        if (result.erased) symbolsToErase.push(sym)\n        else if (result.replaced) {\n          symbolsToReplace.newSymbols.push(...result.replaced)\n          symbolsToReplace.oldSymbols.push(sym)\n        }\n      }\n    })\n\n    const promises: Promise<void | TIISymbol[]>[] = []\n    const changes: TIIHistoryChanges = {}\n    if (symbolsToUpdate.length) {\n      promises.push(this.editor.updateSymbols(symbolsToUpdate, false))\n      changes.updated = symbolsToUpdate\n    }\n\n    if (symbolsToErase.length) {\n      promises.push(this.editor.removeSymbols(symbolsToErase.map(s => s.id), false))\n      changes.erased = symbolsToErase\n    }\n\n    if (symbolsToReplace.newSymbols.length) {\n      changes.replaced = symbolsToReplace\n      promises.push(this.editor.replaceSymbols(symbolsToReplace.oldSymbols, symbolsToReplace.newSymbols, false))\n    }\n\n    this.history.push(this.model, changes)\n    await Promise.all(promises)\n  }\n\n  async applyJoinGesture(gestureStroke: IIStroke, gesture: TGesture): Promise<void>\n  {\n    this.#logger.debug(\"applyJoinGesture\", { gestureStroke, gesture })\n\n    const symbolsAbove = this.model.symbols.filter(s => this.model.isSymbolAbove(gestureStroke, s))\n    const symbolsRow = this.model.symbols.filter(s => gestureStroke.id !== s.id && this.model.isSymbolInRow(gestureStroke, s))\n\n    const symbolsBeforeGestureInRow = symbolsRow.filter(s => s.bounds.xMax <= gestureStroke.bounds.xMid)\n    const symbolsOnGestureInRow = symbolsRow.filter(s => s.bounds.xMax > gestureStroke.bounds.xMid && s.bounds.xMin <= gestureStroke.bounds.xMid)\n    const symbolsAfterGestureInRow = symbolsRow.filter(s => s.bounds.xMin > gestureStroke.bounds.xMid)\n    const symbolsBelow = this.model.symbols.filter(s => this.model.isSymbolBelow(gestureStroke, s))\n\n    const changes: TIIHistoryChanges = {}\n    const translate: { symbols: TIISymbol[], tx: number, ty: number }[] = []\n    if (symbolsOnGestureInRow.length) {\n      const symbolToJoin = symbolsOnGestureInRow[0]\n      if (symbolToJoin?.type === SymbolType.Group) {\n        const children = symbolToJoin.children.map(c => c.clone())\n        const childBefore = children.filter(c => c.bounds.xMid <= gestureStroke.bounds.xMid)\n        const childAfter = children.filter(c => c.bounds.xMid > gestureStroke.bounds.xMid)\n        if (childBefore.length && childAfter.length) {\n          const tx = Math.max(...childBefore.map(c => c.bounds.xMax)) - Math.min(...childAfter.map(c => c.bounds.xMin))\n          childAfter.forEach(c => this.translator.applyToSymbol(c, tx, 0))\n          const newGroup = new IISymbolGroup(children, symbolToJoin.style)\n          newGroup.decorators = symbolToJoin.decorators.map(d => d.clone())\n          changes.replaced = {\n            oldSymbols: [symbolToJoin],\n            newSymbols: [newGroup]\n          }\n          if (symbolsAfterGestureInRow.length) {\n            translate.push({ symbols: symbolsAfterGestureInRow, tx, ty: 0 })\n          }\n        }\n        else if (symbolsAfterGestureInRow.length) {\n          const tx = symbolToJoin.bounds.xMax - Math.min(...symbolsAfterGestureInRow.map(s => s.bounds.xMin))\n          translate.push({ symbols: symbolsAfterGestureInRow, tx, ty: 0 })\n        }\n      }\n      else if (symbolToJoin?.type === SymbolType.Recognized) {\n        const strokeText = symbolToJoin.clone()\n        const childBefore = strokeText.strokes.filter(c => c.bounds.xMid <= gestureStroke.bounds.xMid)\n        const childAfter = strokeText.strokes.filter(c => c.bounds.xMid > gestureStroke.bounds.xMid)\n        if (childBefore.length && childAfter.length) {\n          const tx = Math.max(...childBefore.map(c => c.bounds.xMax)) - Math.min(...childAfter.map(c => c.bounds.xMin))\n          childAfter.forEach(c => this.translator.applyToSymbol(c, tx, 0))\n          changes.replaced = {\n            oldSymbols: [symbolToJoin],\n            newSymbols: [strokeText]\n          }\n          if (symbolsAfterGestureInRow.length) {\n            translate.push({ symbols: symbolsAfterGestureInRow, tx, ty: 0 })\n          }\n        }\n        else if (symbolsAfterGestureInRow.length) {\n          const tx = symbolToJoin.bounds.xMax - Math.min(...symbolsAfterGestureInRow.map(s => s.bounds.xMin))\n          translate.push({ symbols: symbolsAfterGestureInRow, tx, ty: 0 })\n        }\n      }\n    }\n    else if (symbolsBeforeGestureInRow.length && symbolsAfterGestureInRow.length) {\n      const lastSymbBefore = this.model.getLastSymbol(symbolsBeforeGestureInRow)!\n      const firstSymbolAfter = this.model.getFirstSymbol(symbolsAfterGestureInRow)!\n\n      const lastXBefore = Math.max(...symbolsBeforeGestureInRow.map(s => s.bounds.xMax))\n      const firstXAfter = Math.min(...symbolsAfterGestureInRow.map(s => s.bounds.xMin))\n      const translateX = lastXBefore - firstXAfter\n\n      const lastSymbBeforeClone = lastSymbBefore.clone()\n      const firstSymbolAfterClone = firstSymbolAfter.clone()\n      this.translator.applyToSymbol(firstSymbolAfterClone, translateX, 0)\n      const symbolsToGroup = lastSymbBefore.type === SymbolType.Group ? (lastSymbBeforeClone as IISymbolGroup).children : [lastSymbBeforeClone]\n      symbolsToGroup.push(...(firstSymbolAfterClone.type === SymbolType.Group ? (firstSymbolAfterClone as IISymbolGroup).children : [firstSymbolAfterClone]))\n\n      if (symbolsToGroup.every(s => s.type === SymbolType.Text)) {\n        const texts = symbolsToGroup as IIText[]\n        const text = new IIText(texts.flatMap(s => s.chars), texts[0].point, Box.createFromBoxes(texts.map(t => t.bounds)))\n        this.texter.setBounds(text)\n        changes.replaced = {\n          oldSymbols: [lastSymbBefore, firstSymbolAfter],\n          newSymbols: [text]\n        }\n      }\n      else if (symbolsToGroup.every(s => s.type === SymbolType.Recognized)) {\n        const strokeTexts = symbolsToGroup as IIRecognizedText[]\n        const strokeText = new IIRecognizedText(strokeTexts.flatMap(s => s.strokes), strokeTexts[0], strokeTexts[0].style)\n        changes.replaced = {\n          oldSymbols: [lastSymbBefore, firstSymbolAfter],\n          newSymbols: [strokeText]\n        }\n      }\n      else {\n        const group = new IISymbolGroup(symbolsToGroup, lastSymbBefore.style)\n        if ([SymbolType.Group, SymbolType.Stroke, SymbolType.Text, SymbolType.Recognized].includes(lastSymbBefore.type)) {\n          (lastSymbBefore as IIStroke).decorators.forEach(d =>\n          {\n            group.decorators.push(new IIDecorator(d.kind, d.style))\n          })\n        }\n        if ([SymbolType.Group, SymbolType.Stroke, SymbolType.Text, SymbolType.Recognized].includes(firstSymbolAfter.type)) {\n          (firstSymbolAfter as IIStroke).decorators.forEach(d =>\n          {\n            if (!group.decorators.some(d1 => d1.kind == d.kind)) {\n              group.decorators.push(new IIDecorator(d.kind, d.style))\n            }\n          })\n        }\n\n        changes.replaced = {\n          oldSymbols: [lastSymbBefore, firstSymbolAfter],\n          newSymbols: [group]\n        }\n      }\n\n      const rest = symbolsAfterGestureInRow.filter(s => s.id !== firstSymbolAfter.id)\n      if (rest.length) {\n        translate.push({ symbols: rest, tx: translateX, ty: 0 })\n      }\n    }\n    else if (symbolsBeforeGestureInRow.length) {\n      const lastSymbolBeforeGesture = this.model.getLastSymbol(symbolsBeforeGestureInRow)!\n      const firstSymbolAfterGesture = this.model.getFirstSymbol(symbolsBelow)\n      if (firstSymbolAfterGesture) {\n        if (this.model.roundToLineGuide(lastSymbolBeforeGesture.bounds.yMid) >= this.model.roundToLineGuide(firstSymbolAfterGesture.bounds.yMid - this.rowHeight)) {\n          const symbolInNextRow = symbolsBelow.filter(s => this.model.isSymbolInRow(firstSymbolAfterGesture, s))\n          if (symbolInNextRow.length) {\n            const translateX = lastSymbolBeforeGesture.bounds.xMax + this.strokeSpaceWidth - firstSymbolAfterGesture.bounds.xMin\n            translate.push({ symbols: symbolInNextRow, tx: translateX, ty: -this.rowHeight })\n          }\n          const symbolsAfterNextRow = symbolsBelow.filter(s => this.model.isSymbolBelow(firstSymbolAfterGesture, s))\n          if (symbolsAfterNextRow.length) {\n            translate.push({ symbols: symbolsAfterNextRow, tx: 0, ty: -this.rowHeight })\n          }\n        }\n      }\n      else {\n        translate.push({ symbols: symbolsBelow, tx: 0, ty: -this.rowHeight })\n      }\n    }\n    else if (symbolsAfterGestureInRow.length) {\n      const firstSymbolAfterGesture = this.model.getFirstSymbol(symbolsAfterGestureInRow)!\n      const lastSymbolAbove = this.model.getLastSymbol(symbolsAbove)\n      if (lastSymbolAbove) {\n        if (this.model.roundToLineGuide(lastSymbolAbove.bounds.yMid) >= this.model.roundToLineGuide(firstSymbolAfterGesture.bounds.yMid - this.rowHeight)) {\n          const translateX = lastSymbolAbove.bounds.xMax + this.strokeSpaceWidth - firstSymbolAfterGesture.bounds.xMin\n          translate.push({ symbols: symbolsAfterGestureInRow, tx: translateX, ty: -this.rowHeight })\n        }\n        else {\n          translate.push({ symbols: symbolsAfterGestureInRow, tx: 0, ty: -this.rowHeight })\n        }\n\n        if (symbolsBelow.length) {\n          translate.push({ symbols: symbolsBelow, tx: 0, ty: -this.rowHeight })\n        }\n      }\n      else {\n        translate.push({ symbols: symbolsAfterGestureInRow.concat(...symbolsBelow), tx: 0, ty: -this.rowHeight })\n      }\n\n    }\n    if (changes.replaced?.oldSymbols.length) {\n      this.editor.replaceSymbols(changes.replaced.oldSymbols, changes.replaced.newSymbols, false)\n    }\n    if (translate.length) {\n      changes.translate = translate\n      Promise.all(translate.map(tr => this.translator.translate(tr.symbols, tr.tx, tr.ty, false)))\n    }\n    this.history.push(this.model, changes)\n  }\n\n  protected createStrokesFromGestureSubStroke(strokeOrigin: IIStroke, subStrokes: { x: number[], y: number[] }[]): IIStroke[]\n  {\n    const strokes: IIStroke[] = []\n    if (subStrokes[0]) {\n      const subStroke = new IIStroke(strokeOrigin.style)\n      subStrokes![0].x.forEach((x, i) =>\n      {\n        subStroke.pointers.push({\n          x,\n          y: subStrokes![0].y[i],\n          p: strokeOrigin.pointers.at(i)?.p || 1,\n          t: strokeOrigin.pointers.at(i)?.t || Math.max(...subStroke.pointers.map(p => p.t + 20))\n        })\n      })\n      strokes.push(subStroke)\n    }\n    if (subStrokes[1]) {\n      const subStroke = new IIStroke(strokeOrigin.style)\n      subStrokes[1].x.forEach((x, i) =>\n      {\n        subStroke.pointers.push({\n          x,\n          y: subStrokes![1].y[i],\n          p: strokeOrigin.pointers.at(subStroke.pointers.length + i)?.p || 1,\n          t: strokeOrigin.pointers.at(subStroke.pointers.length + i)?.t || Math.max(...subStroke.pointers.map(p => p.t + 20))\n        })\n      })\n      strokes.push(subStroke)\n    }\n    return strokes\n  }\n\n  protected computeSplitStroke(strokeOrigin: IIStroke, subStrokes: { x: number[], y: number[] }[]): { before?: IIStroke, after?: IIStroke }\n  {\n    let after: IIStroke | undefined\n    const newStrokes = this.createStrokesFromGestureSubStroke(strokeOrigin, subStrokes)\n\n    if (newStrokes[1]) {\n      after = newStrokes[1]\n      this.translator.applyToSymbol(after, this.strokeSpaceWidth, 0)\n    }\n    return {\n      before: newStrokes[0],\n      after\n    }\n  }\n\n  protected computeSplitStrokeInGroup(gestureStroke: IIStroke, group: IISymbolGroup, subStrokes: { fullStrokeId: string, x: number[], y: number[] }[]): IISymbolGroup[]\n  {\n    const newGroups: IISymbolGroup[] = []\n    const symbolsBefore: TIISymbol[] = []\n    const symbolsAfter: TIISymbol[] = []\n\n    const strokeIdToSplit = subStrokes[0].fullStrokeId\n\n    group.children.forEach(gs =>\n    {\n      if (gs.id === strokeIdToSplit) {\n        const subStroke = this.computeSplitStroke(gs as IIStroke, subStrokes)\n        if (subStroke.before) {\n          symbolsBefore.push(subStroke.before)\n        }\n        if (subStroke.after) {\n          symbolsAfter.push(subStroke.after)\n        }\n      }\n      else if (gs.bounds.xMid < gestureStroke.bounds.xMid) {\n        symbolsBefore.push(gs)\n      }\n      else if (gs.bounds.xMid > gestureStroke.bounds.xMid) {\n        this.translator.applyToSymbol(gs, this.strokeSpaceWidth, 0)\n        symbolsAfter.push(gs)\n      }\n    })\n\n    if (symbolsBefore.length) {\n      newGroups.push(new IISymbolGroup(symbolsBefore, group.style))\n    }\n    if (symbolsAfter.length) {\n      newGroups.push(new IISymbolGroup(symbolsAfter, group.style))\n    }\n    return newGroups\n  }\n\n  protected computeChangesOnSplitStroke(gestureStroke: IIStroke, strokeIdToSplit: string, subStrokes: { fullStrokeId: string, x: number[], y: number[] }[]): TIIHistoryChanges\n  {\n    const translate: { symbols: TIISymbol[], tx: number, ty: number }[] = []\n    const replaced: { oldSymbols: TIISymbol[], newSymbols: TIISymbol[] } = { oldSymbols: [], newSymbols: [] }\n\n    const symbolsAfterGestureInRow = this.model.symbols.filter(s => gestureStroke.id !== s.id && this.model.isSymbolInRow(gestureStroke, s) && gestureStroke.bounds.xMid < s.bounds.xMin)\n\n    const symbolToSplit = this.model.getRootSymbol(strokeIdToSplit)\n    if (symbolToSplit?.type === SymbolType.Group) {\n      const newGroups = this.computeSplitStrokeInGroup(gestureStroke, symbolToSplit, subStrokes)\n      replaced.newSymbols.push(...newGroups)\n      replaced.oldSymbols.push(symbolToSplit)\n    }\n    else if (symbolToSplit?.type === SymbolType.Stroke) {\n      const newStrokes = this.computeSplitStroke(symbolToSplit, subStrokes)\n      if (newStrokes.before) {\n        replaced.newSymbols.push(newStrokes.before)\n      }\n      if (newStrokes.after) {\n        replaced.newSymbols.push(newStrokes.after)\n      }\n      replaced.oldSymbols.push(symbolToSplit)\n    }\n    else if (symbolToSplit?.type === SymbolType.Recognized) {\n      const strokesToSplit = symbolToSplit.strokes.find(s => s.id === strokeIdToSplit)!\n      const strokesBefore = symbolToSplit.strokes.filter(s => s.id !== strokeIdToSplit && s.bounds.xMid < gestureStroke.bounds.xMid)\n      const strokesAfter = symbolToSplit.strokes.filter(s => s.id !== strokeIdToSplit && s.bounds.xMid > gestureStroke.bounds.xMid)\n      const newStrokes = this.computeSplitStroke(strokesToSplit, subStrokes)\n      if (newStrokes.before) {\n        replaced.newSymbols.push(...strokesBefore, newStrokes.before)\n      }\n      if (newStrokes.after) {\n        replaced.newSymbols.push(newStrokes.after, ...strokesAfter)\n      }\n      replaced.oldSymbols.push(symbolToSplit)\n    }\n    if (symbolsAfterGestureInRow.length) {\n      translate.push({ symbols: symbolsAfterGestureInRow, tx: this.strokeSpaceWidth, ty: 0 })\n    }\n\n    return {\n      translate,\n      replaced\n    }\n  }\n\n  protected computeChangesOnSplitGroup(gestureStroke: IIStroke, groupToSplit: IISymbolGroup): TIIHistoryChanges\n  {\n    const translate: { symbols: TIISymbol[], tx: number, ty: number }[] = []\n    const replaced: { oldSymbols: TIISymbol[], newSymbols: TIISymbol[] } = { oldSymbols: [], newSymbols: [] }\n\n    const symbolsAfterGestureInRow = this.model.symbols.filter(s => gestureStroke.id !== s.id && this.model.isSymbolInRow(gestureStroke, s) && gestureStroke.bounds.xMid < s.bounds.xMin)\n\n    const groupSymbolsBefore = groupToSplit.children.filter(s => s.bounds.xMid <= gestureStroke.bounds.xMid)\n    const groupsSymbolsAfter = groupToSplit.children.filter(s => s.bounds.xMid > gestureStroke.bounds.xMid)\n\n    replaced.oldSymbols.push(groupToSplit)\n    if (groupSymbolsBefore.length) {\n      const groupBefore = new IISymbolGroup(groupSymbolsBefore.map(s => s.clone()), groupToSplit.style)\n      groupBefore.decorators = groupToSplit.decorators.map(d => new IIDecorator(d.kind, d.style))\n      replaced.newSymbols.push(groupBefore)\n    }\n    if (groupsSymbolsAfter.length) {\n      const grouAfter = new IISymbolGroup(groupsSymbolsAfter.map(s => s.clone()), groupToSplit.style)\n      grouAfter.decorators = groupToSplit.decorators.map(d => new IIDecorator(d.kind, d.style))\n      this.translator.applyToSymbol(grouAfter, this.strokeSpaceWidth, 0)\n      replaced.newSymbols.push(grouAfter)\n    }\n    if (symbolsAfterGestureInRow?.length) {\n      translate.push({ symbols: symbolsAfterGestureInRow.filter(s => s.id !== groupToSplit.id), tx: this.strokeSpaceWidth, ty: 0 })\n    }\n\n    return {\n      translate,\n      replaced\n    }\n  }\n\n  protected computeChangesOnSplitStrokeText(gestureStroke: IIStroke, strokeTextToSplit: IIRecognizedText): TIIHistoryChanges\n  {\n    const translate: { symbols: TIISymbol[], tx: number, ty: number }[] = []\n    const replaced: { oldSymbols: TIISymbol[], newSymbols: TIISymbol[] } = { oldSymbols: [], newSymbols: [] }\n\n    const symbolsAfterGestureInRow = this.model.symbols.filter(s => gestureStroke.id !== s.id && this.model.isSymbolInRow(gestureStroke, s) && gestureStroke.bounds.xMid < s.bounds.xMin)\n\n    const strokesBefore = strokeTextToSplit.strokes.filter(s => s.bounds.xMid <= gestureStroke.bounds.xMid)\n    const strokesAfter = strokeTextToSplit.strokes.filter(s => s.bounds.xMid > gestureStroke.bounds.xMid)\n\n    replaced.oldSymbols.push(strokeTextToSplit)\n    if (strokesBefore.length) {\n      const strokeTextBefore = new IIRecognizedText(strokesBefore.map(s => s.clone()), strokeTextToSplit, strokeTextToSplit.style)\n      strokeTextBefore.decorators = strokeTextToSplit.decorators.map(d => new IIDecorator(d.kind, d.style))\n      replaced.newSymbols.push(strokeTextBefore)\n    }\n    if (strokesAfter.length) {\n      const strokeTextAfter = new IIRecognizedText(strokesAfter.map(s => s.clone()), strokeTextToSplit, strokeTextToSplit.style)\n      strokeTextAfter.decorators = strokeTextToSplit.decorators.map(d => new IIDecorator(d.kind, d.style))\n      this.translator.applyToSymbol(strokeTextAfter, this.strokeSpaceWidth, 0)\n      replaced.newSymbols.push(strokeTextAfter)\n    }\n    if (symbolsAfterGestureInRow?.length) {\n      translate.push({ symbols: symbolsAfterGestureInRow.filter(s => s.id !== strokeTextToSplit.id), tx: this.strokeSpaceWidth, ty: 0 })\n    }\n\n    return {\n      translate,\n      replaced\n    }\n  }\n\n  protected computeChangesOnSplitText(gestureStroke: IIStroke, textToSplit: IIText): TIIHistoryChanges\n  {\n    const translate: { symbols: TIISymbol[], tx: number, ty: number }[] = []\n    const replaced: { oldSymbols: TIISymbol[], newSymbols: TIISymbol[] } = { oldSymbols: [], newSymbols: [] }\n\n    const symbolsAfterGestureInRow = this.model.symbols.filter(s => gestureStroke.id !== s.id && this.model.isSymbolInRow(gestureStroke, s) && gestureStroke.bounds.xMid < s.bounds.xMin)\n\n    const charsBefore = textToSplit.chars.filter(c => c.bounds.x + c.bounds.width / 2 <= gestureStroke.bounds.xMid)\n    const charsAfter = textToSplit.chars.filter(c => c.bounds.x + c.bounds.width / 2 > gestureStroke.bounds.xMid)\n    const newTexts: IIText[] = []\n    if (charsBefore.length && charsAfter.length) {\n      const textBefore = new IIText(charsBefore, textToSplit.point, Box.createFromBoxes(charsBefore.map(c => c.bounds)))\n      this.texter.setBounds(textBefore)\n      newTexts.push(textBefore)\n      const pointAfter: TPoint = {\n        x: textBefore.point.x + textBefore.bounds.width + this.texter.getSpaceWidth(computeAverage(textBefore.chars.map(c => c.fontSize))),\n        y: textBefore.point.y\n      }\n      const textAfter = new IIText(charsAfter, pointAfter, Box.createFromBoxes(charsAfter.map(c => c.bounds)))\n      this.texter.setBounds(textAfter)\n      newTexts.push(textAfter)\n      replaced.newSymbols = newTexts\n      replaced.oldSymbols = [textToSplit]\n    }\n    if (symbolsAfterGestureInRow?.length) {\n      translate.push({ symbols: symbolsAfterGestureInRow.filter(s => s.id !== gestureStroke.id), tx: this.strokeSpaceWidth, ty: 0 })\n    }\n\n    return {\n      translate,\n      replaced\n    }\n  }\n\n  async applyInsertGesture(gestureStroke: IIStroke, gesture: TGesture): Promise<void>\n  {\n    this.#logger.debug(\"applyInsertGesture\", { gestureStroke, gesture })\n\n    const symbolsRow = this.model.symbols.filter(s => gestureStroke.id !== s.id && this.model.isSymbolInRow(gestureStroke, s))\n    const textToSplit = symbolsRow.find(s => s.type === SymbolType.Text && isBetween(gestureStroke.bounds.xMid, s.bounds.xMin, s.bounds.xMax)) as IIText | undefined\n    const groupToSplit = symbolsRow.find(s => s.type === SymbolType.Group && isBetween(gestureStroke.bounds.xMid, s.bounds.xMin, s.bounds.xMax)) as IISymbolGroup | undefined\n    const strokeTextToSplit = symbolsRow.find(s => s.type === SymbolType.Recognized && isBetween(gestureStroke.bounds.xMid, s.bounds.xMin, s.bounds.xMax)) as IIRecognizedText | undefined\n\n    const symbolsBeforeGestureInRow = symbolsRow.filter(s => gestureStroke.bounds.xMid > s.bounds.xMax)\n    const symbolsAfterGestureInRow = symbolsRow.filter(s => gestureStroke.bounds.xMid < s.bounds.xMin)\n\n    const symbolsBelow = this.model.symbols.filter(s => this.model.isSymbolBelow(gestureStroke, s))\n\n\n    let changes: TIIHistoryChanges | undefined\n    if (gesture.strokeIds.length && gesture.subStrokes?.length) {\n      changes = this.computeChangesOnSplitStroke(gestureStroke, gesture.strokeIds[0], gesture.subStrokes)\n    }\n    else if (groupToSplit) {\n      changes = this.computeChangesOnSplitGroup(gestureStroke, groupToSplit)\n    }\n    else if (textToSplit) {\n      changes = this.computeChangesOnSplitText(gestureStroke, textToSplit)\n    }\n    else if (strokeTextToSplit) {\n      changes = this.computeChangesOnSplitStrokeText(gestureStroke, strokeTextToSplit)\n    }\n    else if (symbolsAfterGestureInRow.length) {\n      const translate: { symbols: TIISymbol[], tx: number, ty: number }[] = []\n      let translateX = 0\n      if (symbolsBeforeGestureInRow.length) {\n        translateX = Math.min(...symbolsBeforeGestureInRow.map(s => s.bounds.xMin)) - Math.min(...symbolsAfterGestureInRow.map(s => s.bounds.xMin))\n      }\n\n      switch (this.insertAction) {\n        case InsertAction.LineBreak:\n          translate.push({ symbols: symbolsAfterGestureInRow, tx: translateX, ty: this.rowHeight })\n          if (symbolsBelow.length) {\n            translate.push({ symbols: symbolsBelow, tx: 0, ty: this.rowHeight })\n          }\n          break\n        case InsertAction.Insert:\n          translate.push({ symbols: symbolsAfterGestureInRow, tx: this.strokeSpaceWidth * 2, ty: 0 })\n          break\n      }\n      changes = { translate }\n    }\n    else if (symbolsBeforeGestureInRow.length && symbolsBelow.length && this.insertAction === InsertAction.LineBreak) {\n      changes = { translate: [{ symbols: symbolsBelow, tx: 0, ty: this.rowHeight }] }\n    }\n\n    if (changes) {\n      const promises: Promise<void>[] = []\n      if (changes.translate?.length) {\n        promises.push(...changes.translate.map(tr => this.translator.translate(tr.symbols, tr.tx, tr.ty, false)))\n      }\n      if (changes.replaced?.newSymbols.length) {\n        promises.push(this.editor.replaceSymbols(changes.replaced.oldSymbols, changes.replaced.newSymbols, false))\n      }\n      this.history.push(this.model, changes)\n      await Promise.all(promises)\n    }\n  }\n\n  async applyUnderlineGesture(gestureStroke: IIStroke, gesture: TGesture): Promise<void>\n  {\n    this.#logger.debug(\"applyUnderlineGesture\", { gestureStroke, gesture })\n    if (!gesture.strokeIds.length) {\n      this.#logger.warn(\"applyUnderlineGesture\", \"Unable to apply underline because there are no strokes\")\n      return\n    }\n\n    const changes: TIIHistoryChanges = { decorator: [] }\n    const symbolIds: string[] = []\n    gesture.strokeIds.forEach(id =>\n    {\n      const sym = this.model.getRootSymbol(id)\n      if (sym && [SymbolType.Group, SymbolType.Stroke, SymbolType.Text, SymbolType.Recognized].includes(sym.type) && !symbolIds.includes(sym.id)) {\n        const symWithDec = sym as (IIText | IIStroke | IISymbolGroup | IIRecognizedText)\n        const underline = new IIDecorator(DecoratorKind.Underline, this.editor.penStyle)\n        const index = symWithDec.decorators.findIndex(d => d.kind === DecoratorKind.Underline)\n        const added = index === -1\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        added ? symWithDec.decorators.push(underline) : symWithDec.decorators.splice(index, 1)\n        this.model.updateSymbol(symWithDec)\n        this.renderer.drawSymbol(symWithDec)\n        changes.decorator?.push({ symbol: symWithDec, decorator: underline, added })\n        symbolIds.push(symWithDec.id)\n      }\n    })\n    if (changes.decorator?.length) {\n      this.history.push(this.model, changes)\n    }\n  }\n\n  async applyStrikeThroughGesture(gestureStroke: IIStroke, gesture: TGesture): Promise<void | TIISymbol[]>\n  {\n    this.#logger.debug(\"applyStrikeThroughGesture\", { gestureStroke, gesture })\n    if (!gesture.strokeIds.length) {\n      this.#logger.warn(\"applyStrikeThroughGesture\", \"Unable to apply strikethrough because there are no strokes\")\n      return\n    }\n    switch (this.strikeThroughAction) {\n      case StrikeThroughAction.Draw: {\n        const changes: TIIHistoryChanges = { decorator: [] }\n        const symbolIds: string[] = []\n        gesture.strokeIds.forEach(id =>\n        {\n          const symbol = this.model.getRootSymbol(id)\n          if (symbol && [SymbolType.Group, SymbolType.Stroke, SymbolType.Text, SymbolType.Recognized].includes(symbol.type) && !symbolIds.includes(symbol.id)) {\n            const symWithDec = symbol as (IIText | IIStroke | IISymbolGroup | IIRecognizedText)\n            const strikethrough = new IIDecorator(DecoratorKind.Strikethrough, this.editor.penStyle)\n            const index = symWithDec.decorators.findIndex(d => d.kind === DecoratorKind.Strikethrough)\n            const added = index === -1\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n            added ? symWithDec.decorators.push(strikethrough) : symWithDec.decorators.splice(index, 1)\n            this.model.updateSymbol(symWithDec)\n            this.renderer.drawSymbol(symWithDec)\n            changes.decorator?.push({ symbol: symWithDec, decorator: strikethrough, added })\n            symbolIds.push(symWithDec.id)\n          }\n        })\n        if (changes.decorator?.length) {\n          this.history.push(this.model, changes)\n        }\n        break\n      }\n      case StrikeThroughAction.Erase: {\n        return this.editor.removeSymbols(gesture.strokeIds)\n      }\n      default:\n        this.#logger.warn(\"#applyStrikeThroughGesture\", `Unknow OnStrikeThrough: ${ this.strikeThroughAction }, values allowed are: ${ StrikeThroughAction.Draw }, ${ StrikeThroughAction.Erase }`)\n        break\n    }\n  }\n\n  async apply(gestureStroke: IIStroke, gesture: TGesture): Promise<void>\n  {\n    this.#logger.info(\"apply\", { gestureStroke, gesture })\n    this.editor.updateSymbolsStyle([gestureStroke.id], { opacity: (gestureStroke.style.opacity || 1) / 2 }, false)\n    await this.editor.removeSymbol(gestureStroke.id, false)\n    await this.editor.synchronizeStrokesWithJIIX()\n    switch (gesture.gestureType) {\n      case \"UNDERLINE\":\n        await this.applyUnderlineGesture(gestureStroke, gesture)\n        break\n      case \"SCRATCH\":\n        await this.applyScratch(gestureStroke, gesture)\n        break\n      case \"JOIN\":\n        await this.applyJoinGesture(gestureStroke, gesture)\n        break\n      case \"INSERT\":\n        await this.applyInsertGesture(gestureStroke, gesture)\n        break\n      case \"STRIKETHROUGH\":\n        await this.applyStrikeThroughGesture(gestureStroke, gesture)\n        break\n      case \"SURROUND\":\n        await this.applySurroundGesture(gestureStroke, gesture)\n        break\n      default:\n        this.#logger.warn(\"apply\", `Gesture unknow: ${ gesture.gestureType }`)\n        break\n    }\n    this.editor.event.emitGestured({ gestureType: gesture.gestureType, stroke: gestureStroke })\n    this.editor.svgDebugger.apply()\n    return Promise.resolve()\n  }\n\n  async getGestureFromContextLess(gestureStroke: IIStroke): Promise<TGesture | undefined>\n  {\n    const gesture = await this.recognizer.recognizeGesture(gestureStroke)\n    if (!gesture) return\n    switch (gesture.gestureType) {\n      case \"surround\": {\n        const hasSymbolsToSurrond = this.model.symbols.some(s =>\n        {\n          if (s.id !== gestureStroke.id && gestureStroke.bounds.contains(s.bounds)) {\n            return this.surroundAction === SurroundAction.Select || [SymbolType.Group, SymbolType.Stroke, SymbolType.Text].includes(s.type)\n          }\n          return false\n        })\n        if (hasSymbolsToSurrond) {\n          return {\n            gestureType: \"SURROUND\",\n            gestureStrokeId: gestureStroke.id,\n            strokeAfterIds: [],\n            strokeBeforeIds: [],\n            strokeIds: [],\n          }\n        }\n        return\n      }\n      case \"left-right\":\n      case \"right-left\": {\n        const symbolsToUnderline = this.model.symbols.filter(s =>\n        {\n          return s.id !== gestureStroke.id && [SymbolType.Text, SymbolType.Stroke, SymbolType.Group].includes(s.type) &&\n            isBetween(s.bounds.xMid, gestureStroke.bounds.xMin, gestureStroke.bounds.xMax) &&\n            isBetween(gestureStroke.bounds.yMid, s.bounds.y + s.bounds.height * 3 / 4, s.bounds.y + s.bounds.height * 5 / 4)\n        })\n        if (symbolsToUnderline.length) {\n          return {\n            gestureType: \"UNDERLINE\",\n            gestureStrokeId: gestureStroke.id,\n            strokeAfterIds: [],\n            strokeBeforeIds: [],\n            strokeIds: symbolsToUnderline.map(s => s.id),\n          }\n        }\n        const symbolsToStrikeThrough = this.model.symbols.filter(s =>\n        {\n          return s.id !== gestureStroke.id && [SymbolType.Text, SymbolType.Stroke, SymbolType.Group].includes(s.type) &&\n            isBetween(s.bounds.xMid, gestureStroke.bounds.xMin, gestureStroke.bounds.xMax) &&\n            isBetween(gestureStroke.bounds.yMid, s.bounds.y + s.bounds.height / 4, s.bounds.y + s.bounds.height * 3 / 4)\n        })\n        if (symbolsToStrikeThrough.length) {\n          return {\n            gestureType: \"STRIKETHROUGH\",\n            gestureStrokeId: gestureStroke.id,\n            strokeAfterIds: [],\n            strokeBeforeIds: [],\n            strokeIds: symbolsToStrikeThrough.map(s => s.id),\n          }\n        }\n        return\n      }\n      case \"scratch\": {\n        const symbolsToErase = this.model.symbols.filter(s =>\n        {\n          return s.id !== gestureStroke.id &&\n            (\n              gestureStroke.bounds.overlaps(s.bounds) && [SymbolType.Stroke, SymbolType.Text, SymbolType.Group].includes(s.type) ||\n              gestureStroke.bounds.contains(s.bounds) && [SymbolType.Shape, SymbolType.Edge].includes(s.type)\n            )\n        })\n\n        if (symbolsToErase.length) {\n          return {\n            gestureType: \"SCRATCH\",\n            gestureStrokeId: gestureStroke.id,\n            strokeAfterIds: [],\n            strokeBeforeIds: [],\n            strokeIds: symbolsToErase.map(s => s.id),\n          }\n        }\n        return\n      }\n      case \"bottom-top\": {\n        const hasSymbolsInRow = this.model.symbols.some(s =>\n          s.id !== gestureStroke.id &&\n          [SymbolType.Text, SymbolType.Stroke, SymbolType.Group].includes(s.type) &&\n          isBetween(s.bounds.yMid, gestureStroke.bounds.yMin, gestureStroke.bounds.yMax)\n        )\n        if (hasSymbolsInRow) {\n          return {\n            gestureType: \"JOIN\",\n            gestureStrokeId: gestureStroke.id,\n            strokeAfterIds: [],\n            strokeBeforeIds: [],\n            strokeIds: [],\n          }\n        }\n        return\n      }\n      case \"top-bottom\": {\n        const hasSymbolsInRow = this.model.symbols.some(s =>\n          s.id !== gestureStroke.id &&\n          [SymbolType.Text, SymbolType.Stroke, SymbolType.Group].includes(s.type) &&\n          isBetween(s.bounds.yMid, gestureStroke.bounds.yMin, gestureStroke.bounds.yMax)\n        )\n        if (hasSymbolsInRow) {\n          return {\n            gestureType: \"INSERT\",\n            gestureStrokeId: gestureStroke.id,\n            strokeAfterIds: [],\n            strokeBeforeIds: [],\n            strokeIds: [],\n          }\n        }\n        return\n      }\n      case \"none\":\n      default:\n        return\n    }\n  }\n}\n", "/**\n * @group Menu\n */\nexport type TSubMenuParam =\n{\n  trigger: HTMLElement,\n  menuTitle?: string,\n  subMenu: HTMLElement,\n  position: \"top\" | \"left\" | \"right\" | \"right-top\" | \"bottom\" | \"bottom-left\" | \"bottom-right\"\n}\n\n/**\n * @group Menu\n */\nexport class IIMenuSub {\n  element: HTMLDivElement\n  content: HTMLElement\n\n  constructor(param : TSubMenuParam) {\n    this.element = document.createElement(\"div\")\n    this.element.classList.add(\"sub-menu\")\n    this.element.appendChild(param.trigger)\n    this.content = document.createElement(\"div\")\n    if(param.menuTitle) {\n      const menuTitleElement = document.createElement(\"h3\")\n      menuTitleElement.classList.add(\"ms-menu-title\")\n      menuTitleElement.textContent = param.menuTitle\n      this.content.appendChild(menuTitleElement)\n    }\n    this.content.classList.add(\"sub-menu-content\", param.position)\n    this.content.appendChild(param.subMenu)\n    this.element.appendChild(this.content)\n\n    param.trigger.addEventListener(\"pointerdown\", () => this.toggle())\n    document.addEventListener(\"pointerdown\", (e) => {\n      if (!this.element.contains(e.target as HTMLElement)) {\n        this.close()\n      }\n    })\n  }\n\n  open(): void {\n    this.content.classList.add(\"open\")\n  }\n\n  close(): void {\n    this.content.classList.remove(\"open\")\n  }\n\n  toggle(): void {\n    this.content.classList.toggle(\"open\")\n  }\n\n  unwrap(): void {\n    this.content.classList.remove(\"sub-menu-content\")\n    this.element.insertAdjacentElement(\"beforebegin\", this.content)\n    this.element.style.display = \"none\"\n  }\n\n  wrap(): void {\n    this.content.classList.add(\"sub-menu-content\")\n    this.element.appendChild(this.content)\n    this.element.style.display = \"block\"\n  }\n\n}\n", "import menuIcon from \"../assets/svg/menu.svg\"\nimport languageIcon from \"../assets/svg/language.svg\"\nimport trashIcon from \"../assets/svg/trash.svg\"\nimport undoIcon from \"../assets/svg/undo.svg\"\nimport redoIcon from \"../assets/svg/redo.svg\"\nimport translateIcon from \"../assets/svg/translate.svg\"\nimport gestureIcon from \"../assets/svg/spock-hand-gesture.svg\"\nimport guideIcon from \"../assets/svg/orthogonal-view.svg\"\nimport snapIcon from \"../assets/svg/arrow-to-dot.svg\"\nimport debugIcon from \"../assets/svg/wolf.svg\"\nimport downloadIcon from \"../assets/svg/download.svg\"\nimport uploadIcon from \"../assets/svg/upload.svg\"\nimport { EditorTool, EditorWriteTool } from \"../Constants\"\nimport { LoggerCategory, LoggerManager } from \"../logger\"\nimport { IIModel } from \"../model\"\nimport { IIMenu, TMenuItemBoolean, TMenuItemButton, TMenuItemButtonList, TMenuItemSelect } from \"./IIMenu\"\nimport { TIISymbol } from \"../symbol\"\nimport { InsertAction, StrikeThroughAction, SurroundAction } from \"../gesture\"\nimport { IIMenuSub, TSubMenuParam } from \"./IIMenuSub\"\nimport { getAvailableLanguageList, PartialDeep } from \"../utils\"\nimport { InteractiveInkEditor } from \"../editor\"\n\n/**\n * @group Menu\n */\nexport class IIMenuAction extends IIMenu\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.MENU)\n\n  editor: InteractiveInkEditor\n  id: string\n  wrapper?: HTMLElement\n  menuLanguage!: IIMenuSub\n  menuClear?: HTMLButtonElement\n  menuUndo?: HTMLButtonElement\n  menuRedo?: HTMLButtonElement\n  menuConvert?: HTMLButtonElement\n\n  guideGaps = [\n    { label: \"S\", value: \"25\" },\n    { label: \"M\", value: \"50\" },\n    { label: \"L\", value: \"100\" },\n    { label: \"XL\", value: \"150\" },\n  ]\n\n  constructor(editor: InteractiveInkEditor, id = \"ms-menu-action\")\n  {\n    super()\n    this.id = id\n    this.editor = editor\n  }\n\n  get model(): IIModel\n  {\n    return this.editor.model\n  }\n\n  get isMobile(): boolean\n  {\n    return this.editor.renderer.parent.clientWidth < 700\n  }\n\n  protected createMenuClear(): HTMLElement\n  {\n    this.menuClear = document.createElement(\"button\")\n    this.menuClear.id = `${ this.id }-clear`\n    this.menuClear.classList.add(\"ms-menu-button\", \"square\")\n    this.menuClear.innerHTML = trashIcon\n    this.menuClear.addEventListener(\"pointerup\", () =>\n    {\n      this.#logger.info(`${ this.id }.clear`)\n      this.editor.clear()\n    })\n    return this.menuClear\n  }\n\n  protected createMenuLanguage(): HTMLElement\n  {\n    const triggerBtn = document.createElement(\"button\")\n    triggerBtn.id = `${ this.id }-language-trigger`\n    triggerBtn.classList.add(\"ms-menu-button\", \"square\")\n    triggerBtn.innerHTML = languageIcon\n\n    const select = document.createElement(\"select\")\n    select.classList.add(\"select-language\")\n    select.id = `${ this.id }-language`\n    getAvailableLanguageList(this.editor.configuration)\n      .then(json =>\n      {\n        const languages = json.result as { [key: string]: string }\n        Object.keys(languages).forEach(key =>\n        {\n          const selected = key === this.editor.configuration.recognition.lang\n          const opt = new Option(languages[key], key, selected, selected)\n          select.appendChild(opt)\n        })\n      })\n    select.addEventListener(\"change\", (e) =>\n    {\n      this.#logger.info(`${ this.id }.selectLanguage`)\n      const value = (e.target as HTMLInputElement).value\n      this.editor.changeLanguage(value)\n    })\n    const params: TSubMenuParam = {\n      trigger: triggerBtn,\n      subMenu: select,\n      position: \"bottom-right\"\n    }\n    this.menuLanguage = new IIMenuSub(params)\n    return this.menuLanguage.element\n  }\n\n  protected createMenuUndo(): HTMLElement\n  {\n    this.menuUndo = document.createElement(\"button\")\n    this.menuUndo.id = `${ this.id }-undo`\n    this.menuUndo.classList.add(\"ms-menu-button\", \"square\")\n    this.menuUndo.innerHTML = undoIcon\n    this.menuUndo.addEventListener(\"pointerup\", async () =>\n    {\n      this.#logger.info(`${ this.id }.undo`)\n      await this.editor.undo()\n    })\n    return this.menuUndo\n  }\n\n  protected createMenuRedo(): HTMLElement\n  {\n    this.menuRedo = document.createElement(\"button\")\n    this.menuRedo.id = `${ this.id }-redo`\n    this.menuRedo.classList.add(\"ms-menu-button\", \"square\")\n    this.menuRedo.innerHTML = redoIcon\n    this.menuRedo.addEventListener(\"pointerup\", async () =>\n    {\n      this.#logger.info(`${ this.id }.redo`)\n      await this.editor.redo()\n    })\n    return this.menuRedo\n  }\n\n  protected createMenuConvert(): HTMLElement\n  {\n    this.menuConvert = document.createElement(\"button\")\n    this.menuConvert.id = `${ this.id }-convert`\n    this.menuConvert.classList.add(\"ms-menu-button\", \"square\")\n    this.menuConvert.innerHTML = translateIcon\n    this.menuConvert.addEventListener(\"pointerup\", () =>\n    {\n      this.#logger.info(`${ this.id }.convert`)\n      this.editor.convert()\n    })\n    return this.menuConvert\n  }\n\n  protected createMenuGesture(): HTMLDivElement\n  {\n    const trigger = document.createElement(\"button\")\n    trigger.id = `${ this.id }-gesture`\n    trigger.classList.add(\"ms-menu-button\", \"square\")\n    trigger.innerHTML = gestureIcon\n    const subMenuWrapper = document.createElement(\"div\")\n    subMenuWrapper.classList.add(\"ms-menu-colmun\")\n\n    const surroundActionValues: { label: string, value: string }[] = []\n    for (const key in SurroundAction) {\n      const value = SurroundAction[key as keyof typeof SurroundAction]\n      surroundActionValues.push({ label: key, value })\n    }\n    const strikeThroughActionValues: { label: string, value: string }[] = []\n    for (const key in StrikeThroughAction) {\n      const value = StrikeThroughAction[key as keyof typeof StrikeThroughAction]\n      strikeThroughActionValues.push({ label: key, value })\n    }\n    const splitActionValues: { label: string, value: string }[] = []\n    for (const key in InsertAction) {\n      const value = InsertAction[key as keyof typeof InsertAction]\n      splitActionValues.push({ label: key, value })\n    }\n    const menuItems: (TMenuItemBoolean | TMenuItemSelect)[] = [\n      {\n        type: \"checkbox\",\n        id: `${ this.id }-gesture-detect`,\n        label: \"Detect gesture\",\n        initValue: this.editor.writer.detectGesture,\n        callback: (value) =>\n        {\n          this.#logger.info(`${ this.id }.gesture-detect`, { value })\n          this.editor.writer.detectGesture = value\n          this.editor.tool = EditorTool.Write\n          this.editor.writer.tool = EditorWriteTool.Pencil\n        }\n      },\n      {\n        type: \"select\",\n        id: `${ this.id }-gesture-surround`,\n        label: \"On surround\",\n        values: surroundActionValues,\n        initValue: this.editor.gesture.surroundAction,\n        callback: (value) =>\n        {\n          this.#logger.info(`${ this.id }.gesture-surround`, { value })\n          this.editor.gesture.surroundAction = value as SurroundAction\n          this.editor.tool = EditorTool.Write\n          this.editor.writer.tool = EditorWriteTool.Pencil\n        }\n      },\n      {\n        type: \"select\",\n        id: `${ this.id }-gesture-strikethrough`,\n        label: \"On strikethrough\",\n        values: strikeThroughActionValues,\n        initValue: this.editor.gesture.strikeThroughAction,\n        callback: (value) =>\n        {\n          this.#logger.info(`${ this.id }.gesture-strikethrough`, { value })\n          this.editor.gesture.strikeThroughAction = value as StrikeThroughAction\n          this.editor.tool = EditorTool.Write\n          this.editor.writer.tool = EditorWriteTool.Pencil\n        }\n      },\n      {\n        type: \"select\",\n        id: `${ this.id }-gesture-insert`,\n        label: \"On insert\",\n        values: splitActionValues,\n        initValue: this.editor.gesture.insertAction,\n        callback: (value) =>\n        {\n          this.#logger.info(`${ this.id }.gesture-InsertAction`, { value })\n          this.editor.gesture.insertAction = value as InsertAction\n          this.editor.tool = EditorTool.Write\n          this.editor.writer.tool = EditorWriteTool.Pencil\n        }\n      },\n    ]\n    menuItems.forEach(i =>\n    {\n      subMenuWrapper.appendChild(this.createMenuItem(i))\n    })\n    const params: TSubMenuParam = {\n      trigger: trigger,\n      menuTitle: \"Gesture\",\n      subMenu: subMenuWrapper,\n      position: \"right-top\"\n    }\n    return new IIMenuSub(params).element\n  }\n\n  protected createMenuGuide(): HTMLDivElement\n  {\n    const trigger = document.createElement(\"button\")\n    trigger.id = `${ this.id }-guide`\n    trigger.classList.add(\"ms-menu-button\", \"square\")\n    trigger.innerHTML = guideIcon\n\n    const subMenuWrapper = document.createElement(\"div\")\n    subMenuWrapper.classList.add(\"ms-menu-colmun\")\n\n    const menuItems: (TMenuItemBoolean | TMenuItemSelect | TMenuItemButtonList)[] = [\n      {\n        type: \"checkbox\",\n        id: `${ this.id }-guide-enable`,\n        label: \"Show guide\",\n        initValue: this.editor.configuration.rendering.guides.enable,\n        callback: (value) =>\n        {\n          this.#logger.info(`${ this.id }.guide-enable`, { value })\n          this.editor.configuration.rendering.guides.enable = value as boolean\n          this.editor.renderingConfiguration = this.editor.configuration.rendering\n        }\n      },\n      {\n        type: \"select\",\n        id: `${ this.id }-guide-type`,\n        label: \"Guide style\",\n        values: [\n          { label: \"Line\", value: \"line\" },\n          { label: \"Grid\", value: \"grid\" },\n          { label: \"Point\", value: \"point\" },\n        ],\n        initValue: this.editor.configuration.rendering.guides.type,\n        callback: (value) =>\n        {\n          this.#logger.info(`${ this.id }.guide-type`, { value })\n          this.editor.configuration.rendering.guides.type = value as (\"line\" | \"grid\" | \"point\")\n          this.editor.renderingConfiguration = this.editor.configuration.rendering\n        }\n      },\n      {\n        type: \"list\",\n        id: `${ this.id }-guide-size`,\n        label: \"Guide style\",\n        values: this.guideGaps,\n        initValue: this.editor.configuration.rendering.guides.gap.toString(),\n        callback: (value) =>\n        {\n          this.#logger.info(`${ this.id }.guide-size`, { value })\n          this.editor.configuration.rendering.guides.gap = +value\n          this.editor.renderingConfiguration = this.editor.configuration.rendering\n        }\n      },\n    ]\n    menuItems.forEach(i =>\n    {\n      subMenuWrapper.appendChild(this.createMenuItem(i))\n    })\n    const params: TSubMenuParam = {\n      trigger: trigger,\n      menuTitle: \"Guide\",\n      subMenu: subMenuWrapper,\n      position: \"right-top\"\n    }\n    return new IIMenuSub(params).element\n  }\n\n  protected createMenuSnap(): HTMLDivElement\n  {\n    const trigger = document.createElement(\"button\")\n    trigger.id = `${ this.id }-snap`\n    trigger.classList.add(\"ms-menu-button\", \"square\")\n    trigger.innerHTML = snapIcon\n\n    const subMenuWrapper = document.createElement(\"div\")\n    subMenuWrapper.classList.add(\"ms-menu-colmun\")\n\n    const menuItems: (TMenuItemBoolean | TMenuItemSelect)[] = [\n      {\n        type: \"checkbox\",\n        id: `${ this.id }-snap-to-guide`,\n        label: \"Snap to guide\",\n        initValue: this.editor.snaps.configuration.guide,\n        callback: (value) => this.editor.snaps.configuration.guide = value\n      },\n      {\n        type: \"checkbox\",\n        id: `${ this.id }-snap-to-element`,\n        label: \"Snap to element\",\n        initValue: this.editor.snaps.configuration.symbol,\n        callback: (value) => this.editor.snaps.configuration.symbol = value\n      },\n      {\n        type: \"select\",\n        id: `${ this.id }-snap-angle`,\n        label: \"Snap angle\",\n        values: [\n          { label: \"None\", value: \"0\" },\n          { label: \"10°\", value: \"10\" },\n          { label: \"30°\", value: \"30\" },\n          { label: \"45°\", value: \"45\" },\n          { label: \"90°\", value: \"90\" },\n          { label: \"180°\", value: \"180\" },\n        ],\n        initValue: this.editor.snaps.configuration.angle.toString(),\n        callback: (angle) => this.editor.snaps.configuration.angle = +angle\n      },\n    ]\n    menuItems.forEach(i =>\n    {\n      subMenuWrapper.appendChild(this.createMenuItem(i))\n    })\n    const params: TSubMenuParam = {\n      trigger: trigger,\n      menuTitle: \"Snap\",\n      subMenu: subMenuWrapper,\n      position: \"right-top\"\n    }\n    return new IIMenuSub(params).element\n  }\n\n  protected createMenuDebug(): HTMLDivElement\n  {\n    const trigger = document.createElement(\"button\")\n    trigger.id = `${ this.id }-debug`\n    trigger.classList.add(\"ms-menu-button\", \"square\")\n    trigger.innerHTML = debugIcon\n\n    const menuItems: TMenuItemBoolean[] = [\n      {\n        type: \"checkbox\",\n        id: `${ this.id }-debug-bounding-box`,\n        label: \"Show bounding box\",\n        initValue: this.editor.svgDebugger.boundingBoxVisibility,\n        callback: (debug) => this.editor.svgDebugger.boundingBoxVisibility = debug\n      },\n      {\n        type: \"checkbox\",\n        id: `${ this.id }-debug-recognition-box`,\n        label: \"Show recognition box\",\n        initValue: this.editor.svgDebugger.recognitionBoxVisibility,\n        callback: (debug) => this.editor.svgDebugger.recognitionBoxVisibility = debug\n      },\n      {\n        type: \"checkbox\",\n        id: `${ this.id }-debug-bounding-item-box`,\n        label: \"Show recognition item box\",\n        initValue: this.editor.svgDebugger.recognitionItemBoxVisibility,\n        callback: (debug) => this.editor.svgDebugger.recognitionItemBoxVisibility = debug\n      },\n      {\n        type: \"checkbox\",\n        id: `${ this.id }-debug-snap-points`,\n        label: \"Show snap points\",\n        initValue: this.editor.svgDebugger.snapPointsVisibility,\n        callback: (debug) => this.editor.svgDebugger.snapPointsVisibility = debug\n      },\n      {\n        type: \"checkbox\",\n        id: `${ this.id }-debug-vertices`,\n        label: \"Show vertices\",\n        initValue: this.editor.svgDebugger.verticesVisibility,\n        callback: (debug) => this.editor.svgDebugger.verticesVisibility = debug\n      },\n    ]\n    const subMenuWrapper = document.createElement(\"div\")\n    subMenuWrapper.classList.add(\"ms-menu-colmun\")\n    menuItems.forEach(i =>\n    {\n      subMenuWrapper.appendChild(this.createMenuItem(i))\n    })\n    const params: TSubMenuParam = {\n      trigger: trigger,\n      menuTitle: \"Debug\",\n      subMenu: subMenuWrapper,\n      position: \"right-top\"\n    }\n    return new IIMenuSub(params).element\n  }\n\n  protected createMenuExport(): HTMLElement\n  {\n    const trigger = document.createElement(\"button\")\n    trigger.id = `${ this.id }-export`\n    trigger.classList.add(\"ms-menu-button\", \"square\")\n    trigger.innerHTML = downloadIcon\n\n    const menuItems: TMenuItemButton[] = [\n      {\n        type: \"button\",\n        id: `${ this.id }-export-json`,\n        label: \"json\",\n        callback: () =>\n        {\n          this.editor.downloadAsJson()\n        }\n      },\n      {\n        type: \"button\",\n        id: `${ this.id }-export-svg`,\n        label: \"svg\",\n        callback: () =>\n        {\n          this.editor.downloadAsSVG()\n        }\n      },\n      {\n        type: \"button\",\n        id: `${ this.id }-export-png`,\n        label: \"png\",\n        callback: () =>\n        {\n          this.editor.downloadAsPNG()\n        }\n      },\n    ]\n    const subMenuWrapper = document.createElement(\"div\")\n    subMenuWrapper.classList.add(\"ms-menu-colmun\")\n    menuItems.forEach(i =>\n    {\n      subMenuWrapper.appendChild(this.createMenuItem(i))\n    })\n    const params: TSubMenuParam = {\n      trigger: trigger,\n      menuTitle: \"Export\",\n      subMenu: subMenuWrapper,\n      position: \"right-top\"\n    }\n    return new IIMenuSub(params).element\n  }\n\n  protected async readFileAsText(file: File): Promise<string>\n  {\n    return new Promise((resolve, reject) =>\n    {\n      const reader = new FileReader()\n      reader.onerror = reject;\n      reader.onload = () => {\n        resolve(reader.result as string)\n      }\n      if (file) {\n        reader.readAsText(file)\n      }\n    })\n  }\n\n  protected createMenuImport(): HTMLElement\n  {\n    const trigger = document.createElement(\"button\")\n    trigger.id = `${ this.id }-import`\n    trigger.classList.add(\"ms-menu-button\", \"square\")\n    trigger.innerHTML = uploadIcon\n\n    const subMenuWrapper = document.createElement(\"div\")\n    subMenuWrapper.classList.add(\"ms-menu-colmun\")\n\n    const importInput = document.createElement(\"input\")\n    importInput.type = \"file\"\n    importInput.accept = \".json\"\n    importInput.multiple = false\n    importInput.addEventListener(\"change\", () => {\n      importBtn.disabled = !importInput.files?.length\n    })\n\n    subMenuWrapper.appendChild(importInput)\n    const importBtn = document.createElement(\"button\")\n    importBtn.classList.add(\"ms-menu-button\")\n    importBtn.innerText = \"Import\"\n    importBtn.disabled = true\n    subMenuWrapper.appendChild(importBtn)\n    importBtn.addEventListener(\"pointerup\", async (e) =>\n    {\n      e.preventDefault()\n      e.stopPropagation()\n      if (importInput.files?.length) {\n        const fileString = await this.readFileAsText(importInput.files[0])\n        const symbols = JSON.parse(fileString) as PartialDeep<TIISymbol>[]\n        await this.editor.createSymbols(symbols)\n        importInput.value = \"\"\n        importBtn.disabled = true\n      }\n    })\n    const params: TSubMenuParam = {\n      trigger: trigger,\n      menuTitle: \"Import\",\n      subMenu: subMenuWrapper,\n      position: \"right-top\"\n    }\n    return new IIMenuSub(params).element\n  }\n\n  protected unselectAll(): void\n  {\n    this.wrapper?.querySelectorAll(\"*\").forEach(e => e.classList.remove(\"active\"))\n  }\n\n  protected closeAllSubMenu(): void\n  {\n    this.wrapper?.querySelectorAll(\".open\").forEach(e => e.classList.remove(\"open\"))\n  }\n\n  render(layer: HTMLElement): void\n  {\n    if (this.editor.configuration.menu.action.enable) {\n      const menuTrigger = document.createElement(\"button\")\n      menuTrigger.id = this.id\n      menuTrigger.classList.add(\"ms-menu-button\", \"square\")\n      menuTrigger.innerHTML = menuIcon\n\n      const subMenuWrapper = document.createElement(\"div\")\n      subMenuWrapper.classList.add(\"ms-menu-colmun\")\n      subMenuWrapper.appendChild(this.createMenuGesture())\n      subMenuWrapper.appendChild(this.createMenuGuide())\n      subMenuWrapper.appendChild(this.createMenuSnap())\n      subMenuWrapper.appendChild(this.createMenuDebug())\n      subMenuWrapper.appendChild(this.createMenuImport())\n      subMenuWrapper.appendChild(this.createMenuExport())\n\n      this.wrapper = document.createElement(\"div\")\n      this.wrapper.classList.add(\"ms-menu\", \"ms-menu-top-left\", \"ms-menu-row\")\n      this.wrapper.appendChild(new IIMenuSub({ trigger: menuTrigger, subMenu: subMenuWrapper, position: \"bottom\" }).element)\n      this.wrapper.appendChild(this.createMenuLanguage())\n      this.wrapper.appendChild(this.createMenuClear())\n      this.wrapper.appendChild(this.createMenuUndo())\n      this.wrapper.appendChild(this.createMenuRedo())\n      this.wrapper.appendChild(this.createMenuConvert())\n\n      layer.appendChild(this.wrapper)\n      this.update()\n      this.show()\n    }\n  }\n\n  update(): void\n  {\n    if (this.menuLanguage) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n      this.isMobile ? this.menuLanguage.wrap() : this.menuLanguage.unwrap()\n    }\n    if (this.menuClear) {\n      this.menuClear.disabled = this.editor.history.context.empty\n    }\n    if (this.menuUndo) {\n      this.menuUndo.disabled = !this.editor.history.context.canUndo\n    }\n    if (this.menuRedo) {\n      this.menuRedo.disabled = !this.editor.history.context.canRedo\n    }\n    if (this.menuConvert) {\n      this.menuConvert.disabled = !this.editor.extractStrokesFromSymbols(this.model.symbols).length\n    }\n  }\n\n  show(): void\n  {\n    if (this.wrapper) {\n      this.wrapper.style.visibility = \"visible\"\n    }\n  }\n\n  hide(): void\n  {\n    if (this.wrapper) {\n      this.wrapper.style.visibility = \"hidden\"\n    }\n  }\n\n  destroy(): void\n  {\n    if (this.wrapper) {\n      while (this.wrapper.lastChild) {\n        this.wrapper.removeChild(this.wrapper.lastChild)\n      }\n      this.wrapper.remove()\n      this.wrapper = undefined\n      this.menuClear = undefined\n      this.menuUndo = undefined\n      this.menuRedo = undefined\n      this.menuConvert = undefined\n    }\n  }\n}\n", "import pencilIcon from \"../assets/svg/edit-pencil.svg\"\nimport cursorIcon from \"../assets/svg/frame-select.svg\"\nimport eraseIcon from \"../assets/svg/erase.svg\"\nimport handIcon from \"../assets/svg/drag-hand-gesture.svg\"\nimport rectangleIcon from \"../assets/svg/rectangle.svg\"\nimport rhombusIcon from \"../assets/svg/rhombus.svg\"\nimport circleIcon from \"../assets/svg/circle.svg\"\nimport ellipseIcon from \"../assets/svg/ellipse.svg\"\nimport triangleIcon from \"../assets/svg/triangle.svg\"\nimport lineIcon from \"../assets/svg/linear.svg\"\nimport arrowIcon from \"../assets/svg/linear-arrow.svg\"\nimport doubleArrowIcon from \"../assets/svg/linear-double-arrow.svg\"\nimport { EditorTool, EditorWriteTool } from \"../Constants\"\nimport { LoggerCategory, LoggerManager } from \"../logger\"\nimport { IIMenu } from \"./IIMenu\"\nimport { IIMenuSub } from \"./IIMenuSub\"\nimport { TSubMenuParam } from \"./IIMenuSub\"\nimport { InteractiveInkEditor } from \"../editor\"\n\n/**\n * @group Menu\n */\nexport class IIMenuTool extends IIMenu\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.MENU)\n\n  editor: InteractiveInkEditor\n  id: string\n  wrapper?: HTMLDivElement\n  writeBtn?: HTMLButtonElement\n  menuSelect?: HTMLButtonElement\n  menuMove?: HTMLButtonElement\n  menuErase?: HTMLButtonElement\n  menuShape?: HTMLButtonElement\n  subMenuShape?: {\n    rectangle: HTMLButtonElement,\n    circle: HTMLButtonElement,\n    triangle: HTMLButtonElement,\n    ellipse: HTMLButtonElement\n    rhombus: HTMLButtonElement\n  }\n  menuEdge?: HTMLButtonElement\n  subMenuEdge?: {\n    line: HTMLButtonElement,\n    arrow: HTMLButtonElement,\n    doubleArrow: HTMLButtonElement,\n  }\n\n  constructor(editor: InteractiveInkEditor, id = \"ms-menu-tool\")\n  {\n    super()\n    this.id = id\n    this.#logger.info(\"constructor\")\n    this.editor = editor\n  }\n\n  protected createMenuWrite(): HTMLElement\n  {\n    this.writeBtn = document.createElement(\"button\")\n    this.writeBtn.id = `${this.id}-write-pencil`\n    this.writeBtn.classList.add(\"ms-menu-button\", \"square\")\n    this.writeBtn.innerHTML = pencilIcon\n    this.writeBtn.addEventListener(\"pointerup\", () =>\n    {\n      this.unselectAll()\n      this.writeBtn!.classList.add(\"active\")\n      this.editor.tool = EditorTool.Write\n      this.editor.writer.tool = EditorWriteTool.Pencil\n    })\n    return this.writeBtn\n  }\n\n  protected createMenuMove(): HTMLElement\n  {\n    this.menuMove = document.createElement(\"button\")\n    this.menuMove.id = `${this.id}-move`\n    this.menuMove.classList.add(\"ms-menu-button\", \"square\")\n    this.menuMove.innerHTML = handIcon\n    this.menuMove.addEventListener(\"pointerup\", () =>\n    {\n      this.unselectAll()\n      this.menuMove!.classList.add(\"active\")\n      this.editor.tool = EditorTool.Move\n    })\n    return this.menuMove\n  }\n\n  protected createMenuSelect(): HTMLElement\n  {\n    this.menuSelect = document.createElement(\"button\")\n    this.menuSelect.id = `${this.id}-select`\n    this.menuSelect.classList.add(\"ms-menu-button\", \"square\")\n    this.menuSelect.innerHTML = cursorIcon\n    this.menuSelect.addEventListener(\"pointerup\", () =>\n    {\n      this.unselectAll()\n      this.menuSelect!.classList.add(\"active\")\n      this.editor.tool = EditorTool.Select\n    })\n    return this.menuSelect\n  }\n\n  protected createMenuErase(): HTMLElement\n  {\n    this.menuErase = document.createElement(\"button\")\n    this.menuErase.id = `${this.id}-erase`\n    this.menuErase.classList.add(\"ms-menu-button\", \"square\")\n    this.menuErase.innerHTML = eraseIcon\n    this.menuErase.addEventListener(\"pointerup\", () =>\n    {\n      this.unselectAll()\n      this.menuErase!.classList.add(\"active\")\n      this.editor.tool = EditorTool.Erase\n    })\n    return this.menuErase\n  }\n\n  protected createShapeSubMenu(icon: string, tool: EditorWriteTool): HTMLButtonElement\n  {\n    const subMenuShape = document.createElement(\"button\")\n    subMenuShape.id = `${this.id}-write-shape-${tool}`\n    subMenuShape.classList.add(\"ms-menu-button\", \"square\")\n    subMenuShape.innerHTML = icon\n    subMenuShape.addEventListener(\"pointerup\", () =>\n    {\n      this.unselectAll()\n      this.editor.tool = EditorTool.Write\n      this.editor.writer.tool = tool\n      subMenuShape.classList.add(\"active\")\n      this.menuShape!.innerHTML = icon\n      this.menuShape!.classList.add(\"active\")\n      const subMenuContent = this.menuShape!.nextSibling\n      if (subMenuContent) {\n        (subMenuContent as HTMLElement).classList.remove(\"open\")\n      }\n    })\n    return subMenuShape\n  }\n\n  protected createMenuShape(): HTMLElement\n  {\n    this.menuShape = document.createElement(\"button\")\n    this.menuShape.id = `${this.id}-write-shape`\n    this.menuShape.classList.add(\"ms-menu-button\", \"square\")\n    this.menuShape.innerHTML = rectangleIcon\n    this.subMenuShape = {\n      circle: this.createShapeSubMenu(circleIcon, EditorWriteTool.Circle),\n      rectangle: this.createShapeSubMenu(rectangleIcon, EditorWriteTool.Rectangle),\n      triangle: this.createShapeSubMenu(triangleIcon, EditorWriteTool.Triangle),\n      ellipse: this.createShapeSubMenu(ellipseIcon, EditorWriteTool.Ellipse),\n      rhombus: this.createShapeSubMenu(rhombusIcon, EditorWriteTool.Rhombus),\n    }\n    const subMenuContent = document.createElement(\"div\")\n    subMenuContent.id = `${this.id}-write-shape-list`\n    subMenuContent.classList.add(\"ms-menu-row\", \"sub-menu-content-shape\")\n    subMenuContent.appendChild(this.subMenuShape.rectangle)\n    subMenuContent.appendChild(this.subMenuShape.circle)\n    subMenuContent.appendChild(this.subMenuShape.ellipse)\n    subMenuContent.appendChild(this.subMenuShape.triangle)\n    subMenuContent.appendChild(this.subMenuShape.rhombus)\n\n    const params: TSubMenuParam = {\n      trigger: this.menuShape,\n      subMenu: subMenuContent,\n      position: \"top\"\n    }\n\n    return new IIMenuSub(params).element\n  }\n\n  protected createEdgeSubMenu(square: string, tool: EditorWriteTool): HTMLButtonElement\n  {\n    const subMenuEdge = document.createElement(\"button\")\n    subMenuEdge.id = `${this.id}-write-edge-${tool}`\n    subMenuEdge.classList.add(\"ms-menu-button\", \"square\")\n    subMenuEdge.innerHTML = square\n    subMenuEdge.addEventListener(\"pointerup\", () =>\n    {\n      this.unselectAll()\n      this.editor.tool = EditorTool.Write\n      this.editor.writer.tool = tool\n      subMenuEdge.classList.add(\"active\")\n      this.menuEdge!.innerHTML = square\n      this.menuEdge!.classList.add(\"active\")\n      const subMenuContent = this.menuEdge!.nextSibling\n      if (subMenuContent) {\n        (subMenuContent as HTMLElement).classList.remove(\"open\")\n      }\n    })\n    return subMenuEdge\n  }\n\n  protected createMenuEdge(): HTMLElement\n  {\n    this.menuEdge = document.createElement(\"button\")\n    this.menuEdge.id = `${this.id}-write-edge`\n    this.menuEdge.classList.add(\"ms-menu-button\", \"square\")\n    this.menuEdge.innerHTML = lineIcon\n    this.subMenuEdge = {\n      line: this.createEdgeSubMenu(lineIcon, EditorWriteTool.Line),\n      arrow: this.createEdgeSubMenu(arrowIcon, EditorWriteTool.Arrow),\n      doubleArrow: this.createEdgeSubMenu(doubleArrowIcon, EditorWriteTool.DoubleArrow),\n    }\n    const subMenuContent = document.createElement(\"div\")\n    subMenuContent.id = `${this.id}-write-edge-list`\n    subMenuContent.classList.add(\"ms-menu-row\", \"sub-menu-content-edge\")\n    subMenuContent.appendChild(this.subMenuEdge.line)\n    subMenuContent.appendChild(this.subMenuEdge.arrow)\n    subMenuContent.appendChild(this.subMenuEdge.doubleArrow)\n\n    const params: TSubMenuParam = {\n      trigger: this.menuEdge,\n      subMenu: subMenuContent,\n      position: \"top\"\n    }\n\n    return new IIMenuSub(params).element\n  }\n\n  protected unselectAll(): void\n  {\n    this.wrapper?.querySelectorAll(\"*\").forEach(e => e.classList.remove(\"active\"))\n  }\n\n  update(): void\n  {\n    this.unselectAll()\n    switch (this.editor.tool) {\n      case EditorTool.Erase:\n        this.menuErase?.classList.add(\"active\")\n        break;\n      case EditorTool.Move:\n        this.menuMove?.classList.add(\"active\")\n        break;\n      case EditorTool.Select:\n        this.menuSelect?.classList.add(\"active\")\n        break;\n      case EditorTool.Write:\n        switch (this.editor.writer.tool) {\n          case EditorWriteTool.Circle:\n            this.menuShape?.classList.add(\"active\")\n            this.subMenuShape?.circle?.classList.add(\"active\")\n            break;\n          case EditorWriteTool.Ellipse:\n            this.menuShape?.classList.add(\"active\")\n            this.subMenuShape?.ellipse?.classList.add(\"active\")\n            break;\n          case EditorWriteTool.Triangle:\n            this.menuShape?.classList.add(\"active\")\n            this.subMenuShape?.triangle?.classList.add(\"active\")\n            break;\n          case EditorWriteTool.Rectangle:\n            this.menuShape?.classList.add(\"active\")\n            this.subMenuShape?.rectangle?.classList.add(\"active\")\n            break;\n          case EditorWriteTool.Line:\n            this.menuEdge?.classList.add(\"active\")\n            this.subMenuEdge?.line?.classList.add(\"active\")\n            break;\n          case EditorWriteTool.Arrow:\n            this.menuEdge?.classList.add(\"active\")\n            this.subMenuEdge?.arrow?.classList.add(\"active\")\n            break;\n          case EditorWriteTool.DoubleArrow:\n            this.menuEdge?.classList.add(\"active\")\n            this.subMenuEdge?.doubleArrow?.classList.add(\"active\")\n            break;\n          default:\n            this.writeBtn?.classList.add(\"active\")\n            break;\n        }\n        break;\n    }\n  }\n\n  render(layer: HTMLElement): void\n  {\n    if (this.editor.configuration.menu.tool.enable) {\n      this.wrapper = document.createElement(\"div\")\n      this.wrapper.classList.add(\"ms-menu\", \"ms-menu-bottom\", \"ms-menu-row\")\n\n      this.wrapper.appendChild(this.createMenuWrite())\n      this.wrapper.appendChild(this.createMenuMove())\n      this.wrapper.appendChild(this.createMenuSelect())\n      this.wrapper.appendChild(this.createMenuErase())\n      this.wrapper.appendChild(this.createMenuEdge())\n      this.wrapper.appendChild(this.createMenuShape())\n\n      layer.appendChild(this.wrapper)\n      this.update()\n      this.show()\n    }\n  }\n\n  show(): void\n  {\n    if (this.wrapper) {\n      this.wrapper.style.visibility = \"visible\"\n    }\n  }\n\n  hide(): void\n  {\n    if (this.wrapper) {\n      this.wrapper.style.visibility = \"hidden\"\n    }\n  }\n\n  destroy(): void\n  {\n    if (this.wrapper) {\n      while (this.wrapper.lastChild) {\n        this.wrapper.removeChild(this.wrapper.lastChild)\n      }\n      this.wrapper.remove()\n      this.writeBtn = undefined\n      this.menuSelect = undefined\n      this.menuMove = undefined\n      this.menuErase = undefined\n      this.menuShape = undefined\n      this.subMenuShape = undefined\n      this.menuEdge = undefined\n      this.subMenuEdge = undefined\n      this.wrapper = undefined\n    }\n  }\n}\n", "import styleIcon from \"../assets/svg/palette.svg\"\nimport { EditorTool, EditorWriteTool } from \"../Constants\"\nimport { LoggerCategory, LoggerManager } from \"../logger\"\nimport { IIModel } from \"../model\"\nimport { SymbolType, TIISymbol } from \"../symbol\"\nimport { IIMenu, TMenuItemColorList } from \"./IIMenu\"\nimport { IIMenuSub } from \"./IIMenuSub\"\nimport { TSubMenuParam } from \"./IIMenuSub\"\nimport { InteractiveInkEditor } from \"../editor\"\n\n/**\n * @group Menu\n */\nexport class IIMenuStyle extends IIMenu\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.MENU)\n\n  editor: InteractiveInkEditor\n  id: string\n  wrapper?: HTMLDivElement\n  subMenu?: IIMenuSub\n  triggerBtn?: HTMLButtonElement\n  menuColorStroke?: HTMLDivElement\n  menuColorFill?: HTMLDivElement\n  menuThickness?: HTMLDivElement\n  menuFontSize?: HTMLDivElement\n  menuFontWeight?: HTMLDivElement\n  menuStrokeOpacity?: HTMLDivElement\n\n  constructor(editor: InteractiveInkEditor, id = \"ms-menu-style\")\n  {\n    super()\n    this.id = id\n    this.#logger.info(\"constructor\")\n    this.editor = editor\n  }\n\n  get model(): IIModel\n  {\n    return this.editor.model\n  }\n\n  get symbolsSelected(): TIISymbol[]\n  {\n    return this.model.symbolsSelected\n  }\n\n  get writeShape(): boolean\n  {\n    return ![EditorWriteTool.Arrow, EditorWriteTool.DoubleArrow, EditorWriteTool.Line, EditorWriteTool.Pencil].includes(this.editor.writer.tool)\n  }\n\n  get rowHeight(): number\n  {\n    return this.editor.configuration.rendering.guides.gap\n  }\n\n  get isMobile(): boolean\n  {\n    return this.editor.renderer.parent.clientWidth < 700\n  }\n\n  protected createMenuStroke(): HTMLDivElement\n  {\n    const symbolsStyles = this.symbolsSelected.map(s => s.style)\n    const hasUniqColor = symbolsStyles.length && symbolsStyles.every(st => st.color === symbolsStyles[0]?.color)\n    const color = hasUniqColor && symbolsStyles[0]?.color ? symbolsStyles[0]?.color : this.editor.penStyle.color as string\n    const menuColorStrokeDef: TMenuItemColorList = {\n      type: \"colors\",\n      label: \"Colors\",\n      id: `${ this.id }-color`,\n      fill: false,\n      values: this.colors,\n      initValue: color,\n      callback: (color) =>\n      {\n        this.editor.penStyle = { color }\n        this.editor.updateSymbolsStyle(this.symbolsSelected.map(s => s.id), { color })\n      },\n    }\n    const menuColor = this.createColorList(menuColorStrokeDef)\n    this.menuColorStroke = this.createWrapCollapsible(menuColor, \"Colors\")\n    this.menuColorStroke.id = `${ this.id }-color`\n    return this.menuColorStroke\n  }\n\n  protected createMenuColorFill(): HTMLDivElement\n  {\n    const symbolsStyles = this.symbolsSelected.map(s => s.style)\n    const hasUniqColor = symbolsStyles.length && symbolsStyles.every(st => st.color === symbolsStyles[0]?.color)\n    const color = hasUniqColor && symbolsStyles[0].color ? symbolsStyles[0].color : this.editor.penStyle.color as string\n    const menuColorStrokeDef: TMenuItemColorList = {\n      type: \"colors\",\n      label: \"Fill\",\n      id: `${ this.id }-fill`,\n      fill: true,\n      values: this.colors,\n      initValue: color,\n      callback: (fill) =>\n      {\n        this.editor.penStyle = { fill }\n        this.editor.updateSymbolsStyle(this.symbolsSelected.map(s => s.id), { fill })\n      },\n    }\n    const menuColor = this.createColorList(menuColorStrokeDef)\n    this.menuColorFill = this.createWrapCollapsible(menuColor, \"Fill\")\n    this.menuColorFill.id = `${ this.id }-fill`\n    return this.menuColorFill\n  }\n\n  protected createMenuThickness(): HTMLDivElement\n  {\n    const wrapper = document.createElement(\"div\")\n    wrapper.id = `${ this.id }-thickness-list`\n    wrapper.classList.add(\"ms-menu-row\", \"thickness-list\")\n\n    const symbolsStyles = this.symbolsSelected.map(s => s.style)\n    const hasUniqWidth = symbolsStyles.length && symbolsStyles.every(st => st.width === symbolsStyles[0].width)\n    const width = hasUniqWidth ? symbolsStyles[0].width : this.editor.penStyle.width\n\n    this.thicknessList.forEach((size) =>\n    {\n      const btn = document.createElement(\"button\")\n      btn.id = `${ this.id }-thickness-${ size.label }-btn`\n      btn.classList.add(\"ms-menu-button\", \"square\")\n      btn.textContent = size.label\n      if (width === size.value) {\n        btn.classList.add(\"active\")\n      }\n      btn.addEventListener(\"pointerup\", (e) =>\n      {\n        e.preventDefault()\n        e.stopPropagation()\n        this.editor.penStyle = { width: size.value }\n        wrapper.querySelectorAll(\"*\").forEach(e => e.classList.remove(\"active\"))\n        btn.classList.add(\"active\")\n        if (this.symbolsSelected.length) {\n          this.editor.updateSymbolsStyle(this.symbolsSelected.map(s => s.id), { width: size.value })\n          this.editor.selector.resetSelectedGroup(this.symbolsSelected)\n        }\n      })\n      wrapper.appendChild(btn)\n    })\n    this.menuThickness = this.createWrapCollapsible(wrapper, \"Thickness\")\n    this.menuThickness.id = `${ this.id }-thickness`\n    return this.menuThickness\n  }\n\n  protected createMenuFontSize(): HTMLDivElement\n  {\n    const wrapper = document.createElement(\"div\")\n    wrapper.id = `${ this.id }-font-size-list`\n    wrapper.classList.add(\"ms-menu-row\", \"font-size-list\")\n\n    this.fontSizeList.forEach((size) =>\n    {\n      const btn = document.createElement(\"button\")\n      btn.id = `${ this.id }-font-size-${ size.label }-btn`\n      btn.classList.add(\"ms-menu-button\", \"square\")\n      btn.textContent = size.label\n      if (this.editor.configuration.fontStyle.size === size.value) {\n        btn.classList.add(\"active\")\n      }\n      btn.addEventListener(\"pointerup\", (e) =>\n      {\n        e.preventDefault()\n        e.stopPropagation()\n        wrapper.querySelectorAll(\"*\").forEach(e => e.classList.remove(\"active\"))\n        btn.classList.add(\"active\")\n        if (size.value === \"auto\") {\n          this.editor.configuration.fontStyle.size = \"auto\"\n        }\n        else {\n          const fontSize = (size.value as number)\n          this.editor.configuration.fontStyle.size = fontSize\n          const textSymbols = this.symbolsSelected.filter(s => s.type === SymbolType.Text || (s.type === SymbolType.Group && s.extractText().length))\n          this.editor.updateTextFontStyle(textSymbols.map(s => s.id), { fontSize: fontSize * this.rowHeight })\n          this.editor.selector.resetSelectedGroup(this.symbolsSelected)\n        }\n      })\n      wrapper.appendChild(btn)\n    })\n    this.menuFontSize = this.createWrapCollapsible(wrapper, \"Font size\")\n    this.menuFontSize.id = `${ this.id }-font-size`\n    return this.menuFontSize\n  }\n\n  protected createMenuFontWeight(): HTMLDivElement\n  {\n    const wrapper = document.createElement(\"div\")\n    wrapper.id = `${ this.id }-font-weight-list`\n    wrapper.classList.add(\"ms-menu-row\", \"font-weight-list\")\n\n    this.fontWeightList.forEach((weight) =>\n    {\n      const btn = document.createElement(\"button\")\n      btn.id = `${ this.id }-font-weight-${ weight.label }-btn`\n      btn.classList.add(\"ms-menu-button\", \"center\")\n      btn.textContent = weight.label\n      if (this.editor.configuration.fontStyle.weight === weight.value) {\n        btn.classList.add(\"active\")\n      }\n      btn.addEventListener(\"pointerup\", (e) =>\n      {\n        e.preventDefault()\n        e.stopPropagation()\n        wrapper.querySelectorAll(\"*\").forEach(e => e.classList.remove(\"active\"))\n        btn.classList.add(\"active\")\n        this.editor.configuration.fontStyle.weight = weight.value as \"auto\" | \"normal\" | \"bold\"\n        if (this.editor.configuration.fontStyle.weight !== \"auto\") {\n          const textSymbols = this.symbolsSelected.filter(s => s.type === SymbolType.Text || (s.type === SymbolType.Group && s.extractText().length))\n          this.editor.updateTextFontStyle(textSymbols.map(s => s.id), { fontWeight: this.editor.configuration.fontStyle.weight })\n          this.editor.selector.resetSelectedGroup(this.symbolsSelected)\n        }\n      })\n      wrapper.appendChild(btn)\n    })\n    this.menuFontWeight = this.createWrapCollapsible(wrapper, \"Font weight\")\n    this.menuFontWeight.id = `${ this.id }-font-weight`\n    return this.menuFontWeight\n  }\n\n  protected createMenuOpacity(): HTMLDivElement\n  {\n    const symbolsStyles = this.symbolsSelected.map(s => s.style)\n    const hasUniqOpacity = symbolsStyles.length && symbolsStyles.every(st => st.opacity === symbolsStyles[0]?.opacity)\n    const currentOpacity = (hasUniqOpacity && symbolsStyles[0]?.opacity ? symbolsStyles[0]?.opacity : (this.editor.penStyle.opacity || 1)) * 100 as number\n\n    const wrapper = document.createElement(\"div\")\n    wrapper.id = `${ this.id }-opacity-input-wrapper`\n    const input = document.createElement(\"input\")\n    input.id = `${ this.id }-opacity-input`\n    input.setAttribute(\"name\", `opacity`)\n    input.setAttribute(\"type\", \"range\")\n    input.setAttribute(\"step\", \"1\")\n    input.setAttribute(\"min\", \"1\")\n    input.setAttribute(\"max\", \"100\")\n    wrapper.appendChild(input)\n\n    const output = document.createElement(\"output\")\n    output.setAttribute(\"for\", `opacity`)\n    output.innerHTML = currentOpacity ? `${ currentOpacity }` : \"-\"\n    wrapper.appendChild(output)\n\n    if (currentOpacity) {\n      input.setAttribute(\"value\", currentOpacity.toString())\n    }\n    input.addEventListener(\"input\", (evt) =>\n    {\n      const value = (evt.target as HTMLInputElement).value as unknown as number\n      output.innerHTML = `${ value }%`\n      this.editor.penStyle = { opacity: value / 100 }\n      if (this.symbolsSelected.length) {\n        this.editor.updateSymbolsStyle(this.symbolsSelected.map(s => s.id), { opacity: value / 100 })\n      }\n    })\n    this.menuStrokeOpacity = this.createWrapCollapsible(wrapper, \"Opacity\")\n    this.menuStrokeOpacity.id = `${ this.id }-opacity`\n    return this.menuStrokeOpacity\n  }\n\n  render(layer: HTMLElement): void\n  {\n    if (this.editor.configuration.menu.style.enable) {\n      this.triggerBtn = document.createElement(\"button\")\n      this.triggerBtn.id = this.id\n      this.triggerBtn.classList.add(\"ms-menu-button\", \"square\")\n      this.triggerBtn.innerHTML = styleIcon\n\n      const subMenuContent = document.createElement(\"div\")\n      subMenuContent.classList.add(\"ms-menu-colmun\")\n      subMenuContent.appendChild(this.createMenuStroke())\n      subMenuContent.appendChild(this.createMenuColorFill())\n      subMenuContent.appendChild(this.createMenuThickness())\n      subMenuContent.appendChild(this.createMenuFontSize())\n      subMenuContent.appendChild(this.createMenuFontWeight())\n      subMenuContent.appendChild(this.createMenuOpacity())\n\n      const params: TSubMenuParam = {\n        trigger: this.triggerBtn,\n        subMenu: subMenuContent,\n        position: \"bottom-left\",\n      }\n      this.subMenu = new IIMenuSub(params)\n\n      this.wrapper = document.createElement(\"div\")\n      this.wrapper.classList.add(\"ms-menu\", \"ms-menu-top-right\")\n      this.wrapper.appendChild(this.subMenu.element)\n      layer.appendChild(this.wrapper)\n      this.update()\n    }\n  }\n\n  update(): void\n  {\n    if (this.subMenu) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n      this.isMobile ? this.subMenu.wrap() : this.subMenu.unwrap()\n    }\n\n    if (this.editor.tool === EditorTool.Write) {\n      this.show()\n      if (this.menuColorStroke) {\n        this.menuColorStroke.style.display = \"block\"\n      }\n      if (this.menuColorFill) {\n        this.menuColorFill.style.display = this.writeShape ? \"block\" : \"none\"\n      }\n      if (this.menuThickness) {\n        this.menuThickness.style.display = \"block\"\n      }\n      if (this.menuFontSize) {\n        this.menuFontSize.style.display = \"block\"\n      }\n      if (this.menuFontWeight) {\n        this.menuFontWeight.style.display = \"block\"\n      }\n      if (this.menuStrokeOpacity) {\n        this.menuStrokeOpacity.style.display = \"block\"\n      }\n    }\n    else if (this.editor.tool === EditorTool.Select) {\n      this.show()\n      if (this.menuColorStroke) {\n        this.menuColorStroke.style.display = \"block\"\n      }\n      if (this.menuColorFill) {\n        const shapeSelected = this.model.symbolsSelected.length && this.model.symbolsSelected.some(s => s.type === SymbolType.Shape)\n        this.menuColorFill.style.display = shapeSelected ? \"block\" : \"none\"\n      }\n      if (this.menuThickness) {\n        this.menuThickness.style.display = \"block\"\n      }\n      if (this.menuFontSize) {\n        this.menuFontSize.style.display = \"block\"\n      }\n      if (this.menuFontWeight) {\n        this.menuFontWeight.style.display = \"block\"\n      }\n      if (this.menuStrokeOpacity) {\n        this.menuStrokeOpacity.style.display = \"block\"\n      }\n    }\n    else {\n      this.hide()\n    }\n  }\n\n  show(): void\n  {\n    if (this.wrapper) {\n      this.wrapper.style.visibility = \"visible\"\n    }\n  }\n\n  hide(): void\n  {\n    if (this.wrapper) {\n      this.wrapper.style.visibility = \"hidden\"\n    }\n  }\n\n  destroy(): void\n  {\n    if (this.wrapper) {\n      while (this.wrapper.lastChild) {\n        this.wrapper.removeChild(this.wrapper.lastChild)\n      }\n      this.wrapper.remove()\n      this.wrapper = undefined\n      this.subMenu = undefined\n      this.triggerBtn = undefined\n      this.menuColorStroke = undefined\n      this.menuColorFill = undefined\n      this.menuThickness = undefined\n      this.menuFontSize = undefined\n      this.menuFontWeight = undefined\n      this.menuStrokeOpacity = undefined\n    }\n  }\n}\n", "import ArrowDown from \"../assets/svg/nav-arrow-down.svg\"\nimport { SELECTION_MARGIN } from \"../Constants\"\nimport { LoggerCategory, LoggerManager } from \"../logger\"\nimport { DecoratorKind, IIDecorator, IIRecognizedText, IIStroke, IISymbolGroup, IIText, RecognizedKind, SymbolType, TIISymbol } from \"../symbol\"\nimport { IIMenu, TMenuItemBoolean, TMenuItemButton, TMenuItemColorList } from \"./IIMenu\"\nimport { createUUID } from \"../utils\"\nimport { IIMenuSub, TSubMenuParam } from \"./IIMenuSub\"\nimport { InteractiveInkEditor } from \"../editor\"\n/**\n * @group Menu\n */\nexport class IIMenuContext extends IIMenu\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.MENU)\n  editor: InteractiveInkEditor\n  id: string\n  wrapper?: HTMLElement\n  editMenu?: HTMLDivElement\n  editInput?: HTMLInputElement\n  editSaveBtn?: HTMLButtonElement\n  reorderMenu?: HTMLDivElement\n  decoratorMenu?: HTMLDivElement\n  menuExport?: HTMLDivElement\n  duplicateBtn?: HTMLButtonElement\n  groupBtn?: HTMLButtonElement\n  convertBtn?: HTMLButtonElement\n  removeBtn?: HTMLButtonElement\n\n  position: {\n    x: number,\n    y: number,\n    scrollTop: number,\n    scrollLeft: number\n  }\n\n  constructor(editor: InteractiveInkEditor, id = \"ms-menu-context\")\n  {\n    super()\n    this.id = id\n    this.#logger.info(\"constructor\")\n    this.editor = editor\n    this.position = { x: 0, y: 0, scrollLeft: 0, scrollTop: 0 }\n  }\n\n  get symbolsSelected(): TIISymbol[]\n  {\n    return this.editor.model.symbolsSelected\n  }\n\n  get haveSymbolsSelected(): boolean\n  {\n    return this.symbolsSelected.length > 0\n  }\n\n  get symbolsDecorable(): (IIStroke | IIText | IISymbolGroup | IIRecognizedText)[]\n  {\n    return this.symbolsSelected.filter(s => [SymbolType.Stroke, SymbolType.Text, SymbolType.Group].includes(s.type) || (s.type === SymbolType.Recognized && s.kind === RecognizedKind.Text)) as (IIStroke | IIText | IISymbolGroup | IIRecognizedText)[]\n  }\n\n  get showDecorator(): boolean\n  {\n    return this.symbolsDecorable.length > 0\n  }\n\n  protected createMenuEdit(): HTMLElement\n  {\n    const trigger = document.createElement(\"button\")\n    trigger.id = `${ this.id }-edit-trigger`\n    trigger.classList.add(\"ms-menu-button\")\n    const label = document.createElement(\"span\")\n    label.innerText = \"Edit\"\n    trigger.appendChild(label)\n    const icon = document.createElement(\"span\")\n    icon.style.setProperty(\"width\", \"32px\")\n    icon.style.setProperty(\"transform\", \"rotate(270deg)\")\n    icon.innerHTML = ArrowDown\n    trigger.appendChild(icon)\n\n    const subMenuWrapper = document.createElement(\"div\")\n    subMenuWrapper.classList.add(\"ms-menu-colmun\")\n    this.editInput = document.createElement(\"input\")\n    subMenuWrapper.appendChild(this.editInput)\n    this.editSaveBtn = document.createElement(\"button\")\n    this.editSaveBtn.classList.add(\"ms-menu-button\")\n    this.editSaveBtn.innerText = \"Save\"\n    subMenuWrapper.appendChild(this.editSaveBtn)\n    this.editSaveBtn.addEventListener(\"pointerdown\", async (e) =>\n    {\n      e.stopPropagation()\n      const textSymbol = this.editor.model.symbolsSelected.find(s => s.type === SymbolType.Text) as IIText\n      if (textSymbol) {\n        const firstChar = textSymbol.chars[0]\n        textSymbol.chars = []\n        for (let i = 0; i < this.editInput!.value.length; i++) {\n          textSymbol.chars.push({\n            label: this.editInput!.value.charAt(i),\n            id: createUUID(),\n            color: firstChar.color,\n            fontSize: firstChar.fontSize,\n            fontWeight: firstChar.fontWeight,\n            bounds: firstChar.bounds\n          })\n        }\n        await this.editor.updateSymbol(textSymbol)\n        this.editor.selector.resetSelectedGroup([textSymbol])\n      }\n    })\n    const params: TSubMenuParam = {\n      trigger: trigger,\n      subMenu: subMenuWrapper,\n      position: \"right\"\n    }\n    this.editMenu = new IIMenuSub(params).element\n\n    return this.editMenu\n  }\n\n  protected createMenuDuplicate(): HTMLElement\n  {\n    this.duplicateBtn = document.createElement(\"button\")\n    this.duplicateBtn.id = `${ this.id }-duplicate`\n    this.duplicateBtn.textContent = \"Duplicate\"\n    this.duplicateBtn.classList.add(\"ms-menu-button\")\n    this.duplicateBtn.addEventListener(\"pointerup\", async () =>\n    {\n      const symbolsToDuplicate = this.symbolsSelected\n\n      const updateDeepIdInGroup = (gr: IISymbolGroup) =>\n      {\n        gr.children.forEach(s =>\n        {\n          s.id = s.id.slice(0, -36) + `-${ createUUID() }`\n          switch (s.type) {\n            case SymbolType.Group:\n              updateDeepIdInGroup(s)\n              break\n            case SymbolType.Recognized:\n              s.strokes.forEach(s => s.id = s.id.slice(0, -36) + `-${ createUUID() }`)\n              break\n          }\n        })\n      }\n      const duplicatedSymbols = symbolsToDuplicate.map(s =>\n      {\n        const clone = s.clone()\n        while (this.editor.model.symbols.find(s => s.id === clone.id)) {\n          clone.id = clone.id.slice(0, -36) + `-${ createUUID() }`\n          if (clone.type === SymbolType.Group) {\n            updateDeepIdInGroup(clone)\n          }\n          else if (clone.type === SymbolType.Recognized) {\n            clone.strokes.forEach(s => s.id = s.id.slice(0, -36) + `-${ createUUID() }`)\n          }\n        }\n        clone.selected = true\n        this.editor.translator.applyToSymbol(clone, SELECTION_MARGIN, SELECTION_MARGIN)\n        return clone\n      })\n\n      this.editor.unselectAll()\n      await this.editor.addSymbols(duplicatedSymbols)\n      this.editor.selector.drawSelectedGroup(duplicatedSymbols)\n    })\n    return this.duplicateBtn\n  }\n\n  protected createMenuGroup(): HTMLElement\n  {\n    this.groupBtn = document.createElement(\"button\")\n    this.groupBtn.id = `${ this.id }-duplicate`\n    this.groupBtn.textContent = \"Group\"\n    this.groupBtn.classList.add(\"ms-menu-button\")\n    this.groupBtn.addEventListener(\"pointerup\", async () =>\n    {\n      if (this.symbolsSelected.length === 1 && this.symbolsSelected[0].type === SymbolType.Group) {\n        const symbols = this.editor.ungroupSymbol(this.symbolsSelected[0] as IISymbolGroup)\n        this.editor.select(symbols.map(s => s.id))\n      }\n      else {\n        const symbols = this.symbolsSelected.slice()\n        this.editor.unselectAll()\n        const group = this.editor.groupSymbols(symbols)\n        group.selected = true\n        this.editor.select([group.id])\n      }\n    })\n    return this.groupBtn\n  }\n\n  protected createMenuConvert(): HTMLElement\n  {\n    this.convertBtn = document.createElement(\"button\")\n    this.convertBtn.id = `${ this.id }-convert`\n    this.convertBtn.textContent = \"Convert\"\n    this.convertBtn.classList.add(\"ms-menu-button\")\n    this.convertBtn.addEventListener(\"pointerup\", () => this.editor.convertSymbols(this.symbolsSelected))\n    return this.convertBtn\n  }\n\n  protected createMenuRemove(): HTMLButtonElement\n  {\n    this.removeBtn = document.createElement(\"button\")\n    this.removeBtn.id = `${ this.id }-remove`\n    this.removeBtn.textContent = \"Remove\"\n    this.removeBtn.classList.add(\"ms-menu-button\")\n    this.removeBtn.addEventListener(\"pointerup\", async () =>\n    {\n      this.editor.selector.removeSelectedGroup()\n      await this.editor.removeSymbols(this.symbolsSelected.map(s => s.id))\n    })\n    return this.removeBtn\n  }\n\n  protected createMenuReorder(): HTMLElement\n  {\n    const trigger = document.createElement(\"button\")\n    trigger.id = `${ this.id }-reorder`\n    trigger.classList.add(\"ms-menu-button\")\n    const label = document.createElement(\"span\")\n    label.innerText = \"Reorder\"\n    trigger.appendChild(label)\n    const icon = document.createElement(\"span\")\n    icon.style.setProperty(\"width\", \"32px\")\n    icon.style.setProperty(\"transform\", \"rotate(270deg)\")\n    icon.innerHTML = ArrowDown\n    trigger.appendChild(icon)\n\n    const menuItems: TMenuItemButton[] = [\n      {\n        type: \"button\",\n        id: `${ this.id }-reorder-first`,\n        label: \"Bring to front\",\n        callback: () =>\n        {\n          this.editor.changeOrderSymbols(this.symbolsSelected, \"last\")\n          this.editor.selector.resetSelectedGroup(this.symbolsSelected)\n        }\n      },\n      {\n        type: \"button\",\n        id: `${ this.id }-reorder-forward`,\n        label: \"Bring forward\",\n        callback: () =>\n        {\n          this.editor.changeOrderSymbols(this.symbolsSelected, \"forward\")\n          this.editor.selector.resetSelectedGroup(this.symbolsSelected)\n        }\n      },\n      {\n        type: \"button\",\n        id: `${ this.id }-reorder-backward`,\n        label: \"Send backward\",\n        callback: () =>\n        {\n          this.editor.changeOrderSymbols(this.symbolsSelected, \"backward\")\n          this.editor.selector.resetSelectedGroup(this.symbolsSelected)\n        }\n      },\n      {\n        type: \"button\",\n        id: `${ this.id }-reorder-last`,\n        label: \"Send to back\",\n        callback: () =>\n        {\n          this.editor.changeOrderSymbols(this.symbolsSelected.slice().reverse(), \"first\")\n          this.editor.selector.resetSelectedGroup(this.symbolsSelected)\n        }\n      },\n    ]\n    const subMenuWrapper = document.createElement(\"div\")\n    subMenuWrapper.classList.add(\"ms-menu-colmun\")\n    menuItems.forEach(i =>\n    {\n      subMenuWrapper.appendChild(this.createMenuItem(i))\n    })\n    const params: TSubMenuParam = {\n      trigger: trigger,\n      subMenu: subMenuWrapper,\n      position: \"right\"\n    }\n    this.reorderMenu = new IIMenuSub(params).element\n    return this.reorderMenu\n  }\n\n  protected createDecoratorSubMenu(label: string, kind: DecoratorKind): HTMLElement\n  {\n    const trigger = document.createElement(\"button\")\n    trigger.id = `${ this.id }-decorator-${ kind }`\n    trigger.classList.add(\"ms-menu-button\")\n    const labelEL = document.createElement(\"span\")\n    labelEL.innerText = label\n    trigger.appendChild(labelEL)\n    const icon = document.createElement(\"span\")\n    icon.style.setProperty(\"width\", \"32px\")\n    icon.style.setProperty(\"transform\", \"rotate(270deg)\")\n    icon.innerHTML = ArrowDown\n    trigger.appendChild(icon)\n\n    const menuItems: (TMenuItemBoolean | TMenuItemColorList)[] = [\n      {\n        type: \"checkbox\",\n        id: `${ this.id }-decorator-${ kind }-enable`,\n        label: \"Enable\",\n        initValue: false,\n        callback: (enable) =>\n        {\n          this.symbolsDecorable.forEach(s =>\n          {\n            if (enable) {\n              if (!s.decorators.some(d => d.kind === kind)) {\n                s.decorators.push(new IIDecorator(kind, this.editor.penStyle))\n              }\n            }\n            else {\n              const decoIndex = s.decorators.findIndex(d => d.kind === kind)\n              if (decoIndex > -1) {\n                s.decorators.splice(decoIndex, 1)\n              }\n            }\n            this.editor.model.updateSymbol(s)\n            this.editor.renderer.drawSymbol(s)\n          })\n\n          document.querySelectorAll(`#${ this.id }-decorator-${ kind }-color button`).forEach(b =>\n          {\n            (b as HTMLButtonElement).disabled = !enable\n            b.classList.remove(\"active\")\n          })\n          if (enable) {\n            document.querySelector(`#${ this.id }-decorator-${ kind }-color button`)?.classList.add(\"active\")\n          }\n        }\n      },\n      {\n        type: \"colors\",\n        label: \"Colors\",\n        id: `${ this.id }-decorator-${ kind }-color`,\n        fill: false,\n        values: this.colors.filter((_c, i) => !(i % 4)),\n        initValue: this.colors[0],\n        disabled: true,\n        callback: (color) =>\n        {\n          this.symbolsDecorable.forEach(s =>\n          {\n            const deco = s.decorators.find(d => d.kind === kind)\n            if (deco) {\n              deco.style.color = color\n              this.editor.model.updateSymbol(s)\n              this.editor.renderer.drawSymbol(s)\n            }\n          })\n        },\n      }\n    ]\n    const subMenuWrapper = document.createElement(\"div\")\n    subMenuWrapper.classList.add(\"ms-menu-colmun\")\n    menuItems.forEach(i =>\n    {\n      subMenuWrapper.appendChild(this.createMenuItem(i))\n    })\n    const params: TSubMenuParam = {\n      trigger: trigger,\n      subMenu: subMenuWrapper,\n      position: \"right\"\n    }\n    return this.decoratorMenu = new IIMenuSub(params).element\n  }\n\n  protected createMenuDecorator(): HTMLElement\n  {\n    const trigger = document.createElement(\"button\")\n    trigger.id = `${ this.id }-decorator`\n    trigger.classList.add(\"ms-menu-button\")\n    const label = document.createElement(\"span\")\n    label.innerText = \"Decorator\"\n    trigger.appendChild(label)\n    const icon = document.createElement(\"span\")\n    icon.style.setProperty(\"width\", \"32px\")\n    icon.style.setProperty(\"transform\", \"rotate(270deg)\")\n    icon.innerHTML = ArrowDown\n    trigger.appendChild(icon)\n\n    const subMenuWrapper = document.createElement(\"div\")\n    subMenuWrapper.classList.add(\"ms-menu-colmun\")\n    subMenuWrapper.appendChild(this.createDecoratorSubMenu(\"Hightlight\", DecoratorKind.Highlight))\n    subMenuWrapper.appendChild(this.createDecoratorSubMenu(\"Surround\", DecoratorKind.Surround))\n    subMenuWrapper.appendChild(this.createDecoratorSubMenu(\"Underline\", DecoratorKind.Underline))\n    subMenuWrapper.appendChild(this.createDecoratorSubMenu(\"Strikethrough\", DecoratorKind.Strikethrough))\n\n    const params: TSubMenuParam = {\n      trigger: trigger,\n      subMenu: subMenuWrapper,\n      position: \"right\"\n    }\n    this.decoratorMenu = new IIMenuSub(params).element\n    return this.decoratorMenu\n  }\n\n  protected createMenuExport(): HTMLElement\n  {\n    const trigger = document.createElement(\"button\")\n    trigger.id = `${ this.id }-export`\n    trigger.classList.add(\"ms-menu-button\")\n    const label = document.createElement(\"span\")\n    label.innerText = \"Export\"\n    trigger.appendChild(label)\n    const icon = document.createElement(\"span\")\n    icon.style.setProperty(\"width\", \"32px\")\n    icon.style.setProperty(\"transform\", \"rotate(270deg)\")\n    icon.innerHTML = ArrowDown\n    trigger.appendChild(icon)\n\n    const menuItems: TMenuItemButton[] = [\n      {\n        type: \"button\",\n        id: `${ this.id }-export-json`,\n        label: \"json\",\n        callback: () => this.editor.downloadAsJson(this.haveSymbolsSelected)\n      },\n      {\n        type: \"button\",\n        id: `${ this.id }-export-svg`,\n        label: \"svg\",\n        callback: () => this.editor.downloadAsSVG(this.haveSymbolsSelected)\n      },\n      {\n        type: \"button\",\n        id: `${ this.id }-export-png`,\n        label: \"png\",\n        callback: () => this.editor.downloadAsPNG(this.haveSymbolsSelected)\n      },\n    ]\n    const subMenuWrapper = document.createElement(\"div\")\n    subMenuWrapper.classList.add(\"ms-menu-colmun\")\n    menuItems.forEach(i =>\n    {\n      subMenuWrapper.appendChild(this.createMenuItem(i))\n    })\n    const params: TSubMenuParam = {\n      trigger: trigger,\n      subMenu: subMenuWrapper,\n      position: \"right\"\n    }\n    this.menuExport = new IIMenuSub(params).element\n    return this.menuExport\n  }\n\n  protected createMenuSelectAll(): HTMLElement\n  {\n    const btn = document.createElement(\"button\")\n    btn.id = `${ this.id }-duplicate`\n    btn.textContent = \"Select all\"\n    btn.classList.add(\"ms-menu-button\")\n    btn.addEventListener(\"pointerup\", async () => this.editor.selectAll())\n    return btn\n  }\n\n  protected updateDecoratorSubMenu(): void\n  {\n    if (this.showDecorator) {\n      this.decoratorMenu?.style.removeProperty(\"display\")\n\n      Object.values(DecoratorKind).forEach(kind =>\n      {\n        const checkbox = document.getElementById(`${ this.id }-decorator-${ kind }-enable`) as HTMLInputElement\n        if (checkbox) {\n          document.querySelectorAll(`#${ this.id }-decorator-${ kind }-color button`).forEach(e => e.classList.remove(\"active\"))\n          const decos = this.symbolsDecorable.flatMap(s => s.decorators).filter(d => d.kind === kind)\n\n          if (decos.length && decos.every(d => d.style.color === decos[0].style.color)) {\n            const btnToActivate = document.getElementById(`${ this.id }-decorator-${ kind }-color-${ decos[0].style.color?.replace(\"#\", \"\") }-btn`)\n            btnToActivate?.classList.add(\"active\")\n          }\n\n          if (this.symbolsDecorable.filter(s => s.decorators.some(d => d.kind === kind)).length === this.symbolsDecorable.length) {\n            checkbox.checked = true\n\n            document.querySelectorAll(`#${ this.id }-decorator-${ kind }-color button`).forEach(b =>\n            {\n              (b as HTMLButtonElement).disabled = false\n            })\n            checkbox.indeterminate = false\n          }\n          else if (this.symbolsDecorable.filter(s => !s.decorators.some(d => d.kind === kind)).length === this.symbolsDecorable.length) {\n            checkbox.checked = false\n            document.querySelectorAll(`#${ this.id }-decorator-${ kind }-color button`).forEach(b =>\n            {\n              (b as HTMLButtonElement).disabled = true\n            })\n            checkbox.indeterminate = false\n          }\n          else {\n            checkbox.setAttribute(\"indeterminate\", \"true\")\n            checkbox.indeterminate = true\n            document.querySelectorAll(`#${ this.id }-decorator-${ kind }-color button`).forEach(b =>\n            {\n              (b as HTMLButtonElement).disabled = false\n            })\n          }\n        }\n\n      })\n    }\n    else {\n      this.decoratorMenu?.style.setProperty(\"display\", \"none\")\n    }\n  }\n\n  protected updateGroupMenu(): void\n  {\n    if (this.groupBtn && this.haveSymbolsSelected) {\n      this.groupBtn.style.removeProperty(\"display\")\n      if (this.symbolsSelected.length === 1 && this.symbolsSelected[0].type === SymbolType.Group) {\n        this.groupBtn.textContent = \"UnGroup\"\n      }\n      else {\n        this.groupBtn.textContent = \"Group\"\n      }\n    }\n    else {\n      this.groupBtn?.style.setProperty(\"display\", \"none\")\n    }\n  }\n\n  update(): void\n  {\n    this.wrapper?.style.setProperty(\"left\", `${ this.position.x - this.position.scrollLeft }px`)\n    this.wrapper?.style.setProperty(\"top\", `${ this.position.y - this.position.scrollTop }px`)\n\n    if (this.haveSymbolsSelected) {\n      const textSymbol = this.editor.model.symbolsSelected.find(s => s.type === SymbolType.Text)\n      if (this.editMenu && this.editInput && this.editor.model.symbolsSelected.length === 1 && textSymbol) {\n        this.editMenu.style.removeProperty(\"display\")\n        this.editInput.value = (textSymbol as IIText).label\n      }\n      else {\n        this.editMenu?.style.setProperty(\"display\", \"none\")\n      }\n\n      if (this.editor.extractStrokesFromSymbols(this.symbolsSelected).length) {\n        this.convertBtn?.style.removeProperty(\"display\")\n      }\n      else {\n        this.convertBtn?.style.setProperty(\"display\", \"none\")\n      }\n\n\n      this.reorderMenu?.style.removeProperty(\"display\")\n      this.duplicateBtn?.style.removeProperty(\"display\")\n      this.removeBtn?.style.removeProperty(\"display\")\n      this.menuExport?.style.removeProperty(\"display\")\n    }\n    else {\n      this.editMenu?.style.setProperty(\"display\", \"none\")\n      this.convertBtn?.style.setProperty(\"display\", \"none\")\n      this.reorderMenu?.style.setProperty(\"display\", \"none\")\n      this.duplicateBtn?.style.setProperty(\"display\", \"none\")\n      this.removeBtn?.style.setProperty(\"display\", \"none\")\n      this.menuExport?.style.setProperty(\"display\", \"none\")\n    }\n    this.updateDecoratorSubMenu()\n    this.updateGroupMenu()\n  }\n\n  render(layer: HTMLElement): void\n  {\n    this.wrapper = document.createElement(\"div\")\n    this.wrapper.id = `${ this.id }-wrapper`\n    this.wrapper.classList.add(\"ms-menu\", \"ms-menu-context\")\n    this.wrapper.appendChild(this.createMenuEdit())\n    this.wrapper.appendChild(this.createMenuDecorator())\n    this.wrapper.appendChild(this.createMenuReorder())\n    this.wrapper.appendChild(this.createMenuExport())\n    this.wrapper.appendChild(this.createMenuConvert())\n    this.wrapper.appendChild(this.createMenuGroup())\n    this.wrapper.appendChild(this.createMenuDuplicate())\n    this.wrapper.appendChild(this.createMenuRemove())\n    this.wrapper.appendChild(this.createMenuSelectAll())\n    this.wrapper.style.setProperty(\"display\", \"none\")\n    layer.appendChild(this.wrapper)\n\n    this.editor.layers.rendering.addEventListener(\"scroll\", () =>\n    {\n      this.position.scrollLeft = this.editor.layers.rendering.scrollLeft || 0\n      this.position.scrollTop = this.editor.layers.rendering.scrollTop || 0\n      this.update()\n    })\n  }\n\n  show(): void\n  {\n    this.update()\n    this.wrapper?.style.setProperty(\"display\", \"block\")\n  }\n\n  hide(): void\n  {\n    this.wrapper?.style.setProperty(\"display\", \"none\")\n  }\n\n  destroy(): void\n  {\n    while (this.wrapper?.lastChild) {\n      this.wrapper.removeChild(this.wrapper.lastChild)\n    }\n    this.wrapper?.remove()\n  }\n}\n", "\n/**\n * @group Menu\n */\nexport type TMenuConfiguration = {\n  enable: boolean,\n  style: {\n    enable: boolean,\n  }\n  tool: {\n    enable: boolean,\n  }\n  action: {\n    enable: boolean,\n  }\n  context: {\n    enable: boolean,\n  }\n}\n\n/**\n * @group Menu\n * @source\n */\nexport const DefaultMenuConfiguration: TMenuConfiguration = {\n  enable: true,\n  style: {\n    enable: true\n  },\n  tool: {\n    enable: true\n  },\n  action: {\n    enable: true\n  },\n  context: {\n    enable: true\n  },\n}\n", "import style from \"./menu.css\"\nimport { LoggerCategory, LoggerManager } from \"../logger\"\nimport { InteractiveInkEditor } from \"../editor\"\nimport { IIMenuAction } from \"./IIMenuAction\"\nimport { IIMenuTool } from \"./IIMenuTool\"\nimport { IIMenuContext } from \"./IIMenuContext\"\nimport { IIMenuStyle } from \"./IIMenuStyle\"\n\n/**\n * @group Manager\n */\nexport class IIMenuManager\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.MENU)\n  editor: InteractiveInkEditor\n  layer?: HTMLElement\n  action: IIMenuAction\n  tool: IIMenuTool\n  context: IIMenuContext\n  style: IIMenuStyle\n\n  constructor(editor: InteractiveInkEditor, custom?: { style?: IIMenuStyle, tool?: IIMenuTool, action?: IIMenuAction, context?: IIMenuContext })\n  {\n    this.#logger.info(\"constructor\")\n    this.editor = editor\n\n    if (custom?.style) {\n      const CustomMenuStyle = custom.style as unknown as typeof IIMenuStyle\n      this.style = new CustomMenuStyle(this.editor)\n    }\n    else {\n      this.style = new IIMenuStyle(this.editor)\n    }\n    if (custom?.tool) {\n      const CustomMenuTool = custom.tool as unknown as typeof IIMenuTool\n      this.tool = new CustomMenuTool(this.editor)\n    }\n    else {\n      this.tool = new IIMenuTool(this.editor)\n    }\n    if (custom?.action) {\n      const CustomMenuAction = custom.action as unknown as typeof IIMenuAction\n      this.action = new CustomMenuAction(this.editor)\n    }\n    else {\n      this.action = new IIMenuAction(this.editor)\n    }\n    if (custom?.context) {\n      const CustomMenuAction = custom.context as unknown as typeof IIMenuContext\n      this.context = new CustomMenuAction(this.editor)\n    }\n    else {\n      this.context = new IIMenuContext(this.editor)\n    }\n  }\n\n  render(layer: HTMLElement): void\n  {\n    if (this.editor.configuration.menu.enable) {\n      this.layer = layer\n\n      const styleElement = document.createElement(\"style\")\n      styleElement.appendChild(document.createTextNode(style as string))\n      this.layer.prepend(styleElement)\n\n      if (this.editor.configuration.menu.action.enable) {\n        this.action.render(this.layer)\n      }\n      if (this.editor.configuration.menu.style.enable) {\n        this.style.render(this.layer)\n      }\n      if (this.editor.configuration.menu.tool.enable) {\n        this.tool.render(this.layer)\n      }\n      if (this.editor.configuration.menu.context.enable) {\n        this.context.render(this.layer)\n      }\n    }\n  }\n\n  update(): void\n  {\n    this.action.update()\n    this.tool.update()\n    this.style.update()\n  }\n\n  show(): void\n  {\n    this.action.show()\n    this.tool.show()\n    this.style.show()\n  }\n\n  hide(): void\n  {\n    this.action.hide()\n    this.tool.hide()\n    this.style.hide()\n  }\n\n  destroy(): void\n  {\n    this.action.destroy()\n    this.tool.destroy()\n    this.style.destroy()\n  }\n}\n", "import { PartialDeep } from \"../utils\"\n\n/**\n * @group Snap\n */\nexport type TSnapConfiguration = {\n  guide: boolean\n  symbol: boolean\n  angle: number\n}\n\n/**\n * @group Snap\n * @source\n */\nexport const DefaultSnapConfiguration: TSnapConfiguration = {\n  guide: true,\n  symbol: true,\n  angle: 0\n}\n\n/**\n * @group Snap\n */\nexport class SnapConfiguration implements TSnapConfiguration\n{\n  guide: boolean\n  symbol: boolean\n  angle: number\n\n  constructor(config? : PartialDeep<TSnapConfiguration>)\n  {\n    this.symbol = config?.symbol !== undefined ? config.symbol : DefaultSnapConfiguration.symbol\n    this.guide = config?.guide !== undefined ? config.guide : DefaultSnapConfiguration.guide\n    this.angle = config?.angle !== undefined ? config.angle : DefaultSnapConfiguration.angle\n  }\n}\n", "import { LoggerCategory, LoggerManager } from \"../logger\"\nimport { IIModel } from \"../model\"\nimport { Box, TPoint, TSegment } from \"../symbol\"\nimport { IISVGRenderer } from \"../renderer\"\nimport { IISVGRendererConst } from \"../renderer/svg/IISVGRendererConst\"\nimport { InteractiveInkEditor } from \"../editor/InteractiveInkEditor\"\nimport { PartialDeep } from \"../utils\"\nimport { SnapConfiguration, TSnapConfiguration } from \"./IISnapConfiguration\"\n\n/**\n * @group Snap\n */\nexport type TSnapNudge = TPoint\n\n/**\n * @group Snap\n */\nexport type TSnapLineInfos = {\n  nudge: TSnapNudge,\n  verticales: TSegment[]\n  horizontales: TSegment[]\n}\n\n/**\n * @group Snap\n */\nexport class IISnapManager\n{\n  #logger = LoggerManager.getLogger(LoggerCategory.CONVERTER)\n  editor: InteractiveInkEditor\n  configuration: SnapConfiguration\n\n  constructor(editor: InteractiveInkEditor, config?: PartialDeep<TSnapConfiguration>)\n  {\n    this.#logger.info(\"constructor\")\n    this.editor = editor\n    this.configuration = new SnapConfiguration(config)\n  }\n\n  get model(): IIModel\n  {\n    return this.editor.model\n  }\n\n  get renderer(): IISVGRenderer\n  {\n    return this.editor.renderer\n  }\n\n  get selectionSnapPoints(): TPoint[]\n  {\n    return Box.createFromPoints(this.model.symbolsSelected.flatMap(s => s.snapPoints)).snapPoints\n  }\n\n  get otherSnapPoints(): TPoint[]\n  {\n    const selectSymbolIds = this.model.symbolsSelected.map(s => s.id)\n    return this.model.symbols.filter(s => !selectSymbolIds.includes(s.id)).flatMap(s => s.snapPoints)\n  }\n\n  get snapThreshold(): number\n  {\n    return this.editor.configuration.rendering.guides.gap / 2\n  }\n\n  protected getNearestVerticalGuide(x: number): number\n  {\n    if (this.renderer.verticalGuides.length) {\n      return this.renderer.verticalGuides.reduce((prev, curr) =>\n      {\n        return (Math.abs(curr - x) < Math.abs(prev - x) ? curr : prev)\n      })\n    }\n    return x\n  }\n\n  protected getNearestHorizontalGuide(y: number): number\n  {\n    if (this.renderer.horizontalGuides.length) {\n      return this.renderer.horizontalGuides.reduce((prev, curr) =>\n      {\n        return (Math.abs(curr - y) < Math.abs(prev - y) ? curr : prev)\n      })\n    }\n    return y\n  }\n\n  protected getGuidePointToSnap(point: TPoint): TPoint\n  {\n    return {\n      x: this.getNearestVerticalGuide(point.x),\n      y: this.getNearestHorizontalGuide(point.y)\n    }\n  }\n\n  drawSnapToElementLines(lines: TSegment[]): void\n  {\n    const attrs = {\n      role: \"snap-to-element\",\n      fill: \"transparent\",\n      stroke: \"blue\",\n      \"stroke-width\": \"2\",\n      style: IISVGRendererConst.noSelection,\n      \"marker-start\": `url(#${ IISVGRendererConst.crossMarker })`,\n      \"marker-end\": `url(#${ IISVGRendererConst.crossMarker })`\n    }\n    lines.forEach(seg =>\n    {\n      this.renderer.drawLine(seg.p1, seg.p2, attrs)\n    })\n  }\n\n  clearSnapToElementLines(): void\n  {\n    this.renderer.clearElements({ attrs: { role: \"snap-to-element\" } })\n  }\n\n  protected getSnapLinesInfos(sourcePoints: TPoint[], targetPoints: TPoint[]): TSnapLineInfos\n  {\n    const infos: TSnapLineInfos = {\n      nudge: {\n        x: Infinity,\n        y: Infinity\n      },\n      verticales: [],\n      horizontales: [],\n    }\n    if (!sourcePoints.length || !targetPoints.length) return infos\n\n    sourcePoints.forEach(p1 =>\n    {\n      targetPoints.forEach(p2 =>\n      {\n        if (this.snapThreshold > Math.abs(p2.x - p1.x)) {\n          if (Math.abs(infos.nudge.x) > Math.abs(p2.x - p1.x)) {\n            infos.nudge.x = p2.x - p1.x\n            infos.verticales = [{ p1: { ...p1 }, p2 }]\n          }\n          else if (infos.nudge.x === p2.x - p1.x) {\n            infos.verticales.push({ p1: { ...p1 }, p2 })\n          }\n        }\n        if (this.snapThreshold > Math.abs(p2.y - p1.y)) {\n          if (Math.abs(infos.nudge.y) > Math.abs(p2.y - p1.y)) {\n            infos.nudge.y = p2.y - p1.y\n            infos.horizontales = [{ p1: { ...p1 }, p2 }]\n          }\n          else if (infos.nudge.y === p2.y - p1.y) {\n            infos.horizontales.push({ p1: { ...p1 }, p2 })\n          }\n        }\n      })\n    })\n\n    return infos\n  }\n\n  snapResize(point: TPoint, horizontal = true, vertical = true): TPoint\n  {\n    this.clearSnapToElementLines()\n    if (!this.configuration.symbol && !this.configuration.guide) return point\n\n    let localPoint: TPoint = {\n      x: Infinity,\n      y: Infinity\n    }\n    if (this.configuration.guide) {\n      localPoint = this.getGuidePointToSnap(point)\n    }\n    const snapLines: TSegment[] = []\n\n    if (this.configuration.symbol) {\n      const snapLinesInfos = this.getSnapLinesInfos([point], this.otherSnapPoints)\n      if (horizontal && Math.abs(snapLinesInfos.nudge.x) <= Math.abs(point.x - localPoint.x)) {\n        localPoint.x = point.x + snapLinesInfos.nudge.x\n        snapLines.push(...snapLinesInfos.verticales)\n      }\n      if (vertical && Math.abs(snapLinesInfos.nudge.y) <= Math.abs(point.y - localPoint.y)) {\n        localPoint.y = point.y + snapLinesInfos.nudge.y\n        snapLines.push(...snapLinesInfos.horizontales)\n      }\n    }\n\n    if (localPoint.x === Infinity) localPoint.x = point.x\n    if (localPoint.y === Infinity) localPoint.y = point.y\n\n    snapLines.forEach(s => s.p1 = localPoint)\n    this.drawSnapToElementLines(snapLines)\n    return localPoint\n  }\n\n  snapTranslate(tx: number, ty: number): TSnapNudge\n  {\n    this.clearSnapToElementLines()\n    const nudge: TSnapNudge = { x: tx, y: ty }\n    if (!this.configuration.symbol && !this.configuration.guide) return nudge\n\n    const selectionSymbolPoints = this.selectionSnapPoints.map(p => ({ x: p.x + tx, y: p.y + ty }))\n\n    let lastDeltaX = Infinity\n    let lastDeltaY = Infinity\n\n    if (this.configuration.guide) {\n      selectionSymbolPoints.forEach(p =>\n      {\n        const gridPoint = this.getGuidePointToSnap(p)\n        if (lastDeltaX > Math.abs(gridPoint.x - p.x)) {\n          nudge.x = gridPoint.x - p.x + tx\n          lastDeltaX = Math.abs(gridPoint.x - p.x)\n        }\n        if (lastDeltaY > Math.abs(gridPoint.y - p.y)) {\n          nudge.y = gridPoint.y - p.y + ty\n          lastDeltaY = Math.abs(gridPoint.y - p.y)\n        }\n      })\n    }\n\n    const snapLines: TSegment[] = []\n    if (this.configuration.symbol) {\n      const snapLinesInfos = this.getSnapLinesInfos(selectionSymbolPoints, this.otherSnapPoints)\n      if (lastDeltaX >= Math.abs(snapLinesInfos.nudge.x) && snapLinesInfos.verticales.length) {\n        nudge.x = snapLinesInfos.nudge.x + tx\n        snapLines.push(...snapLinesInfos.verticales)\n      }\n      if (lastDeltaY >= Math.abs(snapLinesInfos.nudge.y) && snapLinesInfos.horizontales.length) {\n        nudge.y = snapLinesInfos.nudge.y + ty\n        snapLines.push(...snapLinesInfos.horizontales)\n      }\n    }\n    if (snapLines.length) {\n      snapLines.forEach(l =>\n      {\n        l.p1.x += nudge.x - tx\n        l.p1.y += nudge.y - ty\n      })\n      this.drawSnapToElementLines(snapLines)\n    }\n    return nudge\n  }\n\n  snapRotation(angleDegree: number): number\n  {\n    if (this.configuration.angle > 0) {\n      return this.configuration.angle * Math.round(angleDegree / this.configuration.angle)\n    }\n    return angleDegree\n  }\n}\n", "import { mergeDeep, PartialDeep } from \"../utils\"\nimport { DefaultStyle, TStyle } from \"../style\"\nimport { DefaultLoggerConfiguration, TLoggerConfiguration } from \"../logger\"\nimport { DefaultGrabberConfiguration, TGrabberConfiguration } from \"../grabber\"\nimport { DefaultHistoryConfiguration, THistoryConfiguration } from \"../history\"\nimport { DefaultMenuConfiguration, TMenuConfiguration } from \"../menu\"\nimport { DefaultRecognizerWebSocketConfiguration, RecognizerWebSocketConfiguration, TRecognitionWebSocketConfiguration, TRecognizerWebSocketConfiguration, TServerWebsocketConfiguration } from \"../recognizer\"\nimport { DefaultIIRendererConfiguration, TIIRendererConfiguration } from \"../renderer\"\nimport { DefaultGestureConfiguration, TGestureConfiguration } from \"../gesture\"\nimport { TEditorConfiguration } from \"./AbstractEditor\"\nimport { DefaultSnapConfiguration, SnapConfiguration, TSnapConfiguration } from \"../snap\"\n\n/**\n * @group Editor\n */\nexport type TInteractiveInkEditorConfiguration = TEditorConfiguration & TRecognizerWebSocketConfiguration & {\n \"undo-redo\": THistoryConfiguration\n  rendering: TIIRendererConfiguration\n  grabber: TGrabberConfiguration\n  menu: TMenuConfiguration\n  penStyle: TStyle,\n  fontStyle: {\n    size: number | \"auto\"\n    weight: \"bold\" | \"normal\" | \"auto\"\n  }\n  gesture: TGestureConfiguration\n  snap: TSnapConfiguration\n}\n\n/**\n * @group Editor\n * @source\n */\nexport const DefaultInteractiveInkEditorConfiguration: TInteractiveInkEditorConfiguration = {\n  server: DefaultRecognizerWebSocketConfiguration.server,\n  recognition: DefaultRecognizerWebSocketConfiguration.recognition,\n  menu: DefaultMenuConfiguration,\n  rendering: DefaultIIRendererConfiguration,\n  logger: DefaultLoggerConfiguration,\n  grabber: DefaultGrabberConfiguration,\n  \"undo-redo\": DefaultHistoryConfiguration,\n\n  penStyle: DefaultStyle,\n  fontStyle: {\n    size: \"auto\",\n    weight: \"auto\",\n  },\n  gesture: DefaultGestureConfiguration,\n  snap: DefaultSnapConfiguration\n}\n\n/**\n * @group Editor\n */\nexport class InteractiveInkEditorConfiguration implements TInteractiveInkEditorConfiguration\n{\n  grabber: TGrabberConfiguration\n  logger: TLoggerConfiguration\n  server: TServerWebsocketConfiguration\n  recognition: TRecognitionWebSocketConfiguration\n  rendering: TIIRendererConfiguration\n  \"undo-redo\": THistoryConfiguration\n  menu: TMenuConfiguration\n\n  penStyle: TStyle\n  fontStyle: {\n    size: number | \"auto\"\n    weight: \"bold\" | \"normal\" | \"auto\"\n  }\n  gesture: TGestureConfiguration\n  snap: TSnapConfiguration\n\n  constructor(configuration?: PartialDeep<TInteractiveInkEditorConfiguration>)\n  {\n    const { server, recognition } =  new RecognizerWebSocketConfiguration(configuration)\n    this.recognition = recognition\n    this.server = server\n\n    this.grabber = mergeDeep({}, DefaultInteractiveInkEditorConfiguration.grabber, configuration?.grabber)\n    this.logger = mergeDeep({}, DefaultInteractiveInkEditorConfiguration.logger, configuration?.logger)\n    this.rendering = mergeDeep({}, DefaultInteractiveInkEditorConfiguration.rendering, configuration?.rendering)\n    this[\"undo-redo\"] = mergeDeep({}, DefaultInteractiveInkEditorConfiguration[\"undo-redo\"], configuration?.[\"undo-redo\"])\n    this.menu = mergeDeep({}, DefaultInteractiveInkEditorConfiguration.menu, configuration?.menu)\n    this.gesture = mergeDeep({}, DefaultInteractiveInkEditorConfiguration.gesture, configuration?.gesture)\n    this.snap = new SnapConfiguration(configuration?.snap)\n\n    this.penStyle = mergeDeep({}, DefaultInteractiveInkEditorConfiguration.penStyle, configuration?.penStyle)\n    this.fontStyle = mergeDeep({}, DefaultInteractiveInkEditorConfiguration.fontStyle, configuration?.fontStyle)\n  }\n}\n", "import { EditorTool, SELECTION_MARGIN } from \"../Constants\"\nimport { JIIXEdgeKind, JIIXELementType, JIIXNodeKind, IIModel, TExport, TJIIXStrokeItem } from \"../model\"\nimport\n{\n  Box,\n  EdgeKind,\n  IIDecorator,\n  TIIEdge,\n  IIEdgeArc,\n  IIEdgeLine,\n  IIEdgePolyLine,\n  TIIShape,\n  IIShapeCircle,\n  IIShapeEllipse,\n  IIShapePolygon,\n  IIStroke,\n  IIRecognizedText,\n  IISymbolGroup,\n  IIText,\n  ShapeKind,\n  SymbolType,\n  TIISymbol,\n  convertPartialStrokesToOIStrokes,\n  TIIRecognized,\n  IIRecognizedLine,\n  IIRecognizedPolyLine,\n  IIRecognizedArc,\n} from \"../symbol\"\nimport { RecognizerWebSocket } from \"../recognizer\"\nimport { IISVGRenderer, SVGBuilder, TIIRendererConfiguration } from \"../renderer\"\nimport { TStyle } from \"../style\"\nimport\n{\n  IIConversionManager,\n  IIWriteManager,\n  IISelectionManager,\n  IIResizeManager,\n  IIRotationManager,\n  IITranslateManager,\n  IITextManager,\n  IIEraseManager,\n  IIDebugSVGManager,\n  IIMoveManager,\n} from \"../manager\"\nimport { RecognizedKind, IIRecognizedCircle, IIRecognizedEllipse, IIRecognizedPolygon } from \"../symbol\"\nimport { IIHistoryManager, TIIHistoryBackendChanges, TIIHistoryChanges, THistoryContext } from \"../history\"\nimport { PartialDeep, convertMillimeterToPixel, mergeDeep } from \"../utils\"\nimport { IIMenuAction, IIMenuManager, IIMenuStyle, IIMenuTool } from \"../menu\"\nimport { AbstractEditor, EditorOptionsBase } from \"./AbstractEditor\"\nimport { InteractiveInkEditorConfiguration, TInteractiveInkEditorConfiguration } from \"./InteractiveInkEditorConfiguration\"\nimport { IIGestureManager } from \"../gesture\"\nimport { IISnapManager } from \"../snap\"\n\n/**\n * @group Editor\n */\nexport type TInteractiveInkEditorOptions = PartialDeep<EditorOptionsBase &\n  {\n    configuration: TInteractiveInkEditorConfiguration\n  }> &\n  {\n    override?: {\n      recognizer?: RecognizerWebSocket\n      menu?: {\n        style?: IIMenuStyle\n        tool?: IIMenuTool\n        action?: IIMenuAction\n      }\n    }\n  }\n/**\n * @group Editor\n */\nexport class InteractiveInkEditor extends AbstractEditor\n{\n  #configuration: InteractiveInkEditorConfiguration\n  #model: IIModel\n  #tool: EditorTool = EditorTool.Write\n  #layerUITimer?: ReturnType<typeof setTimeout>\n  #recognizeStrokeTimer?: ReturnType<typeof setTimeout>\n\n  renderer: IISVGRenderer\n  recognizer: RecognizerWebSocket\n\n  #penStyle: TStyle\n\n  history: IIHistoryManager\n  writer: IIWriteManager\n  eraser: IIEraseManager\n  gesture: IIGestureManager\n  resizer: IIResizeManager\n  rotator: IIRotationManager\n  translator: IITranslateManager\n  converter: IIConversionManager\n  texter: IITextManager\n  selector: IISelectionManager\n  svgDebugger: IIDebugSVGManager\n  snaps: IISnapManager\n  move: IIMoveManager\n  menu: IIMenuManager\n\n  constructor(rootElement: HTMLElement, options?: TInteractiveInkEditorOptions)\n  {\n    super(rootElement, options)\n\n    this.#configuration = new InteractiveInkEditorConfiguration(options?.configuration)\n    this.#penStyle = Object.assign({}, this.#configuration.penStyle)\n\n    if (options?.override?.recognizer) {\n      const CustomRecognizer = options?.override.recognizer as unknown as typeof RecognizerWebSocket\n      this.recognizer = new CustomRecognizer(this.#configuration)\n    }\n    else {\n      this.recognizer = new RecognizerWebSocket(this.#configuration)\n    }\n    this.recognizer.event.addErrorListener(this.manageError.bind(this))\n    this.recognizer.event.addExportedListener(this.event.emitExported.bind(this.event))\n    this.recognizer.event.addContentChangedListener(this.onContentChanged.bind(this))\n    this.recognizer.event.addSessionOpenedListener(this.event.emitSessionOpened.bind(this.event))\n    this.recognizer.event.addEndInitialization(this.layers.hideMessageModal.bind(this.layers))\n    this.recognizer.event.addIdleListener(this.updateLayerState.bind(this))\n\n    this.renderer = new IISVGRenderer(this.#configuration.rendering)\n\n    this.history = new IIHistoryManager(this.#configuration[\"undo-redo\"], this.event)\n\n    this.writer = new IIWriteManager(this)\n    this.eraser = new IIEraseManager(this)\n    this.selector = new IISelectionManager(this)\n    this.move = new IIMoveManager(this)\n\n    this.gesture = new IIGestureManager(this, this.#configuration.gesture)\n    this.resizer = new IIResizeManager(this)\n    this.rotator = new IIRotationManager(this)\n    this.translator = new IITranslateManager(this)\n    this.converter = new IIConversionManager(this)\n    this.texter = new IITextManager(this)\n    this.svgDebugger = new IIDebugSVGManager(this)\n    this.snaps = new IISnapManager(this, this.#configuration.snap)\n    this.menu = new IIMenuManager(this, options?.override?.menu)\n\n    this.#model = new IIModel(this.#configuration.rendering.minWidth, this.#configuration.rendering.minHeight, this.configuration.rendering.guides.gap)\n  }\n\n  get initializationPromise(): Promise<void>\n  {\n    return this.recognizer.initialized.promise\n  }\n\n  //#region Properties\n  get tool(): EditorTool\n  {\n    return this.#tool\n  }\n  set tool(i: EditorTool)\n  {\n    this.#tool = i\n    this.menu.tool.update()\n    this.setCursorStyle()\n    this.unselectAll()\n\n    this.eraser.detach()\n    this.selector.detach()\n    this.move.detach()\n    this.writer.detach()\n    switch (this.#tool) {\n      case EditorTool.Erase:\n        this.eraser.attach(this.layers.rendering)\n        break\n      case EditorTool.Select:\n        this.selector.attach(this.layers.rendering)\n        break\n      case EditorTool.Move:\n        this.move.attach(this.layers.rendering)\n        break\n      default:\n        this.writer.attach(this.layers.rendering)\n        break\n    }\n    this.event.emitToolChanged(i)\n  }\n\n  get model(): IIModel\n  {\n    return this.#model\n  }\n\n  get configuration(): InteractiveInkEditorConfiguration\n  {\n    return this.#configuration\n  }\n  set renderingConfiguration(renderingConfiguration: TIIRendererConfiguration)\n  {\n    this.configuration.rendering = mergeDeep(this.configuration.rendering, renderingConfiguration)\n    const height = Math.max(this.renderer.parent.clientHeight, this.configuration.rendering.minHeight)\n    const width = Math.max(this.renderer.parent.clientWidth, this.configuration.rendering.minWidth)\n    this.renderer.resize(height, width)\n    this.model.rowHeight = this.configuration.rendering.guides.gap\n    this.history.stack.forEach(i => i.model.rowHeight = this.model.rowHeight)\n    this.event.emitUIpdated()\n  }\n  //#endregion\n\n  //#region Style\n  get penStyle(): TStyle\n  {\n    return this.#penStyle\n  }\n  set penStyle(penStyle: PartialDeep<TStyle>)\n  {\n    this.logger.info(\"set penStyle\", { penStyle })\n    this.#penStyle = Object.assign({}, this.#penStyle, penStyle)\n  }\n  //#endregion\n\n  protected updateLayerState(idle: boolean): void\n  {\n    this.event.emitIdle(idle)\n    this.layers.updateState(idle)\n  }\n\n  updateLayerUI(timeout: number = 500): void\n  {\n    clearTimeout(this.#layerUITimer)\n    this.#layerUITimer = setTimeout(() =>\n    {\n      this.menu.update()\n      this.svgDebugger.apply()\n      this.waitForIdle()\n      this.event.emitUIpdated()\n    }, timeout)\n  }\n\n  manageError(error: Error): void\n  {\n    this.layers.showMessageError(error)\n    this.event.emitError(error)\n  }\n\n  protected setCursorStyle(): void\n  {\n    switch (this.#tool) {\n      case EditorTool.Erase:\n        this.layers.root.classList.remove(\"draw\")\n        this.layers.root.classList.add(\"erase\")\n        this.layers.root.classList.remove(\"select\")\n        this.layers.root.classList.remove(\"move\")\n        break\n      case EditorTool.Select:\n        this.layers.root.classList.remove(\"draw\")\n        this.layers.root.classList.remove(\"erase\")\n        this.layers.root.classList.add(\"select\")\n        this.layers.root.classList.remove(\"move\")\n        break\n      case EditorTool.Move:\n        this.layers.root.classList.remove(\"draw\")\n        this.layers.root.classList.remove(\"erase\")\n        this.layers.root.classList.remove(\"select\")\n        this.layers.root.classList.add(\"move\")\n        break\n      default:\n        this.layers.root.classList.add(\"draw\")\n        this.layers.root.classList.remove(\"erase\")\n        this.layers.root.classList.remove(\"select\")\n        this.layers.root.classList.remove(\"move\")\n        break\n    }\n  }\n\n  protected async onContentChanged(undoRedoContext: THistoryContext): Promise<void>\n  {\n    clearTimeout(this.#recognizeStrokeTimer)\n    this.#recognizeStrokeTimer = setTimeout(async () =>\n    {\n      await this.synchronizeStrokesWithJIIX()\n      this.updateLayerUI(0)\n      this.event.emitChanged(undoRedoContext)\n    }, 500)\n  }\n\n  async initialize(): Promise<void>\n  {\n    try {\n      this.logger.info(\"initialize\")\n      this.layers.render()\n      this.layers.showLoader()\n      this.tool = EditorTool.Write\n      this.renderer.init(this.layers.rendering)\n      this.menu.render(this.layers.ui.root)\n\n      const compStyles = window.getComputedStyle(this.layers.root)\n      this.model.width = Math.max(parseInt(compStyles.width.replace(\"px\", \"\")), this.#configuration.rendering.minWidth)\n      this.model.height = Math.max(parseInt(compStyles.height.replace(\"px\", \"\")), this.#configuration.rendering.minHeight)\n      this.model.rowHeight = this.configuration.rendering.guides.gap\n      this.history.init(this.model)\n\n      if(!this.recognizer.configuration.server.version) {\n        await this.loadInfo(this.configuration.server)\n        this.recognizer.configuration.server.version = this.info!.version\n      }\n      await this.recognizer.init()\n    } catch (error) {\n      this.logger.error(\"initialize\", error)\n      this.layers.showMessageError(error as Error)\n      throw error\n    }\n    finally {\n      this.logger.debug(\"initialize\", \"finally\")\n      this.layers.hideLoader()\n      this.layers.updateState(true)\n    }\n  }\n\n  async changeLanguage(code: string): Promise<void>\n  {\n    try {\n      this.logger.info(\"changeLanguage\", { code })\n      this.updateLayerState(false)\n      this.configuration.recognition.lang = code\n      await this.recognizer.newSession(this.configuration)\n      this.recognizer.addStrokes(this.extractStrokesFromSymbols(this.model.symbols), false)\n      await this.synchronizeStrokesWithJIIX(true)\n      this.layers.hideLoader()\n      this.event.emitLoaded()\n    }\n    catch (error) {\n      this.logger.error(\"changeLanguage\", error)\n      this.manageError(error as Error)\n      throw error\n    }\n    finally {\n      this.updateLayerUI()\n    }\n  }\n\n  protected buildShape(partialShape: PartialDeep<TIIShape>): TIIShape\n  {\n    switch (partialShape.kind) {\n      case ShapeKind.Circle:\n        return IIShapeCircle.create(partialShape as PartialDeep<IIShapeCircle>)\n      case ShapeKind.Ellipse:\n        return IIShapeEllipse.create(partialShape as PartialDeep<IIShapeEllipse>)\n      case ShapeKind.Polygon:\n        return IIShapePolygon.create(partialShape as PartialDeep<IIShapePolygon>)\n      default:\n        throw new Error(`Unable to create shape, kind: \"${ partialShape.kind }\" is unknown`)\n    }\n  }\n\n  protected buildEdge(partialEdge: PartialDeep<TIIEdge>): TIIEdge\n  {\n    switch (partialEdge.kind) {\n      case EdgeKind.Arc:\n        return IIEdgeArc.create(partialEdge as PartialDeep<IIEdgeArc>)\n      case EdgeKind.Line:\n        return IIEdgeLine.create(partialEdge as PartialDeep<IIEdgeLine>)\n      case EdgeKind.PolyEdge:\n        return IIEdgePolyLine.create(partialEdge as PartialDeep<IIEdgePolyLine>)\n      default:\n        throw new Error(`Unable to create edge, kind: \"${ partialEdge.kind }\" is unknown`)\n    }\n  }\n\n  protected buildRecognized(partialSymbol: PartialDeep<TIIRecognized>): TIIRecognized\n  {\n    switch (partialSymbol.kind) {\n      case RecognizedKind.Text:\n        return IIRecognizedText.create(partialSymbol)\n      case RecognizedKind.Arc:\n        return IIRecognizedArc.create(partialSymbol)\n      case RecognizedKind.Circle:\n        return IIRecognizedCircle.create(partialSymbol)\n      case RecognizedKind.Ellipse:\n        return IIRecognizedEllipse.create(partialSymbol)\n      case RecognizedKind.Polygone:\n        return IIRecognizedPolygon.create(partialSymbol)\n      case RecognizedKind.Line:\n        return IIRecognizedLine.create(partialSymbol)\n      case RecognizedKind.PolyEdge:\n        return IIRecognizedPolyLine.create(partialSymbol)\n      default:\n        throw new Error(`Unable to create recognized, symbol type '${ JSON.stringify(partialSymbol) } is unknow`)\n    }\n  }\n\n  protected buildGroup(partialGroup: PartialDeep<IISymbolGroup>): IISymbolGroup\n  {\n    if (!partialGroup.children?.length) {\n      throw new Error(`Unable to create group, no children`)\n    }\n\n    const children = partialGroup.children.map(partialSymbol =>\n    {\n      switch (partialSymbol?.type) {\n        case SymbolType.Stroke:\n          return IIStroke.create(partialSymbol as PartialDeep<IIStroke>)\n        case SymbolType.Shape:\n          return this.buildShape(partialSymbol as PartialDeep<TIIShape>)\n        case SymbolType.Edge:\n          return this.buildEdge(partialSymbol as PartialDeep<TIIEdge>)\n        case SymbolType.Text:\n          return IIText.create(partialSymbol as PartialDeep<IIText>)\n        case SymbolType.Group:\n          return this.buildGroup(partialSymbol as PartialDeep<IISymbolGroup>)\n        case SymbolType.Recognized:\n          return this.buildRecognized(partialSymbol as PartialDeep<TIIRecognized>)\n        default:\n          throw new Error(`Unable to create group, symbol type '${ JSON.stringify(partialSymbol) } is unknow`)\n      }\n    })\n    const group = new IISymbolGroup(children, partialGroup.style)\n    if (partialGroup.id) {\n      group.id = partialGroup.id\n    }\n    if (partialGroup.decorators) {\n      group.decorators = partialGroup.decorators.map(d => new IIDecorator(d!.kind!, d!.style as TStyle))\n    }\n    return group\n  }\n\n  protected buildStroke(partialSymbol: PartialDeep<IIStroke>): IIStroke\n  {\n    return IIStroke.create(partialSymbol as PartialDeep<IIStroke>)\n  }\n\n  protected buildStrokeText(partialSymbol: PartialDeep<IIRecognizedText>): IIRecognizedText\n  {\n    return IIRecognizedText.create(partialSymbol as PartialDeep<IIRecognizedText>)\n  }\n\n  protected buildText(partialSymbol: PartialDeep<IIText>): IIText\n  {\n    return IIText.create(partialSymbol as PartialDeep<IIText>)\n  }\n\n  protected buildSymbol(partialSymbol: PartialDeep<TIISymbol>): TIISymbol\n  {\n    try {\n      switch (partialSymbol.type) {\n        case SymbolType.Stroke:\n          return this.buildStroke(partialSymbol)\n        case SymbolType.Shape:\n          return this.buildShape(partialSymbol)\n        case SymbolType.Edge:\n          return this.buildEdge(partialSymbol)\n        case SymbolType.Text:\n          return this.buildText(partialSymbol)\n        case SymbolType.Group:\n          return this.buildGroup(partialSymbol)\n        case SymbolType.Recognized:\n          return this.buildRecognized(partialSymbol as PartialDeep<TIIRecognized>)\n        default:\n          throw new Error(`Unable to build symbol, type: \"${ partialSymbol.type }\" is unknown`)\n      }\n    }\n    catch (error) {\n      this.logger.error(\"createSymbol\", error)\n      this.manageError(error as Error)\n      throw error\n    }\n  }\n\n  async createSymbol(partialSymbol: PartialDeep<TIISymbol>): Promise<TIISymbol>\n  {\n    try {\n      return await this.addSymbol(this.buildSymbol(partialSymbol))\n    }\n    catch (error) {\n      this.logger.error(\"createSymbol\", error)\n      this.manageError(error as Error)\n      throw error\n    }\n    finally {\n      this.updateLayerUI()\n    }\n  }\n\n  async createSymbols(partialSymbols: PartialDeep<TIISymbol>[]): Promise<TIISymbol[]>\n  {\n    try {\n      const errors: string[] = []\n      const symbols: TIISymbol[] = []\n      partialSymbols.forEach(partialSymbol =>\n      {\n        try {\n          symbols.push(this.buildSymbol(partialSymbol))\n        } catch (error) {\n          errors.push(((error as Error).message || error) as string)\n        }\n      })\n      if (errors.length) {\n        throw new Error(errors.join(\"\\n\"))\n      }\n      return await this.addSymbols(symbols)\n    } catch (error) {\n      this.logger.error(\"createSymbols\", error)\n      this.manageError(error as Error)\n      throw error\n    }\n  }\n\n  /** @hidden */\n  protected updateTextBounds(symbol: TIISymbol): void\n  {\n    if (symbol.type === SymbolType.Text) {\n      this.texter.updateBounds(symbol)\n    }\n    else if (symbol.type === SymbolType.Group) {\n      symbol.extractText().forEach(t => this.texter.updateBounds(t))\n    }\n  }\n\n  /** @hidden */\n  async addSymbol(sym: TIISymbol, addToHistory = true): Promise<TIISymbol>\n  {\n    this.logger.info(\"addSymbol\", { sym })\n    this.updateLayerState(false)\n    this.updateTextBounds(sym)\n    this.model.addSymbol(sym)\n    this.renderer.drawSymbol(sym)\n\n    const strokes = this.extractStrokesFromSymbols([sym])\n    this.recognizer.addStrokes(strokes, false)\n\n    if (addToHistory) {\n      this.history.push(this.model, { added: [sym] })\n    }\n    this.updateLayerUI()\n    return sym\n  }\n\n  /** @hidden */\n  async addSymbols(symList: TIISymbol[], addToHistory = true): Promise<TIISymbol[]>\n  {\n    this.logger.info(\"addSymbol\", { symList })\n    this.updateLayerState(false)\n    symList.forEach(s =>\n    {\n      this.updateTextBounds(s)\n      this.model.addSymbol(s)\n      this.renderer.drawSymbol(s)\n    })\n    const strokes = this.extractStrokesFromSymbols(symList)\n    this.recognizer.addStrokes(strokes, false)\n    if (addToHistory) {\n      this.history.push(this.model, { added: symList })\n    }\n    this.updateLayerUI()\n    return symList\n  }\n\n  async updateSymbol(sym: TIISymbol, addToHistory = true): Promise<TIISymbol>\n  {\n    this.logger.info(\"updateSymbol\", { sym })\n    this.updateLayerState(false)\n    this.updateTextBounds(sym)\n    this.model.updateSymbol(sym)\n    this.renderer.drawSymbol(sym)\n    const strokes = this.extractStrokesFromSymbols([sym])\n    this.recognizer.replaceStrokes(strokes.map(s => s.id), strokes)\n    if (addToHistory) {\n      this.history.push(this.model, { updated: [sym] })\n    }\n    this.updateLayerUI()\n    return sym\n  }\n\n  async updateSymbols(symList: TIISymbol[], addToHistory = true): Promise<TIISymbol[]>\n  {\n    this.logger.info(\"updateSymbol\", { symList })\n    this.updateLayerState(false)\n    symList.forEach(s =>\n    {\n      this.updateTextBounds(s)\n      this.model.updateSymbol(s)\n      this.renderer.drawSymbol(s)\n    })\n    const strokes = this.extractStrokesFromSymbols(symList)\n    this.recognizer.replaceStrokes(strokes.map(s => s.id), strokes)\n    if (addToHistory) {\n      this.history.push(this.model, { updated: symList })\n    }\n    this.updateLayerUI()\n    return symList\n  }\n\n  updateSymbolsStyle(symbolIds: string[], style: PartialDeep<TStyle>, addToHistory = true): void\n  {\n    this.logger.info(\"updateSymbolsStyle\", { symbolIds, style })\n    const symbols: TIISymbol[] = []\n    this.model.symbols.forEach(s =>\n    {\n      if (symbolIds.includes(s.id)) {\n        s.style = Object.assign({}, s.style, style)\n        if (\n          SymbolType.Text === s.type ||\n          SymbolType.Group === s.type ||\n          SymbolType.Recognized === s.type) {\n          s.updateChildrenStyle()\n        }\n        this.renderer.drawSymbol(s)\n        this.model.updateSymbol(s)\n        s.modificationDate = Date.now()\n        symbols.push(s)\n      }\n    })\n    if (symbols.length) {\n      symbols.forEach(s =>\n      {\n        if (s.type === SymbolType.Text) {\n          const lastWidth = s.bounds.width\n          this.texter.updateBounds(s)\n          const tx = s.bounds.width - lastWidth\n          if (tx !== 0) {\n            this.texter.moveTextAfter(s, tx)\n          }\n        }\n      })\n    }\n    if (addToHistory && symbols.length) {\n      this.history.push(this.model, { style: { symbols, style } })\n    }\n  }\n\n  updateTextFontStyle(textIds: string[], { fontSize, fontWeight }: { fontSize?: number, fontWeight?: \"normal\" | \"bold\" | \"auto\" }): void\n  {\n    this.logger.info(\"updateTextFontStyle\", { textIds, fontSize, fontWeight })\n    const symbols: (IIText | IISymbolGroup)[] = []\n    const translate: { symbols: TIISymbol[], tx: number, ty: number }[] = []\n    this.model.symbols.forEach(s =>\n    {\n      if (textIds.includes(s.id)) {\n        if (s.type === SymbolType.Text) {\n          s.updateChildrenFont({ fontSize, fontWeight: fontWeight === \"auto\" ? undefined : fontWeight })\n          const lastWidth = s.bounds.width\n          this.texter.updateBounds(s)\n          this.renderer.drawSymbol(s)\n          const tx = s.bounds.width - lastWidth\n          if (tx !== 0) {\n            const symbolsTranslated = this.texter.moveTextAfter(s, tx)\n            if (symbolsTranslated?.length) {\n              translate.push({\n                symbols: symbolsTranslated,\n                tx,\n                ty: 0\n              })\n            }\n          }\n          s.modificationDate = Date.now()\n          symbols.push(s)\n        }\n        else if (s.type === SymbolType.Group) {\n          const textChildren = s.extractText()\n          if (textChildren.length) {\n            textChildren.forEach(text =>\n            {\n              text.updateChildrenFont({ fontSize, fontWeight: fontWeight === \"auto\" ? undefined : fontWeight })\n              const lastWidth = s.bounds.width\n              this.texter.updateBounds(text)\n              const tx = s.bounds.width - lastWidth\n              const symbolsTranslated = this.texter.moveTextAfter(text, tx)\n              if (symbolsTranslated?.length) {\n                translate.push({\n                  symbols: symbolsTranslated,\n                  tx,\n                  ty: 0\n                })\n              }\n            })\n            s.modificationDate = Date.now()\n            this.renderer.drawSymbol(s)\n            symbols.push(s)\n          }\n\n        }\n      }\n    })\n    if (symbols.length) {\n      this.history.push(this.model, { style: { symbols, fontSize }, translate })\n    }\n  }\n\n  async replaceSymbols(oldSymbols: TIISymbol[], newSymbols: TIISymbol[], addToHistory = true): Promise<void>\n  {\n    this.logger.info(\"replaceSymbol\", { oldSymbols, newSymbols })\n    this.updateLayerState(false)\n\n    const oldStrokes = this.extractStrokesFromSymbols(oldSymbols)\n    const newStrokes = this.extractStrokesFromSymbols(newSymbols)\n\n    const symToReplace = oldSymbols.shift()\n\n    if (symToReplace) {\n      oldSymbols.forEach(s =>\n      {\n        this.renderer.removeSymbol(s.id)\n        this.model.removeSymbol(s.id)\n      })\n\n      this.model.replaceSymbol(symToReplace.id, newSymbols)\n      this.renderer.replaceSymbol(symToReplace.id, newSymbols)\n\n\n      if (oldStrokes.length && newStrokes.length) {\n        this.recognizer.replaceStrokes(oldStrokes.map(s => s.id), newStrokes)\n      }\n      else if (oldStrokes.length) {\n        this.recognizer.eraseStrokes(oldStrokes.map(s => s.id))\n      }\n      else {\n        this.recognizer.addStrokes(newStrokes, false)\n      }\n\n      if (addToHistory) {\n        this.history.push(this.model, { replaced: { oldSymbols, newSymbols } })\n      }\n      this.updateLayerUI()\n    }\n  }\n\n  changeOrderSymbol(symbol: TIISymbol, position: \"first\" | \"last\" | \"forward\" | \"backward\"): void\n  {\n    this.model.changeOrderSymbol(symbol.id, position)\n    this.renderer.changeOrderSymbol(symbol, position)\n    this.history.push(this.model, { order: { symbols: [symbol], position } })\n  }\n\n  changeOrderSymbols(symbols: TIISymbol[], position: \"first\" | \"last\" | \"forward\" | \"backward\")\n  {\n    symbols.forEach(s =>\n    {\n      this.model.changeOrderSymbol(s.id, position)\n      this.renderer.changeOrderSymbol(s, position)\n    })\n    this.history.push(this.model, { order: { symbols, position } })\n  }\n\n  groupSymbols(symbols: TIISymbol[]): IISymbolGroup\n  {\n    const group = this.buildGroup({ children: symbols })\n    symbols.forEach(s =>\n    {\n      this.model.removeSymbol(s.id)\n      this.renderer.removeSymbol(s.id)\n    })\n    this.model.addSymbol(group)\n    this.history.push(this.model, { group: { symbols } })\n    return group\n  }\n\n  ungroupSymbol(group: IISymbolGroup): TIISymbol[]\n  {\n    group.children.forEach(s => this.renderer.drawSymbol(s))\n    this.renderer.removeSymbol(group.id)\n    this.model.replaceSymbol(group.id, group.children)\n    this.history.push(this.model, { ungroup: { group } })\n    return group.children\n  }\n\n  async synchronizeStrokesWithJIIX(force: boolean = false): Promise<void>\n  {\n    //if there is no stroke, jiix should not have changed\n    const strokes = this.model.symbols.filter(s => s.type === SymbolType.Stroke)\n    if (!force && !strokes.length) {\n      this.event.emitSynchronized()\n      return\n    }\n    await this.export([\"application/vnd.myscript.jiix\"])\n\n    const getSymbolsAndStrokesAssociatedFromJIIXStrokeItems = (items: TJIIXStrokeItem[] = []): { symbols: TIISymbol[], strokes: IIStroke[] } =>\n    {\n      const symbols: TIISymbol[] = []\n      const strokes: IIStroke[] = []\n      const strokeIdsUsed: string[] = []\n      items.forEach(i =>\n      {\n        const strokeId = i[\"full-id\"]!\n        if (strokeIdsUsed.includes(strokeId)) {\n          return\n        }\n        strokeIdsUsed.push(strokeId)\n        const sym = this.model.getRootSymbol(strokeId)\n        if (sym) {\n          switch (sym?.type) {\n            // we do not modify a group created by the user\n            // case SymbolType.Group:\n            //   strokes.push(...sym.extractStrokes())\n            //   break\n            case SymbolType.Recognized:\n              // if it's recognized symbol with same number of strokes\n              // the recognition has been already done\n              // if (sym.strokes.length === items.length) {\n              //   return\n              // }\n              strokes.push(sym.strokes.find(s => s.id === i[\"full-id\"]!)!)\n              break\n            default:\n              strokes.push(sym as IIStroke)\n              break\n          }\n          const symIdx = symbols.findIndex(s => s.id === sym.id)\n          if (symIdx < 0) {\n            symbols.push(sym)\n          }\n          else {\n            symbols[symIdx] = sym\n          }\n        }\n      })\n      return {\n        symbols,\n        strokes\n      }\n    }\n\n    const jiix = this.model.exports?.[\"application/vnd.myscript.jiix\"]\n    jiix?.elements?.forEach(el =>\n    {\n      switch (el.type) {\n        case JIIXELementType.Text: {\n          el.words?.forEach(w =>\n          {\n            const jiixAssociation = getSymbolsAndStrokesAssociatedFromJIIXStrokeItems(w.items)\n            if (jiixAssociation.strokes.length) {\n              if (jiixAssociation.symbols.length === 1) {\n                const symAsso = jiixAssociation.symbols[0]\n                if (\n                  symAsso.type === SymbolType.Recognized && symAsso.kind === RecognizedKind.Text &&\n                  symAsso.label === w.label &&\n                  symAsso.strokes.length === symAsso.strokes.length\n                ) {\n                  return\n                }\n              }\n              const line = el.lines!.find(l => l[\"first-char\"]! <= w[\"first-char\"]! && l[\"last-char\"]! >= w[\"last-char\"]!)!\n              const recognizedText = new IIRecognizedText(jiixAssociation.strokes, { baseline: convertMillimeterToPixel(line[\"baseline-y\"]), xHeight: convertMillimeterToPixel(line[\"x-height\"]) })\n              recognizedText.label = w.label\n              jiixAssociation.symbols.forEach(sym =>\n              {\n                if (sym.type === SymbolType.Recognized && sym.kind === RecognizedKind.Text) {\n                  sym.decorators.forEach(d =>\n                  {\n                    if (!recognizedText.decorators.some(wd => wd.kind === d.kind)) {\n                      recognizedText.decorators.push(d)\n                    }\n                  })\n                }\n                this.model.removeSymbol(sym.id)\n                this.renderer.removeSymbol(sym.id)\n              })\n              this.model.addSymbol(recognizedText)\n              this.renderer.drawSymbol(recognizedText)\n            }\n          })\n          break\n        }\n        case JIIXELementType.Node: {\n          let symbolRecognized: TIIRecognized | undefined\n          const jiixAssociation = getSymbolsAndStrokesAssociatedFromJIIXStrokeItems(el.items)\n          if (jiixAssociation.strokes.length) {\n            if (jiixAssociation.symbols.length === 1) {\n              const symAsso = jiixAssociation.symbols[0]\n              if (symAsso.type === SymbolType.Recognized &&\n                symAsso.strokes.length === jiixAssociation.strokes.length) {\n                return\n              }\n            }\n            switch (el.kind) {\n              case JIIXNodeKind.Circle: {\n                symbolRecognized = new IIRecognizedCircle(jiixAssociation.strokes)\n                break\n              }\n              case JIIXNodeKind.Ellipse: {\n                symbolRecognized = new IIRecognizedEllipse(jiixAssociation.strokes)\n                break\n              }\n              case JIIXNodeKind.Rectangle:\n              case JIIXNodeKind.Triangle:\n              case JIIXNodeKind.Parallelogram:\n              case JIIXNodeKind.Polygon:\n              case JIIXNodeKind.Rhombus: {\n                symbolRecognized = new IIRecognizedPolygon(jiixAssociation.strokes)\n                break\n              }\n              default:\n                this.logger.warn(\"synchronizeStrokesWithJIIX\", `Can not create recognized shape symbol, kind unknow: ${ el }`)\n                break\n            }\n            if (symbolRecognized) {\n              jiixAssociation.symbols.forEach(sym =>\n              {\n                this.model.removeSymbol(sym.id)\n                this.renderer.removeSymbol(sym.id)\n              })\n              this.model.addSymbol(symbolRecognized)\n              this.renderer.drawSymbol(symbolRecognized)\n            }\n          }\n          break\n        }\n        case JIIXELementType.Edge: {\n          let symbolRecognized: TIIRecognized | undefined\n          const jiixAssociation = getSymbolsAndStrokesAssociatedFromJIIXStrokeItems(el.kind === JIIXEdgeKind.PolyEdge ? el.edges.flatMap(e => e.items!) : el.items)\n          if (jiixAssociation.strokes.length) {\n            if (jiixAssociation.symbols.length === 1) {\n              const symAsso = jiixAssociation.symbols[0]\n              if (symAsso.type === SymbolType.Recognized &&\n                symAsso.strokes.length === jiixAssociation.strokes.length) {\n                return\n              }\n            }\n            switch (el.kind) {\n              case JIIXEdgeKind.Line: {\n                symbolRecognized = new IIRecognizedLine(jiixAssociation.strokes)\n                break\n              }\n              case JIIXEdgeKind.PolyEdge: {\n                symbolRecognized = new IIRecognizedPolyLine(jiixAssociation.strokes)\n                break\n              }\n              case JIIXEdgeKind.Arc: {\n                symbolRecognized = new IIRecognizedArc(jiixAssociation.strokes)\n                break\n              }\n              default:\n                this.logger.warn(\"synchronizeStrokesWithJIIX\", `Can not create recognized edge symbol, kind unknow: ${ el }`)\n                break\n            }\n            if (symbolRecognized) {\n              jiixAssociation.symbols.forEach(sym =>\n              {\n                this.model.removeSymbol(sym.id)\n                this.renderer.removeSymbol(sym.id)\n              })\n              this.model.addSymbol(symbolRecognized)\n              this.renderer.drawSymbol(symbolRecognized)\n            }\n          }\n          break\n        }\n        default:\n          this.logger.warn(\"synchronizeStrokesWithJIIX\", `Can not create recognized symbol, type unknow: ${ el }`)\n          break\n      }\n    })\n    // because model.export is emptied when you change symbols\n    this.model.mergeExport({ \"application/vnd.myscript.jiix\": jiix })\n    this.history.update(this.model)\n    this.event.emitSynchronized()\n  }\n\n  async removeSymbol(id: string, addToHistory = true): Promise<void>\n  {\n    this.logger.info(\"removeSymbol\", { id })\n    const symbol = this.model.getRootSymbol(id)\n    if (symbol) {\n      this.updateLayerState(false)\n      if (symbol.type === SymbolType.Group) {\n        const groupStrokeIds = symbol.extractStrokes().map(s => s.id)\n        symbol.removeChilds([id])\n        if (symbol.children.length) {\n          this.model.updateSymbol(symbol)\n          this.renderer.drawSymbol(symbol)\n          if (groupStrokeIds.includes(id)) {\n            this.recognizer.eraseStrokes([id])\n          }\n        }\n        else {\n          this.recognizer.eraseStrokes(groupStrokeIds)\n          this.model.removeSymbol(symbol.id)\n          this.renderer.removeSymbol(symbol.id)\n        }\n      }\n      else {\n        this.recognizer.eraseStrokes([id])\n        this.model.removeSymbol(symbol.id)\n        this.renderer.removeSymbol(symbol.id)\n      }\n      if (addToHistory) {\n        this.history.push(this.model, { erased: [symbol] })\n      }\n      this.updateLayerUI()\n    }\n    else {\n      this.renderer.removeSymbol(id)\n      this.recognizer.eraseStrokes([id])\n    }\n  }\n\n  async removeSymbols(ids: string[], addToHistory = true): Promise<TIISymbol[]>\n  {\n    this.logger.info(\"removeSymbol\", { ids })\n    const symbolsToRemove: TIISymbol[] = []\n    const symbolsToUpdate: TIISymbol[] = []\n    const strokesIds: string[] = []\n    ids.forEach(id =>\n    {\n      const sym = this.model.getRootSymbol(id)\n      if (sym) {\n        /** we remove root element */\n        if (sym.id === id) {\n          symbolsToRemove.push(sym)\n          switch (sym.type) {\n            case SymbolType.Stroke:\n              strokesIds.push(sym.id)\n              break\n            case SymbolType.Recognized:\n              strokesIds.push(...sym.strokes.map(s => s.id))\n              break\n            case SymbolType.Group:\n              strokesIds.push(...sym.extractStrokes().map(s => s.id))\n              break\n          }\n        }\n        else {\n          /** we want to remove child */\n          switch (sym.type) {\n            case SymbolType.Group: {\n              const gr = sym.clone()\n              strokesIds.push(...gr.extractStrokes().map(s => s.id).filter(id => ids.includes(id)))\n              gr.removeChilds(ids)\n              if (gr.children.length) {\n                symbolsToUpdate.push(gr)\n              }\n              else {\n                symbolsToRemove.push(gr)\n              }\n              break\n            }\n            case SymbolType.Recognized: {\n              strokesIds.push(id)\n              const ws = sym.clone()\n              ws.removeStrokes(ids)\n              if (ws.strokes.length) {\n                symbolsToUpdate.push(ws)\n              }\n              else {\n                symbolsToRemove.push(ws)\n              }\n              break\n            }\n          }\n\n        }\n      }\n    })\n    this.recognizer.eraseStrokes(strokesIds)\n    symbolsToRemove.forEach(s =>\n    {\n      this.model.removeSymbol(s.id)\n      this.renderer.removeSymbol(s.id)\n    })\n\n    symbolsToUpdate.forEach(s =>\n    {\n      this.model.updateSymbol(s)\n      this.renderer.drawSymbol(s)\n    })\n\n\n    if (addToHistory) {\n      const changes: TIIHistoryChanges = {}\n      if (symbolsToRemove.length || symbolsToUpdate.length) {\n        if (symbolsToRemove.length) {\n          changes.erased = symbolsToRemove\n        }\n        if (symbolsToUpdate.length) {\n          changes.updated = symbolsToUpdate\n        }\n        this.history.push(this.model, changes)\n        this.updateLayerUI()\n      }\n    }\n    this.updateLayerState(false)\n    return symbolsToRemove\n  }\n\n  select(ids: string[]): void\n  {\n    this.selector.removeSelectedGroup()\n    this.model.symbols.forEach(s =>\n    {\n      s.selected = ids.includes(s.id)\n      this.renderer.drawSymbol(s)\n    })\n    this.selector.drawSelectedGroup(this.model.symbolsSelected)\n    this.updateLayerUI()\n    this.event.emitSelected(this.model.symbolsSelected)\n  }\n\n  selectAll(): void\n  {\n    this.selector.removeSelectedGroup()\n    this.model.symbols.forEach(s =>\n    {\n      s.selected = true\n      this.renderer.drawSymbol(s)\n    })\n    this.selector.drawSelectedGroup(this.model.symbolsSelected)\n    this.updateLayerUI()\n    this.event.emitSelected(this.model.symbolsSelected)\n  }\n\n  unselectAll(): void\n  {\n    if (this.model.symbolsSelected.length) {\n      this.model.symbolsSelected.forEach(s =>\n      {\n        s.selected = false\n        this.renderer.drawSymbol(s)\n      })\n      this.selector.removeSelectedGroup()\n      this.updateLayerUI()\n      this.event.emitSelected(this.model.symbolsSelected)\n    }\n  }\n\n  async importPointEvents(partialStrokes: PartialDeep<IIStroke>[]): Promise<IIModel>\n  {\n    this.logger.info(\"importPointEvents\", { partialStrokes })\n    this.updateLayerState(false)\n    const strokes = convertPartialStrokesToOIStrokes(partialStrokes)\n    strokes.forEach(s =>\n    {\n      this.model.addSymbol(s)\n      this.renderer.drawSymbol(s)\n    })\n    this.recognizer.addStrokes(strokes, false)\n    this.history.push(this.model, { added: strokes })\n    this.logger.debug(\"importPointEvents\", this.model)\n    this.updateLayerUI()\n    this.event.emitImported(this.model.exports as TExport)\n    return this.model\n  }\n\n  protected triggerDownload(fileName: string, urlData: string): void\n  {\n    const downloadAnchorNode = document.createElement(\"a\")\n    downloadAnchorNode.setAttribute(\"href\", urlData)\n    downloadAnchorNode.setAttribute(\"download\", fileName)\n    document.body.appendChild(downloadAnchorNode)\n    downloadAnchorNode.click()\n    downloadAnchorNode.remove()\n  }\n\n  getSymbolsBounds(symbols: TIISymbol[], margin: number = SELECTION_MARGIN): Box\n  {\n    const box = Box.createFromBoxes(symbols.map(s => s.bounds))\n    box.x -= margin\n    box.y -= margin\n    box.width += margin * 2\n    box.height += margin * 2\n    return box\n  }\n\n  protected buildBlobFromSymbols(symbols: TIISymbol[], box: Box): Blob\n  {\n    const svgNode = SVGBuilder.createLayer(box)\n    symbols.forEach(s =>\n    {\n      const el = this.renderer.getElementById(s.id)?.cloneNode(true)\n      if (el) {\n        svgNode.appendChild(el)\n      }\n    })\n\n    const svgString = (new XMLSerializer()).serializeToString(svgNode)\n\n    return new Blob([svgString], {\n      type: \"image/svg+xml;charset=utf-8\"\n    })\n  }\n\n  protected getExportName(extension: string): string\n  {\n    const options: Intl.DateTimeFormatOptions = { year: \"numeric\", month: \"numeric\", day: \"numeric\", hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\" }\n    try {\n      return `iink-ts-${ new Date().toLocaleDateString(navigator.language, options) }.${ extension }`\n    }\n    catch {\n      return `iink-ts-${ new Date().toLocaleDateString(\"en-US\", options) }.${ extension }`\n    }\n  }\n\n  downloadAsSVG(selection = false)\n  {\n    const symbols = selection ? this.model.symbolsSelected : this.model.symbols\n    const box = this.getSymbolsBounds(symbols)\n    const svgBlob = this.buildBlobFromSymbols(symbols, box)\n    const url = URL.createObjectURL(svgBlob)\n    this.triggerDownload(this.getExportName(\"svg\"), url)\n  }\n\n  downloadAsPNG(selection = false)\n  {\n    const symbols = selection ? this.model.symbolsSelected : this.model.symbols\n    const box = this.getSymbolsBounds(symbols)\n    const svgBlob = this.buildBlobFromSymbols(symbols, box)\n\n    const url = URL.createObjectURL(svgBlob)\n    const image = new Image(box.width, box.height)\n    image.src = url\n    image.onload = () =>\n    {\n      const canvas = document.createElement(\"canvas\")\n      canvas.width = image.width\n      canvas.height = image.height\n\n      const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D\n      ctx.drawImage(image, 0, 0)\n      URL.revokeObjectURL(url)\n\n      const imgURI = canvas\n        .toDataURL(\"image/png\")\n        .replace(\"image/png\", \"image/octet-stream\")\n\n      this.triggerDownload(this.getExportName(\"png\"), imgURI)\n    }\n  }\n\n  downloadAsJson(selection = false)\n  {\n    const symbolsToExport = selection ? this.model.symbolsSelected : this.model.symbols\n    const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(symbolsToExport, null, 2))\n    this.triggerDownload(this.getExportName(\"json\"), dataStr)\n  }\n\n  extractStrokesFromSymbols(symbols: TIISymbol[] | undefined): IIStroke[]\n  {\n    if (!symbols?.length) return []\n    const strokes: IIStroke[] = []\n    symbols.forEach(s =>\n    {\n      switch (s.type) {\n        case SymbolType.Stroke:\n          strokes.push(s)\n          break\n        case SymbolType.Recognized:\n          strokes.push(...s.strokes)\n          break\n        case SymbolType.Group:\n          strokes.push(...s.extractStrokes())\n          break\n      }\n    })\n    return strokes\n  }\n\n  extractTextsFromSymbols(symbols: TIISymbol[] | undefined): IIText[]\n  {\n    if (!symbols?.length) return []\n    const texts: IIText[] = []\n    symbols.forEach(s =>\n    {\n      switch (s.type) {\n        case SymbolType.Text:\n          texts.push(s)\n          break\n        case SymbolType.Group:\n          texts.push(...s.extractText())\n          break\n      }\n    })\n    return texts\n  }\n\n  protected extractBackendChanges(changes: TIIHistoryChanges): TIIHistoryBackendChanges\n  {\n    const backendChanges: TIIHistoryBackendChanges = {}\n    backendChanges.added = this.extractStrokesFromSymbols(changes.added)\n    backendChanges.erased = this.extractStrokesFromSymbols(changes.erased)\n\n    const updated = this.extractStrokesFromSymbols(changes.updated)\n\n    const oldStrokes = updated.concat(this.extractStrokesFromSymbols(changes.replaced?.oldSymbols))\n    const newStrokes = updated.concat(this.extractStrokesFromSymbols(changes.replaced?.newSymbols))\n    if (oldStrokes.length && newStrokes.length) {\n      backendChanges.replaced = {\n        oldStrokes,\n        newStrokes\n      }\n    }\n    else {\n      backendChanges.added.push(...newStrokes)\n      backendChanges.erased.push(...oldStrokes)\n    }\n\n    if (changes.matrix) {\n      backendChanges.matrix = {\n        strokes: this.extractStrokesFromSymbols(changes.matrix.symbols),\n        matrix: changes.matrix.matrix,\n      }\n    }\n\n    if (changes.translate?.length) {\n      backendChanges.translate = []\n      changes.translate.forEach(tr =>\n      {\n        const strokes = this.extractStrokesFromSymbols(tr.symbols)\n        if (strokes.length) {\n          backendChanges.translate!.push({\n            strokes,\n            tx: tr.tx,\n            ty: tr.ty\n          })\n        }\n      })\n    }\n    if (changes.scale?.length) {\n      backendChanges.scale = []\n      changes.scale.forEach(tr =>\n      {\n        const strokes = this.extractStrokesFromSymbols(tr.symbols)\n        if (strokes.length) {\n          backendChanges.scale!.push({\n            strokes,\n            origin: tr.origin,\n            scaleX: tr.scaleX,\n            scaleY: tr.scaleY\n          })\n        }\n      })\n    }\n    if (changes.rotate?.length) {\n      backendChanges.rotate = []\n      changes.rotate.forEach(tr =>\n      {\n        const strokes = this.extractStrokesFromSymbols(tr.symbols)\n        if (strokes.length) {\n          backendChanges.rotate!.push({\n            strokes,\n            center: tr.center,\n            angle: tr.angle\n          })\n        }\n      })\n    }\n    return backendChanges\n  }\n\n  async undo(): Promise<IIModel>\n  {\n    this.logger.info(\"undo\")\n    if (this.history.context.canUndo) {\n      this.updateLayerState(false)\n      this.unselectAll()\n      const previousStackItem = this.history.undo()\n      const modifications = previousStackItem.model.extractDifferenceSymbols(this.model)\n      this.#model = previousStackItem.model.clone()\n      this.logger.debug(\"undo\", { previousStackItem })\n      const actionsToBackend = this.extractBackendChanges(previousStackItem.changes)\n      modifications.removed.forEach(s => this.renderer.removeSymbol(s.id))\n      modifications.added.forEach(s => this.renderer.drawSymbol(s))\n      if (\n        actionsToBackend.added?.length ||\n        actionsToBackend.erased?.length ||\n        actionsToBackend.replaced ||\n        actionsToBackend.matrix ||\n        actionsToBackend.translate?.length ||\n        actionsToBackend.scale?.length ||\n        actionsToBackend.rotate?.length\n      ) {\n        await this.recognizer.undo(actionsToBackend)\n      }\n      this.updateLayerUI()\n    }\n    return this.model\n  }\n\n  async redo(): Promise<IIModel>\n  {\n    this.logger.info(\"redo\")\n\n    if (this.history.context.canRedo) {\n      this.updateLayerState(false)\n      this.unselectAll()\n      const nextStackItem = this.history.redo()\n      const modifications = nextStackItem.model.extractDifferenceSymbols(this.model)\n      this.#model = nextStackItem.model.clone()\n      this.logger.debug(\"redo\", { modifications })\n      const actionsToBackend = this.extractBackendChanges(nextStackItem.changes)\n      modifications.removed.forEach(s => this.renderer.removeSymbol(s.id))\n      modifications.added.forEach(s => this.renderer.drawSymbol(s))\n      if (\n        actionsToBackend.added?.length ||\n        actionsToBackend.erased?.length ||\n        actionsToBackend.replaced ||\n        actionsToBackend.matrix ||\n        actionsToBackend.translate?.length ||\n        actionsToBackend.scale?.length ||\n        actionsToBackend.rotate?.length\n      ) {\n        await this.recognizer.redo(actionsToBackend)\n      }\n\n      this.updateLayerUI()\n    }\n    return this.model\n  }\n\n  async export(mimeTypes?: string[]): Promise<IIModel>\n  {\n    try {\n      this.logger.info(\"export\", { mimeTypes })\n      const exports = await this.recognizer.export(mimeTypes)\n      this.model.mergeExport(exports as TExport)\n    }\n    catch (error) {\n      this.logger.error(\"export\", { error })\n      this.manageError(error as Error)\n      throw error\n    }\n    return this.model\n  }\n\n  async convert(): Promise<void>\n  {\n    await this.convertSymbols()\n  }\n\n  async convertSymbols(symbols?: TIISymbol[]): Promise<void>\n  {\n    try {\n      this.updateLayerState(false)\n      await this.converter.apply(symbols)\n      this.event.emitConverted(this.model.converts as TExport)\n    }\n    catch (error) {\n      this.logger.error(\"convert\", error)\n      this.manageError(error as Error)\n      throw error\n    }\n    finally {\n      this.updateLayerUI()\n    }\n  }\n\n  async waitForIdle(): Promise<void>\n  {\n    return this.recognizer.waitForIdle()\n  }\n\n  async resize({ height, width }: { height?: number, width?: number } = {}): Promise<void>\n  {\n    try {\n      this.logger.info(\"resize\", { height, width })\n      const compStyles = window.getComputedStyle(this.layers.root)\n      height = height || Math.max(parseInt(compStyles.height.replace(\"px\", \"\")), this.configuration.rendering.minHeight)\n      width = width || Math.max(parseInt(compStyles.width.replace(\"px\", \"\")), this.configuration.rendering.minWidth)\n\n      this.updateLayerState(false)\n      this.model.height = height\n      this.model.width = width\n      this.renderer.resize(height, width)\n      this.updateLayerUI(50)\n      this.updateLayerState(true)\n    } catch (error) {\n      this.manageError(error as Error)\n    }\n  }\n\n  async clear(): Promise<void>\n  {\n    try {\n      this.logger.info(\"clear\")\n      this.updateLayerState(false)\n      if (this.model.symbols.length) {\n        this.selector.removeSelectedGroup()\n        const erased = this.model.symbols\n        this.renderer.clear()\n        this.model.clear()\n        this.history.push(this.model, { erased })\n        this.recognizer.clear()\n        this.event.emitSelected(this.model.symbolsSelected)\n      }\n      this.updateLayerUI()\n      this.event.emitCleared()\n    } catch (error) {\n      this.manageError(error as Error)\n    }\n  }\n\n  async destroy(): Promise<void>\n  {\n    this.logger.info(\"destroy\")\n    this.eraser.detach()\n    this.selector.detach()\n    this.move.detach()\n    this.writer.detach()\n\n    this.renderer.destroy()\n    this.menu.destroy()\n    this.recognizer.destroy()\n    this.model.clear()\n    this.history.clear()\n    return Promise.resolve()\n  }\n}\n", "/**\n * @group Editor\n * @remarks\n * Configure when the action is triggered.\n *\n * POINTER_UP :   Action is triggered on every PenUP.\n *                This is the recommended mode for CDK V3 WebSocket recognitions.\n *\n * QUIET_PERIOD : Action is triggered after a quiet period in milli-seconds on every pointer up.\n *                The value is set to 1000 for example recognition will be triggered when the user stops writing for 1 seconds.\n *                This is the recommended mode for all REST discoveries.\n *\n * DEMAND :       Action is triggered on external demande\n */\n export type TEditorTriggerConfiguration = {\n  exportContent: \"QUIET_PERIOD\" | \"POINTER_UP\" | \"DEMAND\"\n  exportContentDelay: number\n  resizeTriggerDelay: number\n}\n\n/**\n * @group Editor\n * @source\n */\nexport const DefaultEditorTriggerConfiguration: TEditorTriggerConfiguration = {\n  exportContent: \"POINTER_UP\",\n  exportContentDelay: 1000,\n  resizeTriggerDelay: 100\n}\n", "import { DefaultGrabberConfiguration, TGrabberConfiguration } from \"../grabber\"\nimport { DefaultHistoryConfiguration, THistoryConfiguration } from \"../history\"\nimport { DefaultLoggerConfiguration, TLoggerConfiguration } from \"../logger\"\nimport { DefaultRecognizerHTTPV1Configuration, RecognizerHTTPV1Configuration, TRecognitionHTTPV1Configuration, TRecognizerHTTPV1Configuration, TServerHTTPConfiguration } from \"../recognizer\"\nimport { DefaultRendererConfiguration, TRendererConfiguration } from \"../renderer\"\nimport { DefaultTheme, TPenStyle, TTheme } from \"../style\"\nimport { mergeDeep, PartialDeep } from \"../utils\"\nimport { TEditorConfiguration } from \"./AbstractEditor\"\nimport { DefaultEditorTriggerConfiguration, TEditorTriggerConfiguration } from \"./EditorTriggerConfiguration\"\n\n\n/**\n * @group Editor\n */\nexport type TInkEditorDeprecatedConfiguration = TEditorConfiguration & TRecognizerHTTPV1Configuration & {\n  rendering: TRendererConfiguration\n  \"undo-redo\": THistoryConfiguration\n  grabber: TGrabberConfiguration\n  triggers: TEditorTriggerConfiguration\n  logger: TLoggerConfiguration\n  penStyle: TPenStyle,\n  penStyleClasses?: string\n  theme: TTheme\n}\n\n/**\n * @group Editor\n * @source\n */\nexport const DefaultInkEditorDeprecatedConfiguration: TInkEditorDeprecatedConfiguration = {\n  server: DefaultRecognizerHTTPV1Configuration.server,\n  recognition: DefaultRecognizerHTTPV1Configuration.recognition,\n  rendering: DefaultRendererConfiguration,\n  grabber: DefaultGrabberConfiguration,\n  triggers: DefaultEditorTriggerConfiguration,\n  \"undo-redo\": DefaultHistoryConfiguration,\n  logger: DefaultLoggerConfiguration,\n  penStyle: {},\n  theme: DefaultTheme\n}\n\n/**\n * @group Editor\n */\nexport class InkEditorDeprecatedConfiguration implements TInkEditorDeprecatedConfiguration\n{\n  server: TServerHTTPConfiguration\n  recognition: TRecognitionHTTPV1Configuration\n  rendering: TRendererConfiguration\n  \"undo-redo\": THistoryConfiguration\n  grabber: TGrabberConfiguration\n  triggers: TEditorTriggerConfiguration\n  logger: TLoggerConfiguration\n  penStyle: TPenStyle\n  penStyleClasses?: string\n  theme: TTheme\n\n  constructor(configuration?: PartialDeep<TInkEditorDeprecatedConfiguration>)\n  {\n    const { server, recognition } = new RecognizerHTTPV1Configuration(configuration)\n    this.server = server\n    this.recognition = recognition\n    this.rendering = mergeDeep({}, DefaultInkEditorDeprecatedConfiguration.rendering, configuration?.rendering)\n    this.grabber = mergeDeep({}, DefaultInkEditorDeprecatedConfiguration.grabber, configuration?.grabber)\n    this[\"undo-redo\"] = mergeDeep({}, DefaultInkEditorDeprecatedConfiguration[\"undo-redo\"], configuration?.[\"undo-redo\"])\n    this.triggers = mergeDeep({}, DefaultInkEditorDeprecatedConfiguration.triggers, configuration?.triggers)\n    this.logger = mergeDeep({}, DefaultInkEditorDeprecatedConfiguration.logger, configuration?.logger)\n    this.penStyle = mergeDeep({}, DefaultInkEditorDeprecatedConfiguration.penStyle, configuration?.penStyle)\n    this.penStyleClasses = configuration?.penStyleClasses || this.penStyleClasses\n    this.theme = mergeDeep({}, DefaultInkEditorDeprecatedConfiguration.theme, configuration?.theme)\n  }\n}\n", "import { EditorTool } from \"../Constants\"\nimport { PointerEventGrabber, PointerInfo } from \"../grabber\"\nimport { Model, TExport } from \"../model\"\nimport { Stroke, TStroke, TPointer } from \"../symbol\"\nimport { RecognizerHTTPV1, TConverstionState } from \"../recognizer\"\nimport { CanvasRenderer } from \"../renderer\"\nimport { DefaultPenStyle, StyleManager, TPenStyle, TTheme } from \"../style\"\nimport { HistoryManager } from \"../history\"\nimport { DeferredPromise, PartialDeep } from \"../utils\"\nimport { AbstractEditor, EditorOptionsBase } from \"./AbstractEditor\"\nimport { InkEditorDeprecatedConfiguration, TInkEditorDeprecatedConfiguration } from \"./InkEditorDeprecatedConfiguration\"\n\n/**\n * @group Editor\n */\nexport type TInkEditorDeprecatedOptions = PartialDeep<EditorOptionsBase &\n{\n  configuration: TInkEditorDeprecatedConfiguration\n}> &\n{\n  override?: {\n    grabber?: PointerEventGrabber\n    recognizer?: RecognizerHTTPV1\n  }\n}\n\n/**\n * @group Editor\n * @deprecated Use {@link InkEditor} instead.\n */\nexport class InkEditorDeprecated extends AbstractEditor\n{\n  #configuration: InkEditorDeprecatedConfiguration\n  #model: Model\n  #resizeTimer?: ReturnType<typeof setTimeout>\n  #exportTimer?: ReturnType<typeof setTimeout>\n\n  grabber: PointerEventGrabber\n  renderer: CanvasRenderer\n  recognizer: RecognizerHTTPV1\n  history: HistoryManager\n  styleManager: StyleManager\n  #tool: EditorTool = EditorTool.Write\n\n  constructor(rootElement: HTMLElement, options?: TInkEditorDeprecatedOptions)\n  {\n    super(rootElement, options)\n\n    this.#configuration = new InkEditorDeprecatedConfiguration(options?.configuration)\n    this.styleManager = new StyleManager(options?.configuration?.penStyle, options?.configuration?.theme)\n\n    if (options?.override?.grabber) {\n      const CustomGrabber = options.override.grabber as unknown as typeof PointerEventGrabber\n      this.grabber = new CustomGrabber(this.#configuration.grabber)\n    }\n    else {\n      this.grabber = new PointerEventGrabber(this.#configuration.grabber)\n    }\n    this.grabber.onPointerDown = this.onPointerDown.bind(this)\n    this.grabber.onPointerMove = this.onPointerMove.bind(this)\n    this.grabber.onPointerUp = this.onPointerUp.bind(this)\n\n    if (options?.override?.recognizer) {\n      const CustomRecognizer = options.override.recognizer as unknown as typeof RecognizerHTTPV1\n      this.recognizer = new CustomRecognizer(this.#configuration)\n    }\n    else {\n      this.recognizer = new RecognizerHTTPV1(this.#configuration)\n    }\n    this.renderer = new CanvasRenderer(this.#configuration.rendering)\n\n    this.tool = EditorTool.Write\n    this.#model = new Model()\n    this.history = new HistoryManager(this.#configuration[\"undo-redo\"], this.event)\n  }\n\n  protected onPointerDown(info: PointerInfo): void\n  {\n    this.logger.info(\"onPointerDown\", { tool: this.tool, info })\n    const style: TPenStyle = Object.assign({}, this.theme?.ink, this.currentPenStyle)\n    switch (this.tool) {\n      case EditorTool.Erase: {\n        if (this.model.removeStrokesFromPoint(info.pointer).length > 0) {\n          this.renderer.drawModel(this.model)\n        }\n        break\n      }\n      case EditorTool.Write:\n        this.model.initCurrentStroke(info.pointer, info.pointerType, style)\n        this.drawCurrentStroke()\n        break\n      default:\n        this.logger.warn(\"#onPointerDown\", `onPointerDown tool unknow: \"${ this.tool }\"`)\n        break\n    }\n  }\n\n  protected onPointerMove(info: PointerInfo): void\n  {\n    this.logger.info(\"onPointerMove\", { tool: this.tool, info })\n    switch (this.tool) {\n      case EditorTool.Erase: {\n        if (this.model.removeStrokesFromPoint(info.pointer).length > 0) {\n          this.renderer.drawModel(this.model)\n        }\n        break\n      }\n      case EditorTool.Write:\n        this.model.appendToCurrentStroke(info.pointer)\n        this.drawCurrentStroke()\n        break\n      default:\n        this.logger.warn(\"#onPointerMove\", `onPointerMove tool unknow: \"${ this.tool }\"`)\n        break\n    }\n  }\n\n  protected async onPointerUp(info: PointerInfo): Promise<void>\n  {\n    try {\n      this.logger.info(\"onPointerUp\", { tool: this.tool, info })\n      switch (this.tool) {\n        case EditorTool.Erase:\n          this.model.removeStrokesFromPoint(info.pointer)\n          if (this.history.stack.at(-1)?.modificationDate !== this.model.modificationDate) {\n            await this.updateModelRendering()\n          }\n          break\n        case EditorTool.Write:\n          this.model.endCurrentStroke(info.pointer)\n          await this.updateModelRendering()\n          break\n        default:\n          this.logger.warn(\"#onPointerUp\", `onPointerUp tool unknow: \"${ this.tool }\"`)\n          break\n      }\n    } catch (error) {\n      this.layers.showMessageError(error as Error)\n      this.event.emitError(error as Error)\n      throw error\n    }\n  }\n\n  get initializationPromise(): Promise<void>\n  {\n    return Promise.resolve()\n  }\n\n  get tool(): EditorTool\n  {\n    return this.#tool\n  }\n  set tool(i: EditorTool)\n  {\n    this.#tool = i\n    this.setCursorStyle()\n  }\n\n  protected setCursorStyle(): void\n  {\n    switch (this.tool) {\n      case EditorTool.Erase:\n        this.layers.root.classList.remove(\"draw\")\n        this.layers.root.classList.add(\"erase\")\n        break\n      default:\n        this.layers.root.classList.add(\"draw\")\n        this.layers.root.classList.remove(\"erase\")\n        break\n    }\n  }\n\n  get model(): Model\n  {\n    return this.#model\n  }\n\n  get currentPenStyle(): TPenStyle\n  {\n    return this.styleManager.currentPenStyle\n  }\n\n  get penStyle(): TPenStyle\n  {\n    return this.styleManager.penStyle\n  }\n  set penStyle(penStyle: TPenStyle | undefined)\n  {\n    this.logger.info(\"setPenStyle\", { penStyle })\n    this.styleManager.setPenStyle(penStyle)\n  }\n\n  get penStyleClasses(): string\n  {\n    return this.styleManager.penStyleClasses\n  }\n  set penStyleClasses(penStyleClasses: string | undefined)\n  {\n    this.logger.info(\"setPenStyleClasses\", { penStyleClasses })\n    this.styleManager.setPenStyleClasses(penStyleClasses)\n  }\n\n  get theme(): TTheme\n  {\n    return this.styleManager.theme\n  }\n  set theme(theme: PartialDeep<TTheme>)\n  {\n    this.logger.info(\"setTheme\", { theme })\n    this.styleManager.setTheme(theme)\n  }\n\n  get configuration(): InkEditorDeprecatedConfiguration\n  {\n    return this.#configuration\n  }\n\n  async initialize(): Promise<void>\n  {\n    try {\n      this.logger.info(\"initialize\")\n      this.layers.render()\n      this.layers.showLoader()\n\n      const compStyles = window.getComputedStyle(this.layers.root)\n      this.model.width = Math.max(parseInt(compStyles.width.replace(\"px\", \"\")), this.#configuration.rendering.minWidth)\n      this.model.height = Math.max(parseInt(compStyles.height.replace(\"px\", \"\")), this.#configuration.rendering.minHeight)\n      this.history.push(this.model)\n      this.layers.rendering.classList.add(this.configuration.recognition.type.toLowerCase().replace(\" \", \"-\"))\n      this.renderer.init(this.layers.rendering, { x: 50, y: 50 })\n      this.grabber.attach(this.layers.rendering)\n    } catch (error) {\n      this.logger.error(\"initialize\", error)\n      this.layers.showMessageError(error as Error)\n      throw error\n    }\n    finally {\n      this.logger.debug(\"initialize\", \"finally\")\n      this.layers.hideLoader()\n      this.layers.updateState(true)\n    }\n  }\n\n  drawCurrentStroke(): void\n  {\n    this.logger.debug(\"drawCurrentStroke\", { stroke: this.model.currentSymbol })\n    this.renderer.drawPendingStroke(this.model.currentSymbol)\n  }\n\n  async updateModelRendering(): Promise<Model>\n  {\n    this.logger.info(\"updateModelRendering\")\n    this.renderer.drawModel(this.model)\n    const deferred = new DeferredPromise<Model>()\n    this.history.push(this.model)\n    if (this.#configuration.triggers.exportContent !== \"DEMAND\") {\n      clearTimeout(this.#exportTimer)\n      let currentModel = this.model.clone()\n      this.#exportTimer = setTimeout(async () =>\n      {\n        try {\n          currentModel = await this.recognizer.export(currentModel)\n          this.history.updateStack(currentModel)\n          if (this.model.modificationDate === currentModel.modificationDate) {\n            this.model.exports = currentModel.exports\n          }\n          deferred.resolve(this.model)\n        } catch (error) {\n          this.logger.error(\"updateModelRendering\", { error })\n          this.event.emitError(error as Error)\n          deferred.reject(error as Error)\n        }\n      }, this.#configuration.triggers.exportContent === \"QUIET_PERIOD\" ? this.#configuration.triggers.exportContentDelay : 0)\n    } else {\n      deferred.resolve(this.model)\n    }\n    await deferred.promise\n    this.event.emitExported(this.model.exports as TExport)\n    this.logger.debug(\"updateModelRendering\", this.model.exports)\n    return deferred.promise\n  }\n\n  async export(mimeTypes?: string[]): Promise<Model>\n  {\n    this.logger.info(\"export\", { mimeTypes })\n    const newModel = await this.recognizer.export(this.model.clone(), mimeTypes)\n    if (this.model.modificationDate === newModel.modificationDate) {\n      this.model.mergeExport(newModel.exports as TExport)\n    }\n    this.history.updateStack(newModel)\n    this.event.emitExported(this.model.exports as TExport)\n    this.logger.debug(\"export\", this.model)\n    return this.model\n  }\n\n  async convert(params?: { conversionState?: TConverstionState, mimeTypes?: string[] }): Promise<Model>\n  {\n    this.logger.info(\"convert\", { params })\n    const newModel = await this.recognizer.convert(this.model, params?.conversionState, params?.mimeTypes)\n    Object.assign(this.#model, newModel)\n    this.event.emitConverted(this.model.converts as TExport)\n    this.logger.debug(\"convert\", this.model)\n    return this.model\n  }\n\n  async importPointEvents(strokes: PartialDeep<TStroke>[]): Promise<Model>\n  {\n    const errors: string[] = []\n    strokes.forEach((s, strokeIndex) =>\n    {\n      let flag = true\n      const stroke = new Stroke(s.style || DefaultPenStyle, s.pointerType)\n      if (s.id) stroke.id = s.id\n      if (!s.pointers?.length) {\n        errors.push(`stroke ${ strokeIndex + 1 } has not pointers`)\n        flag = false\n        return\n      }\n      s.pointers?.forEach((pp, pIndex) =>\n      {\n        if (!pp) {\n          errors.push(`stroke ${ strokeIndex + 1 } has no pointer at ${ pIndex }`)\n          flag = false\n          return\n        }\n        const pointer: TPointer = {\n          p: pp.p || 1,\n          t: pp.t || pIndex,\n          x: 0,\n          y: 0\n        }\n        if (pp?.x == undefined || pp?.x == null) {\n          errors.push(`stroke ${ strokeIndex + 1 } has no x at pointer at ${ pIndex }`)\n          flag = false\n          return\n        }\n        else {\n          pointer.x = pp.x\n        }\n        if (pp?.y == undefined || pp?.y == null) {\n          errors.push(`stroke ${ strokeIndex + 1 } has no y at pointer at ${ pIndex }`)\n          flag = false\n          return\n        }\n        else {\n          pointer.y = pp.y\n        }\n        if (flag) {\n          stroke.pointers.push(pointer)\n        }\n      })\n      if (flag) {\n        this.model.addStroke(stroke)\n      }\n    })\n\n    if (errors.length) {\n      this.event.emitError(new Error(errors.join(\"\\n\")))\n    }\n    try {\n      const newModel = await this.updateModelRendering()\n      Object.assign(this.#model, newModel)\n      this.event.emitImported(this.model.exports as TExport)\n      return this.model\n    } catch (error) {\n      this.event.emitError(error as Error)\n      throw error as Error\n    }\n  }\n  async resize({ height, width }: { height?: number, width?: number } = {}): Promise<void>\n  {\n    this.logger.info(\"resize\", { height, width })\n    const deferredResize = new DeferredPromise<Model>()\n    const compStyles = window.getComputedStyle(this.layers.root)\n    this.model.height = height || Math.max(parseInt(compStyles.height.replace(\"px\", \"\")), this.configuration.rendering.minHeight)\n    this.model.width = width || Math.max(parseInt(compStyles.width.replace(\"px\", \"\")), this.configuration.rendering.minWidth)\n    this.renderer.resize(this.model)\n    if (this.model.symbols.length) {\n      clearTimeout(this.#resizeTimer)\n      this.#resizeTimer = setTimeout(async () =>\n      {\n        const resizeModel = await this.recognizer.resize(this.model)\n        deferredResize.resolve(resizeModel)\n      }, this.#configuration.triggers.resizeTriggerDelay)\n    } else {\n      deferredResize.resolve(this.model)\n    }\n    this.#model = await deferredResize.promise\n    this.logger.debug(\"resize\", { model: this.model })\n    this.event.emitExported(this.model.exports as TExport)\n  }\n\n  async undo(): Promise<void>\n  {\n    this.logger.info(\"undo\")\n    this.#model = this.history.undo() as Model\n    this.renderer.drawModel(this.#model)\n    this.#model = await this.recognizer.export(this.#model)\n    this.history.updateStack(this.#model)\n    this.event.emitExported(this.#model.exports as TExport)\n    this.logger.debug(\"undo\", this.#model)\n  }\n\n  async redo(): Promise<void>\n  {\n    this.logger.info(\"redo\")\n    this.#model = this.history.redo() as Model\n    this.renderer.drawModel(this.#model)\n    this.#model = await this.recognizer.export(this.#model)\n    this.history.updateStack(this.#model)\n    this.event.emitExported(this.#model.exports as TExport)\n    this.logger.debug(\"redo\", this.#model)\n  }\n\n  async clear(): Promise<void>\n  {\n    this.logger.info(\"clear\")\n    this.model.clear()\n    this.history.push(this.model)\n    this.renderer.drawModel(this.model)\n    this.event.emitExported(this.model.exports as TExport)\n    this.event.emitCleared()\n    this.logger.debug(\"clear\", this.model)\n  }\n\n  async destroy(): Promise<void>\n  {\n    this.logger.info(\"destroy\")\n    this.event.removeAllListeners()\n    this.grabber.detach()\n    this.layers.destroy()\n    this.renderer.destroy()\n    return Promise.resolve()\n  }\n}\n", "import style from \"./InteractiveInkSSRSmartGuide.css\"\nimport { InteractiveInkSSREditor } from \"../editor\"\nimport { LoggerCategory, LoggerManager } from \"../logger\"\nimport { ExportType, TJIIXExport, TJIIXWord } from \"../model\"\nimport { convertMillimeterToPixel, createUUID } from \"../utils\"\nimport { TMarginConfiguration } from \"../recognizer\"\n\n/**\n * @group InteractiveInkSSRSmartGuide\n */\nexport class InteractiveInkSSRSmartGuide\n{\n  uuid: string\n  #smartGuideElement!: HTMLDivElement\n  #wrapperElement!: HTMLDivElement\n  #prompterContainerElement!: HTMLDivElement\n  #prompterTextElement!: HTMLDivElement\n  #ellipsisElement!: HTMLDivElement\n  #tagElement!: HTMLDivElement\n  #candidatesElement!: HTMLDivElement\n  #menuElement!: HTMLDivElement\n  #convertElement!: HTMLButtonElement\n  #copyElement!: HTMLButtonElement\n  #deleteElement!: HTMLButtonElement\n  #isMenuOpen!: boolean\n  editor: InteractiveInkSSREditor\n  margin: TMarginConfiguration\n  jiix?: TJIIXExport\n  lastWord?: TJIIXWord\n  wordToChange?: TJIIXWord\n  #logger = LoggerManager.getLogger(LoggerCategory.SMARTGUIDE)\n\n  constructor(editor: InteractiveInkSSREditor)\n  {\n    this.#logger.info(\"constructor\")\n    this.uuid = createUUID()\n    this.editor = editor\n    this.margin = {\n      bottom: 0,\n      left: 0,\n      right: 0,\n      top: 0\n    }\n    this.#createRootElement()\n    this.#createWrapperElement()\n    this.#createPrompterContainerElement()\n    this.#createPrompterTextElement()\n    this.#createEllipsisElement()\n    this.#createTagElement()\n    this.#createCandidatesElement()\n    this.#createMoreMenuElement()\n    this.#createConvertElement()\n    this.#createCopyElement()\n    this.#createDeleteElement()\n  }\n\n  #createRootElement(): void\n  {\n    this.#smartGuideElement = document.createElement(\"div\")\n    this.#smartGuideElement.id = `smartguide-${ this.uuid }`\n    this.#smartGuideElement.classList.add(\"smartguide\")\n    this.#smartGuideElement.addEventListener(\"pointerdown\", e => {\n      e.preventDefault()\n      e.stopPropagation()\n    })\n  }\n\n  #createWrapperElement(): void\n  {\n    this.#wrapperElement = document.createElement(\"div\")\n    this.#wrapperElement.id = `smartguide-wrapper-${ this.uuid }`\n    this.#wrapperElement.classList.add(\"smartguide-wrapper\")\n  }\n\n  #createPrompterContainerElement(): void\n  {\n    this.#prompterContainerElement = document.createElement(\"div\")\n    this.#prompterContainerElement.id = `prompter-container-${ this.uuid }`\n    this.#prompterContainerElement.classList.add(\"prompter-container\")\n  }\n\n  #createPrompterTextElement(): void\n  {\n    this.#prompterTextElement = document.createElement(\"div\")\n    this.#prompterTextElement.id = `prompter-text-${ this.uuid }`\n    this.#prompterTextElement.classList.add(\"prompter-text\")\n    this.#prompterTextElement.setAttribute(\"touch-action\", \"none\")\n  }\n\n  #createEllipsisElement(): void\n  {\n    this.#ellipsisElement = document.createElement(\"div\")\n    this.#ellipsisElement.id = `ellipsis-${ this.uuid }`\n    this.#ellipsisElement.classList.add(\"ellipsis\")\n    this.#ellipsisElement.innerHTML = \"...\"\n  }\n\n  #createTagElement(): void\n  {\n    this.#tagElement = document.createElement(\"div\")\n    this.#tagElement.id = `tag-icon-${ this.uuid }`\n    this.#tagElement.classList.add(\"tag-icon\")\n    this.#tagElement.innerHTML = \"&#182;\"\n  }\n\n  #createCandidatesElement(): void\n  {\n    this.#candidatesElement = document.createElement(\"div\")\n    this.#candidatesElement.id = `candidates-${ this.uuid }`\n    this.#candidatesElement.classList.add(\"candidates\")\n  }\n\n  #createMoreMenuElement(): void\n  {\n    this.#menuElement = document.createElement(\"div\")\n    this.#menuElement.id = `more-menu-${ this.uuid }`\n    this.#menuElement.classList.add(\"more-menu\")\n  }\n\n  #createConvertElement(): void\n  {\n    this.#convertElement = document.createElement(\"button\")\n    this.#convertElement.id = `convert-${ this.uuid }`\n    this.#convertElement.classList.add(\"options-label-button\")\n    this.#convertElement.innerHTML = \"Convert\"\n  }\n\n  #createCopyElement(): void\n  {\n    this.#copyElement = document.createElement(\"button\")\n    this.#copyElement.id = `copy-${ this.uuid }`\n    this.#copyElement.classList.add(\"options-label-button\")\n    this.#copyElement.innerHTML = \"Copy\"\n  }\n\n  #createDeleteElement(): void\n  {\n    this.#deleteElement = document.createElement(\"button\")\n    this.#deleteElement.id = `delete-${ this.uuid }`\n    this.#deleteElement.classList.add(\"options-label-button\")\n    this.#deleteElement.innerHTML = \"Delete\"\n  }\n\n  init(domElement: HTMLElement, margin: TMarginConfiguration): void\n  {\n    this.#logger.info(\"init\", { domElement, margin })\n\n    const styleElement = document.createElement(\"style\")\n    styleElement.appendChild(document.createTextNode(style as string))\n    domElement.appendChild(styleElement)\n\n\n    domElement.appendChild(this.#smartGuideElement)\n    this.#smartGuideElement.appendChild(this.#wrapperElement)\n\n    this.#wrapperElement.appendChild(this.#tagElement)\n\n    this.#prompterContainerElement.appendChild(this.#prompterTextElement)\n    this.#wrapperElement.appendChild(this.#prompterContainerElement)\n\n    this.#wrapperElement.appendChild(this.#ellipsisElement)\n\n    this.#menuElement.appendChild(this.#convertElement)\n    this.#menuElement.appendChild(this.#copyElement)\n    this.#menuElement.appendChild(this.#deleteElement)\n    this.#menuElement.classList.add(\"close\")\n    this.#wrapperElement.appendChild(this.#menuElement)\n    this.#isMenuOpen = false\n\n    this.#candidatesElement.style.display = \"none\"\n    this.#wrapperElement.appendChild(this.#candidatesElement)\n    this.margin = margin\n    this.#addListeners()\n\n    this.resize()\n  }\n\n  #showCandidates = (target: HTMLElement) =>\n  {\n    this.#logger.info(\"showCandidates\", { target })\n    const wordId = parseInt(target.id.replace(\"word-\", \"\").replace(this.uuid, \"\"))\n    const words = this.jiix?.words as TJIIXWord[]\n    this.wordToChange = words[wordId]\n    if (this.wordToChange) {\n      this.wordToChange.id = wordId.toString()\n      this.#candidatesElement.innerHTML = \"\"\n      if (this.wordToChange?.candidates) {\n        this.#candidatesElement.style.display = \"flex\"\n        this.wordToChange.candidates.forEach((word, index) =>\n        {\n          if (this.wordToChange?.label === word) {\n            this.#candidatesElement.innerHTML += `<span id=\"cdt-${ index }${ this.uuid }\" class=\"selected-word\">${ word }</span>`\n          } else {\n            this.#candidatesElement.innerHTML += `<span id=\"cdt-${ index }${ this.uuid }\">${ word }</span>`\n          }\n        })\n\n        target.appendChild(this.#candidatesElement)\n      }\n    }\n  }\n  #hideCandidates(): void\n  {\n    this.#candidatesElement.style.display = \"none\"\n  }\n\n  #openMenu(): void\n  {\n    this.#menuElement.classList.add(\"open\")\n    this.#menuElement.classList.remove(\"close\")\n    this.#isMenuOpen = true\n  }\n  #closeMenu(): void\n  {\n    this.#menuElement.classList.add(\"close\")\n    this.#menuElement.classList.remove(\"open\")\n    this.#isMenuOpen = false\n  }\n\n  #onClickEllipsis = (evt: Event) =>\n  {\n    this.#logger.info(\"onClickEllipsis\", { evt })\n    evt.preventDefault()\n    evt.stopPropagation()\n    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n    this.#isMenuOpen ? this.#closeMenu() : this.#openMenu()\n    this.#hideCandidates()\n  }\n\n  #onClickConvert = (evt: Event) =>\n  {\n    this.#logger.info(\"onClickConvert\", { evt })\n    evt.preventDefault()\n    evt.stopPropagation()\n    this.editor.convert()\n    this.#closeMenu()\n  }\n\n  #createTextAreaElement(value: string): HTMLTextAreaElement\n  {\n    const isRTL = document.documentElement.getAttribute(\"dir\") === \"rtl\"\n    const textArea = document.createElement(\"textarea\")\n    textArea.style.fontSize = \"12pt\"\n    textArea.style.display = \"absolute\"\n    textArea.style[isRTL ? \"right\" : \"left\"] = \"-9999px\"\n    const yPosition = window.pageYOffset || document.documentElement.scrollTop\n    textArea.style.top = `${ yPosition }px`\n    textArea.setAttribute(\"readonly\", \"\")\n    textArea.value = value\n    return textArea\n  }\n\n  #selectText(textArea: HTMLTextAreaElement)\n  {\n    if (navigator.userAgent.match(/ipad|iphone/i)) {\n      const range = document.createRange()\n      range.selectNodeContents(textArea)\n      const selection = window.getSelection()\n      if (selection) {\n        selection.removeAllRanges()\n        selection.addRange(range)\n        textArea.setSelectionRange(0, 999999)\n      }\n    } else {\n      textArea.select()\n    }\n  }\n\n  #onClickCopy = async (evt: Event): Promise<void> =>\n  {\n    this.#logger.info(\"onClickCopy\", { evt })\n    evt.preventDefault()\n    evt.stopPropagation()\n    try {\n      this.#closeMenu()\n      let message = \"Nothing to copy\"\n      if (this.#prompterTextElement.innerText) {\n        message = `\"${ this.#prompterTextElement.innerText }\" copied to clipboard`\n        const fakeEl = this.#createTextAreaElement(this.#prompterTextElement.innerText)\n        this.#prompterContainerElement.appendChild(fakeEl)\n        this.#selectText(fakeEl)\n        document.execCommand(\"copy\")\n        fakeEl.remove()\n      }\n      this.editor.event.emitNotif({ message, timeout: 1500 })\n    } catch (error) {\n      this.#logger.error(\"onClickCopy\", error)\n      this.editor.event.emitError(error as Error)\n    }\n  }\n\n  #onClickDelete = (evt: Event) =>\n  {\n    this.#logger.info(\"onClickDelete\", { evt })\n    evt.preventDefault()\n    evt.stopPropagation()\n    this.editor.clear()\n    this.#closeMenu()\n  }\n\n  #onClickCandidate = (evt: Event) =>\n  {\n    this.#logger.info(\"onClickCandidate\", { evt })\n    evt.preventDefault()\n    evt.stopPropagation()\n    const target = evt.target as HTMLElement\n    const candidate = target.innerText\n    if (this.jiix?.words && candidate !== this.wordToChange?.label && this.wordToChange?.candidates?.includes(candidate)) {\n      this.jiix.words[parseInt(this.wordToChange?.id as string)].label = candidate\n      this.editor.import(new Blob([JSON.stringify(this.jiix)], { type: ExportType.JIIX }), ExportType.JIIX)\n    }\n    this.#candidatesElement.style.display = \"none\"\n  }\n\n  #onClickPrompter = (evt: Event): void =>\n  {\n    this.#logger.info(\"onClickPrompter\", { evt })\n    evt.preventDefault()\n    evt.stopPropagation()\n    this.#closeMenu()\n    const target = evt.target as HTMLElement\n    if (target.id !== this.#prompterTextElement.id) {\n      this.#showCandidates(target)\n    } else {\n      this.#hideCandidates()\n    }\n  }\n\n  #stopPropagation = (evt: Event) =>\n  {\n    evt.preventDefault()\n    evt.stopPropagation()\n  }\n\n  #onClickOutSide = () =>\n  {\n    this.#hideCandidates()\n    this.#closeMenu()\n  }\n\n  #addListeners(): void\n  {\n    this.#smartGuideElement.addEventListener(\"pointerdown\", this.#stopPropagation.bind(this))\n    this.#ellipsisElement.addEventListener(\"pointerdown\", this.#onClickEllipsis.bind(this))\n    this.#convertElement.addEventListener(\"pointerdown\", this.#onClickConvert.bind(this))\n    this.#copyElement.addEventListener(\"pointerdown\", this.#onClickCopy.bind(this))\n    this.#deleteElement.addEventListener(\"pointerdown\", this.#onClickDelete.bind(this))\n    this.#prompterTextElement.addEventListener(\"pointerdown\", this.#onClickPrompter.bind(this))\n    this.#candidatesElement.addEventListener(\"pointerdown\", this.#onClickCandidate.bind(this))\n    document.addEventListener(\"pointerdown\", this.#onClickOutSide.bind(this))\n  }\n\n  #removeListeners(): void\n  {\n    this.#smartGuideElement.addEventListener(\"pointerdown\", this.#stopPropagation)\n    this.#ellipsisElement.removeEventListener(\"pointerdown\", this.#onClickEllipsis)\n    this.#convertElement.removeEventListener(\"pointerdown\", this.#onClickConvert)\n    this.#copyElement.removeEventListener(\"pointerdown\", this.#onClickCopy)\n    this.#deleteElement.removeEventListener(\"pointerdown\", this.#onClickDelete)\n    this.#prompterTextElement.removeEventListener(\"pointerdown\", this.#onClickPrompter)\n    this.#candidatesElement.removeEventListener(\"pointerdown\", this.#onClickCandidate)\n    document.removeEventListener(\"pointerdown\", this.#onClickOutSide)\n  }\n\n  resize(): void\n  {\n    this.#logger.info(\"resize\")\n    const marginLeft = convertMillimeterToPixel(this.margin.left)\n    const marginRight = convertMillimeterToPixel(this.margin.right)\n    this.#wrapperElement.style.marginLeft = `${ marginLeft }px`\n    this.#wrapperElement.style.marginRight = `${ marginRight }px`\n  }\n\n  update(exports: TJIIXExport): void\n  {\n    this.#logger.info(\"update\", { exports })\n    this.jiix = exports\n    const createWordSpan = (index: number, word?: TJIIXWord) =>\n    {\n      const span = document.createElement(\"span\")\n      span.id = `word-${ index }${ this.uuid }`\n      if (word) {\n        span.textContent = word.label\n      } else {\n        span.innerHTML = \"&nbsp;\"\n      }\n      this.#logger.debug(\"update\", { span })\n      return span\n    }\n\n    const populatePrompter = () =>\n    {\n      this.#logger.info(\"populatePrompter\")\n      this.#prompterTextElement.innerHTML = \"\"\n      if (this.jiix?.words) {\n        const words = this.jiix.words as TJIIXWord[]\n        const myFragment = document.createDocumentFragment()\n        words.forEach((word, index) =>\n        {\n          if (word.label === \" \" || word.label.includes(\"\\n\")) {\n            myFragment.appendChild(createWordSpan(index))\n          } else if (index !== words.length - 1) {\n            myFragment.appendChild(createWordSpan(index, word))\n          } else {\n            this.#prompterTextElement.appendChild(myFragment)\n            if (this.lastWord) {\n              this.lastWord = word\n            }\n            const span = createWordSpan(index, word)\n            // This is used to scroll to last word if last word is modified\n\n            if ((this.lastWord?.candidates !== word.candidates) && (this.lastWord?.label !== word.label)) {\n              this.lastWord = word\n            }\n            if (this.wordToChange?.id === index.toString()) {\n              span.classList.add(\"modified-word\")\n              this.wordToChange = undefined\n            }\n            else {\n              span.classList.add(\"added-word\")\n            }\n            this.#prompterTextElement.appendChild(span)\n            this.#prompterContainerElement.scrollLeft = span.offsetLeft\n            this.#logger.debug(\"update => populatePrompter\", { span, lastWord: this.lastWord })\n          }\n        })\n      }\n    }\n    populatePrompter()\n    if (this.jiix?.words?.length) {\n      this.#ellipsisElement.style.setProperty(\"pointer-events\", \"auto\")\n    }\n    else {\n      this.#ellipsisElement.style.setProperty(\"pointer-events\", \"none\")\n    }\n  }\n\n  clear(): void\n  {\n    this.#logger.info(\"clear\")\n    this.#prompterTextElement.innerHTML = \"\"\n    this.#candidatesElement.innerHTML = \"\"\n  }\n\n  destroy(): void\n  {\n    this.#logger.info(\"destroy\")\n    this.#removeListeners()\n    this.#smartGuideElement.remove()\n  }\n}", "import { DefaultGrabberConfiguration, TGrabberConfiguration } from \"../grabber\"\nimport { DefaultHistoryConfiguration, THistoryConfiguration } from \"../history\"\nimport { DefaultLoggerConfiguration, TLoggerConfiguration } from \"../logger\"\nimport { DefaultRecognizerWebSocketSSRConfiguration, TRecognizerWebSocketSSRRecognitionConfiguration, TRecognizerWebSocketSSRConfiguration, RecognizerWebSocketSSRConfiguration, TServerWebsocketConfiguration } from \"../recognizer\"\nimport { DefaultRendererConfiguration, TRendererConfiguration } from \"../renderer\"\nimport { DefaultTheme, TPenStyle, TTheme } from \"../style\"\nimport { mergeDeep, PartialDeep } from \"../utils\"\nimport { TEditorConfiguration } from \"./AbstractEditor\"\nimport { DefaultEditorTriggerConfiguration, TEditorTriggerConfiguration } from \"./EditorTriggerConfiguration\"\n\n/**\n * @group Editor\n */\nexport type TInteractiveInkSSREditorConfiguration = TEditorConfiguration & TRecognizerWebSocketSSRConfiguration & {\n  rendering: TRendererConfiguration\n  smartGuide: {\n    enable: boolean\n  },\n  \"undo-redo\": THistoryConfiguration\n  grabber: TGrabberConfiguration\n  triggers: TEditorTriggerConfiguration\n  logger: TLoggerConfiguration\n  penStyle: TPenStyle,\n  penStyleClasses?: string\n  theme: TTheme\n}\n\n/**\n * @group Editor\n * @source\n */\nexport const DefaultInteractiveInkSSREditorConfiguration: TInteractiveInkSSREditorConfiguration = {\n  server: DefaultRecognizerWebSocketSSRConfiguration.server,\n  recognition: DefaultRecognizerWebSocketSSRConfiguration.recognition,\n  rendering: DefaultRendererConfiguration,\n  smartGuide: {\n    enable: true\n  },\n  grabber: DefaultGrabberConfiguration,\n  triggers: DefaultEditorTriggerConfiguration,\n  \"undo-redo\": DefaultHistoryConfiguration,\n  logger: DefaultLoggerConfiguration,\n  penStyle: {},\n  theme: DefaultTheme\n}\n\n/**\n * @group Editor\n */\nexport class InteractiveInkSSREditorConfiguration implements TInteractiveInkSSREditorConfiguration\n{\n  server: TServerWebsocketConfiguration\n  recognition: TRecognizerWebSocketSSRRecognitionConfiguration\n  rendering: TRendererConfiguration\n  smartGuide: {\n    enable: boolean\n  }\n  \"undo-redo\": THistoryConfiguration\n  grabber: TGrabberConfiguration\n  triggers: TEditorTriggerConfiguration\n  logger: TLoggerConfiguration\n  penStyle: TPenStyle\n  penStyleClasses?: string\n  theme: TTheme\n\n  constructor(configuration?: PartialDeep<TInteractiveInkSSREditorConfiguration>)\n  {\n    const { server, recognition } = new RecognizerWebSocketSSRConfiguration(configuration)\n    this.server = server\n    this.recognition = recognition\n\n    this.rendering = mergeDeep({}, DefaultInteractiveInkSSREditorConfiguration.rendering, configuration?.rendering)\n    this.smartGuide = mergeDeep({}, DefaultInteractiveInkSSREditorConfiguration.smartGuide, configuration?.smartGuide)\n    this[\"undo-redo\"] = mergeDeep({}, DefaultInteractiveInkSSREditorConfiguration[\"undo-redo\"], configuration?.[\"undo-redo\"])\n    this.grabber = mergeDeep({}, DefaultInteractiveInkSSREditorConfiguration.grabber, configuration?.grabber)\n    this.triggers = mergeDeep({}, DefaultInteractiveInkSSREditorConfiguration.triggers, configuration?.triggers)\n    this.logger = mergeDeep({}, DefaultInteractiveInkSSREditorConfiguration.logger, configuration?.logger)\n    this.penStyle = mergeDeep({}, DefaultInteractiveInkSSREditorConfiguration.penStyle, configuration?.penStyle)\n    this.penStyleClasses = configuration?.penStyleClasses || this.penStyleClasses\n    this.theme = mergeDeep({}, DefaultInteractiveInkSSREditorConfiguration.theme, configuration?.theme)\n\n    if (this.recognition.type !== \"TEXT\") {\n      this.smartGuide.enable = false\n    }\n    if (this.smartGuide.enable && !this.recognition.text.mimeTypes.includes(\"application/vnd.myscript.jiix\")) {\n      this.recognition.text.mimeTypes.push(\"application/vnd.myscript.jiix\")\n    }\n\n  }\n}\n", "import { EditorTool } from \"../Constants\"\nimport { PointerEventGrabber, PointerInfo } from \"../grabber\"\nimport { Model, TExport, TJIIXExport } from \"../model\"\nimport { TRecognizerWebSocketSSRMessageSVGPatch, RecognizerWebSocketSSR, DefaultMarginConfiguration, TConverstionState, TMarginConfiguration } from \"../recognizer\"\nimport { InteractiveInkSSRSmartGuide } from \"../smartguide\"\nimport { InteractiveInkSSRSVGRenderer } from \"../renderer\"\nimport { DefaultPenStyle, StyleManager, TPenStyle, TTheme } from \"../style\"\nimport { HistoryManager, THistoryContext } from \"../history\"\nimport { DeferredPromise, PartialDeep } from \"../utils\"\nimport { Stroke, TStroke, TPointer } from \"../symbol\"\nimport { AbstractEditor, EditorOptionsBase } from \"./AbstractEditor\"\nimport { InteractiveInkSSREditorConfiguration } from \"./InteractiveInkSSREditorConfiguration\"\n\n/**\n * @group Editor\n */\nexport type TInteractiveInkSSREditorOptions = PartialDeep<EditorOptionsBase &\n  {\n    configuration: InteractiveInkSSREditorConfiguration\n  }> &\n  {\n    override?: {\n      grabber?: PointerEventGrabber\n      recognizer?: RecognizerWebSocketSSR\n    }\n  }\n\n/**\n * @group Editor\n */\nexport class InteractiveInkSSREditor extends AbstractEditor\n{\n  #configuration: InteractiveInkSSREditorConfiguration\n  #model: Model\n  #resizeTimer?: ReturnType<typeof setTimeout>\n\n  smartGuide?: InteractiveInkSSRSmartGuide\n  grabber: PointerEventGrabber\n  renderer: InteractiveInkSSRSVGRenderer\n  recognizer: RecognizerWebSocketSSR\n  history: HistoryManager\n  styleManager: StyleManager\n  #tool: EditorTool = EditorTool.Write\n\n  constructor(rootElement: HTMLElement, options?: TInteractiveInkSSREditorOptions)\n  {\n    super(rootElement, options)\n\n    this.#configuration = new InteractiveInkSSREditorConfiguration(options?.configuration)\n    this.styleManager = new StyleManager(options?.configuration?.penStyle, options?.configuration?.theme)\n\n    if (options?.override?.grabber) {\n      const CustomGrabber = options.override.grabber as unknown as typeof PointerEventGrabber\n      this.grabber = new CustomGrabber(this.#configuration.grabber)\n    }\n    else {\n      this.grabber = new PointerEventGrabber(this.#configuration.grabber)\n    }\n\n    if (options?.override?.recognizer) {\n      const CustomRecognizer = options.override.recognizer as unknown as typeof RecognizerWebSocketSSR\n      this.recognizer = new CustomRecognizer(this.#configuration)\n    }\n    else {\n      this.recognizer = new RecognizerWebSocketSSR(this.#configuration)\n    }\n\n    this.renderer = new InteractiveInkSSRSVGRenderer(this.#configuration.rendering)\n\n    this.tool = EditorTool.Write\n    this.#model = new Model()\n    this.history = new HistoryManager(this.#configuration[\"undo-redo\"], this.event)\n  }\n\n  get initializationPromise(): Promise<void>\n  {\n    return this.recognizer.initialized.promise\n  }\n\n  get tool(): EditorTool\n  {\n    return this.#tool\n  }\n  set tool(i: EditorTool)\n  {\n    this.#tool = i\n    this.setCursorStyle()\n  }\n\n  protected setCursorStyle(): void\n  {\n    switch (this.tool) {\n      case EditorTool.Erase:\n        this.layers.root.classList.remove(\"draw\")\n        this.layers.root.classList.add(\"erase\")\n        break\n      default:\n        this.layers.root.classList.add(\"draw\")\n        this.layers.root.classList.remove(\"erase\")\n        break\n    }\n  }\n\n  get model(): Model\n  {\n    return this.#model\n  }\n\n  get configuration(): InteractiveInkSSREditorConfiguration\n  {\n    return this.#configuration\n  }\n\n  get currentPenStyle(): TPenStyle\n  {\n    return this.styleManager.currentPenStyle\n  }\n\n  get penStyle(): TPenStyle\n  {\n    return this.styleManager.penStyle\n  }\n  set penStyle(penStyle: PartialDeep<TPenStyle>)\n  {\n    this.logger.info(\"setPenStyle\", { penStyle })\n    this.styleManager.setPenStyle(penStyle)\n    this.logger.debug(\"setPenStyle\", this.styleManager.penStyle)\n    this.recognizer.setPenStyle(this.styleManager.penStyle)\n  }\n\n  get penStyleClasses(): string\n  {\n    return this.styleManager.penStyleClasses\n  }\n  set penStyleClasses(penClass: string)\n  {\n    this.logger.info(\"setPenStyleClasses\", { penClass })\n    this.styleManager.setPenStyleClasses(penClass)\n    this.logger.debug(\"setPenStyleClasses\", this.styleManager.penStyleClasses)\n    this.recognizer.setPenStyleClasses(this.styleManager.penStyleClasses)\n  }\n\n  get theme(): TTheme\n  {\n    return this.styleManager.theme\n  }\n  set theme(theme: PartialDeep<TTheme>)\n  {\n    this.logger.info(\"setTheme\", { theme })\n    this.styleManager.setTheme(theme)\n    this.logger.debug(\"setTheme\", this.styleManager.theme)\n    this.recognizer.setTheme(this.styleManager.theme)\n  }\n\n  protected async syncStyle(): Promise<void>\n  {\n    await Promise.all([\n      this.recognizer.setPenStyle(this.styleManager.penStyle),\n      this.recognizer.setPenStyleClasses(this.styleManager.penStyleClasses),\n      this.recognizer.setTheme(this.styleManager.theme)\n    ])\n  }\n\n  protected onExport(exports: TExport): void\n  {\n    this.logger.debug(\"onExport\", { exports })\n    if (this.smartGuide && exports?.[\"application/vnd.myscript.jiix\"]) {\n      const jjix = exports[\"application/vnd.myscript.jiix\"] as TJIIXExport\n      this.smartGuide.update(jjix)\n    }\n    this.model.mergeExport(exports)\n    this.event.emitExported(exports)\n  }\n\n  protected onPointerDown(info: PointerInfo): void\n  {\n    this.logger.info(\"onPointerDown\", { tool: this.tool, info })\n    const style: TPenStyle = Object.assign({}, this.theme?.ink, this.currentPenStyle)\n    this.model.initCurrentStroke(info.pointer, this.tool === EditorTool.Erase ? \"eraser\" : info.pointerType, style)\n    this.drawCurrentStroke()\n  }\n\n  protected onPointerMove(info: PointerInfo): void\n  {\n    this.logger.info(\"onPointerMove\", { tool: this.tool, info })\n    this.model.appendToCurrentStroke(info.pointer)\n    this.drawCurrentStroke()\n  }\n\n  protected async onPointerUp(info: PointerInfo): Promise<void>\n  {\n    try {\n      this.logger.info(\"onPointerUp\", { tool: this.tool, info })\n      this.model.endCurrentStroke(info.pointer)\n      await this.synchronizeModelWithBackend()\n    } catch (error) {\n      this.event.emitError(error as Error)\n    }\n  }\n\n  protected onSVGPatch(evt: TRecognizerWebSocketSSRMessageSVGPatch): void\n  {\n    this.logger.info(\"onSVGPatch\", { evt })\n    this.renderer.updatesLayer(evt.layer, evt.updates)\n  }\n\n  protected initializeSmartGuide(): void\n  {\n    this.smartGuide?.destroy()\n    this.logger.info(\"initializeSmartGuide\", { smartGuide: this.configuration.smartGuide })\n    if (this.configuration.smartGuide.enable) {\n      this.smartGuide = new InteractiveInkSSRSmartGuide(this)\n      let margin: TMarginConfiguration = DefaultMarginConfiguration\n      switch (this.configuration.recognition.type) {\n        case \"TEXT\":\n          margin = this.configuration.recognition.text.margin\n          break\n        case \"MATH\":\n          margin = this.configuration.recognition.math.margin\n          break\n      }\n      this.smartGuide.init(this.layers.ui.root, margin)\n    }\n  }\n\n  protected onContetChaned(undoRedoContext: THistoryContext): void\n  {\n    this.history.context = undoRedoContext\n    this.event.emitChanged(undoRedoContext)\n  }\n\n  protected onError(error: Error): void\n  {\n    this.layers.showMessageError(error)\n    this.event.emitError(error)\n  }\n\n  async initialize(): Promise<void>\n  {\n    try {\n      this.logger.info(\"initialize\")\n      this.layers.render()\n      this.layers.showLoader()\n\n      const compStyles = window.getComputedStyle(this.layers.root)\n      this.model.width = Math.max(parseInt(compStyles.width.replace(\"px\", \"\")), this.#configuration.rendering.minWidth)\n      this.model.height = Math.max(parseInt(compStyles.height.replace(\"px\", \"\")), this.#configuration.rendering.minHeight)\n      this.history.push(this.model)\n      this.renderer.init(this.layers.rendering)\n\n      this.grabber.attach(this.layers.rendering)\n      this.grabber.onPointerDown = this.onPointerDown.bind(this)\n      this.grabber.onPointerMove = this.onPointerMove.bind(this)\n      this.grabber.onPointerUp = this.onPointerUp.bind(this)\n\n      this.initializeSmartGuide()\n\n      if(!this.recognizer.configuration.server.version) {\n        await this.loadInfo(this.configuration.server)\n        this.recognizer.configuration.server.version = this.info!.version\n      }\n      await this.recognizer.init(this.model.height, this.model.width)\n      this.recognizer.event.addExportedListener(this.onExport.bind(this))\n      this.recognizer.event.addSVGPatchListener(this.onSVGPatch.bind(this))\n      this.recognizer.event.addContentChangedListener(this.onContetChaned.bind(this))\n      this.recognizer.event.addIdleListener(this.event.emitIdle.bind(this.event))\n      this.recognizer.event.addErrorListener(this.onError.bind(this))\n\n      await this.syncStyle()\n    } catch (error) {\n      this.logger.error(\"initialize\", error)\n      this.layers.showMessageError(error as Error)\n      throw error\n    }\n    finally {\n      this.logger.debug(\"initialize\", \"finally\")\n      this.layers.hideLoader()\n      this.layers.updateState(true)\n    }\n  }\n\n  drawCurrentStroke(): void\n  {\n    this.logger.debug(\"drawCurrentStroke\", { stroke: this.model.currentSymbol })\n    const currentSymbol = this.model.currentSymbol as Stroke\n    if (currentSymbol) {\n      this.renderer.drawPendingStroke(currentSymbol)\n    }\n  }\n\n  async synchronizeModelWithBackend(): Promise<Model>\n  {\n    this.logger.info(\"synchronizeModelWithBackend\")\n    if (this.#configuration.triggers.exportContent !== \"DEMAND\") {\n      const unsentStrokes = this.model.extractUnsentStrokes()\n      this.model.updatePositionSent()\n      this.history.push(this.model)\n      this.renderer.clearErasingStrokes()\n      const exports = await this.recognizer.addStrokes(unsentStrokes)\n      this.model.mergeExport(exports)\n      this.history.updateStack(this.model)\n    }\n    this.logger.debug(\"synchronizeModelWithBackend\", this.model)\n    return this.model\n  }\n\n  async waitForIdle(): Promise<void>\n  {\n    return this.recognizer.waitForIdle()\n  }\n\n  async export(mimeTypes?: string[]): Promise<Model>\n  {\n    this.logger.info(\"export\", { mimeTypes })\n    try {\n      if (this.#configuration.triggers.exportContent === \"DEMAND\") {\n        const unsentStrokes = this.model.extractUnsentStrokes()\n        this.history.push(this.model)\n        this.history.stack.push(this.model.clone())\n        this.model.updatePositionSent()\n        const exports = await this.recognizer.addStrokes(unsentStrokes)\n        this.model.updatePositionReceived()\n        this.model.mergeExport(exports)\n        this.logger.debug(\"export\", this.model)\n      } else {\n        return await this.recognizer.export(this.model, mimeTypes)\n      }\n    } catch (error) {\n      this.logger.error(\"export\", { error })\n      this.event.emitError(error as Error)\n      return Promise.reject(error)\n    }\n    return this.model\n  }\n\n  async convert(params?: { conversionState?: TConverstionState }): Promise<Model>\n  {\n    this.logger.info(\"convert\", { params })\n    this.history.push(this.model)\n    this.history.stack.push(this.model.clone())\n    this.#model = await this.recognizer.convert(this.model, params?.conversionState)\n    this.logger.debug(\"convert\", this.model)\n    this.history.push(this.model)\n    this.event.emitConverted(this.model.converts as TExport)\n    return this.model\n  }\n\n  async import(data: Blob | string | TJIIXExport, mimeType?: string): Promise<Model>\n  {\n    let blobToImport: Blob\n    if (data instanceof Blob) {\n      blobToImport = data\n    }\n    else if (typeof data === \"string\") {\n      blobToImport = new Blob([data])\n    }\n    else {\n      blobToImport = new Blob([JSON.stringify(data)])\n    }\n    this.logger.info(\"import\", { data, mimeType })\n    this.history.stack.push(this.model.clone())\n    this.#model = await this.recognizer.import(this.model, blobToImport, mimeType)\n    this.history.push(this.model)\n    this.event.emitImported(this.model.exports as TExport)\n    return this.model\n  }\n\n  async importPointEvents(strokes: PartialDeep<TStroke>[]): Promise<Model>\n  {\n    this.logger.info(\"importPointEvents\", { strokes })\n    const errors: string[] = []\n    const strokesToImport = strokes.map((s, strokeIndex) =>\n    {\n      const str = new Stroke(s.style || DefaultPenStyle, s.pointerType)\n      if (s.id) str.id = s.id\n      if (s.pointerType) str.pointerType = s.pointerType\n      if (!s.pointers?.length) {\n        errors.push(`stroke ${ strokeIndex + 1 } has not pointers`)\n      }\n      let flag = true\n      s.pointers?.forEach((pp, pIndex) =>\n      {\n        flag = true\n        if (!pp) {\n          errors.push(`stroke ${ strokeIndex + 1 } has no pointer at ${ pIndex }`)\n          return\n        }\n        const pointer: TPointer = {\n          p: pp.p || 1,\n          t: pp.t || pIndex,\n          x: 0,\n          y: 0\n        }\n        if (pp?.x == undefined || pp?.x == null) {\n          errors.push(`stroke ${ strokeIndex + 1 } has no x at pointer at ${ pIndex }`)\n          flag = false\n        }\n        else {\n          pointer.x = pp.x\n        }\n        if (pp?.y == undefined || pp?.y == null) {\n          errors.push(`stroke ${ strokeIndex + 1 } has no y at pointer at ${ pIndex }`)\n          flag = false\n        }\n        else {\n          pointer.y = pp.y\n        }\n        if (flag) {\n          str.pointers.push(pointer)\n        }\n      })\n      return str\n    })\n    if (errors.length) {\n      this.event.emitError(new Error(errors.join(\"\\n\")))\n    }\n    strokesToImport.map(s => this.model.addStroke(s))\n    const exportPoints = await this.recognizer.importPointEvents(strokesToImport)\n    this.model.mergeExport(exportPoints)\n    this.event.emitImported(this.model.exports as TExport)\n    this.logger.debug(\"importPointEvents\", this.model)\n    return this.model\n  }\n\n  async resize({ height, width }: { height?: number, width?: number } = {}): Promise<void>\n  {\n    this.logger.info(\"resize\", { height, width })\n    const deferredResize = new DeferredPromise<Model>()\n    const compStyles = window.getComputedStyle(this.layers.root)\n    this.model.height = height || Math.max(parseInt(compStyles.height.replace(\"px\", \"\")), this.configuration.rendering.minHeight)\n    this.model.width = width || Math.max(parseInt(compStyles.width.replace(\"px\", \"\")), this.configuration.rendering.minWidth)\n    const clonedModel = this.model.clone()\n    this.renderer.resize(clonedModel)\n    clearTimeout(this.#resizeTimer)\n    this.#resizeTimer = setTimeout(async () =>\n    {\n      try {\n        const resizeModel = await this.recognizer.resize(clonedModel)\n        deferredResize.resolve(resizeModel)\n      } catch (error) {\n        this.logger.error(\"resize\", { height, width, error })\n        deferredResize.reject(error as Error)\n      }\n    }, this.#configuration.triggers.resizeTriggerDelay)\n\n    this.#model = await deferredResize.promise\n    this.smartGuide?.resize()\n    this.event.emitExported(this.model.exports as TExport)\n    this.logger.debug(\"resize\", this.model)\n  }\n\n  async undo(): Promise<Model>\n  {\n    this.logger.info(\"undo\")\n    if (this.history.context.canUndo) {\n      this.#model = this.history.undo() as Model\n      return this.recognizer.undo(this.model)\n    }\n    else {\n      throw new Error(\"Undo not allowed\")\n    }\n  }\n\n  async redo(): Promise<Model>\n  {\n    this.logger.info(\"redo\")\n    if (this.history.context.canRedo) {\n      this.#model = this.history.redo() as Model\n      this.logger.debug(\"undo\", this.#model)\n      return this.recognizer.redo(this.model)\n    }\n    else {\n      throw new Error(\"Redo not allowed\")\n    }\n  }\n\n  async clear(): Promise<void>\n  {\n    this.logger.info(\"clear\")\n    this.model.clear()\n    this.history.push(this.model)\n    await this.recognizer.clear(this.model)\n    this.event.emitCleared()\n  }\n\n  async destroy(): Promise<void>\n  {\n    this.logger.info(\"destroy\")\n    this.event.removeAllListeners()\n    this.grabber.detach()\n    this.layers.destroy()\n    this.renderer.destroy()\n    this.recognizer.destroy()\n    this.smartGuide?.destroy()\n    return Promise.resolve()\n  }\n}\n", "import { DefaultGrabberConfiguration, TGrabberConfiguration } from \"../grabber\"\nimport { DefaultHistoryConfiguration, THistoryConfiguration } from \"../history\"\nimport { DefaultLoggerConfiguration, TLoggerConfiguration } from \"../logger\"\nimport { DefaultRecognizerHTTPV2Configuration, RecognizerHTTPV2Configuration, TRecognizerHTTPV2Configuration, TRecognizerHTTPV2RecognitionConfiguration, TServerHTTPConfiguration } from \"../recognizer\"\nimport { DefaultRendererConfiguration, TRendererConfiguration } from \"../renderer\"\nimport { DefaultStyle, TStyle } from \"../style\"\nimport { convertPixelToMillimeter, mergeDeep, PartialDeep } from \"../utils\"\nimport { TEditorConfiguration } from \"./AbstractEditor\"\nimport { DefaultEditorTriggerConfiguration, TEditorTriggerConfiguration } from \"./EditorTriggerConfiguration\"\n\n\n/**\n * @group Editor\n */\nexport type TInkEditorConfiguration = TEditorConfiguration & TRecognizerHTTPV2Configuration & {\n  renderer: TRendererConfiguration\n  \"undo-redo\": THistoryConfiguration\n  grabber: TGrabberConfiguration\n  triggers: TEditorTriggerConfiguration\n  logger: TLoggerConfiguration\n  penStyle: TStyle\n}\n\n/**\n * @group Editor\n * @source\n */\nexport const DefaultInkEditorConfiguration: TInkEditorConfiguration = {\n  server: DefaultRecognizerHTTPV2Configuration.server,\n  recognition: DefaultRecognizerHTTPV2Configuration.recognition,\n  renderer: DefaultRendererConfiguration,\n  grabber: DefaultGrabberConfiguration,\n  triggers: DefaultEditorTriggerConfiguration,\n  \"undo-redo\": DefaultHistoryConfiguration,\n  logger: DefaultLoggerConfiguration,\n  penStyle: DefaultStyle,\n}\n\n/**\n * @group Editor\n */\nexport class InkEditorConfiguration implements TInkEditorConfiguration\n{\n  server: TServerHTTPConfiguration\n  recognition: TRecognizerHTTPV2RecognitionConfiguration\n  renderer: TRendererConfiguration\n  \"undo-redo\": THistoryConfiguration\n  grabber: TGrabberConfiguration\n  triggers: TEditorTriggerConfiguration\n  logger: TLoggerConfiguration\n  penStyle: TStyle\n\n  constructor(configuration?: PartialDeep<InkEditorConfiguration>)\n  {\n    const { server, recognition } = new RecognizerHTTPV2Configuration(configuration)\n    this.server = server\n    this.recognition = recognition\n    this.renderer = mergeDeep({}, DefaultInkEditorConfiguration.renderer, configuration?.renderer)\n    this.recognition.text.guides.enable = this.renderer.guides.enable\n    if (this.renderer.guides.enable)\n    {\n      this.recognition.text.guides[\"line-gap-mm\"] = convertPixelToMillimeter(this.renderer.guides.gap)\n    }\n    this.grabber = mergeDeep({}, DefaultInkEditorConfiguration.grabber, configuration?.grabber)\n    this[\"undo-redo\"] = mergeDeep({}, DefaultInkEditorConfiguration[\"undo-redo\"], configuration?.[\"undo-redo\"])\n    this.triggers = mergeDeep({}, DefaultInkEditorConfiguration.triggers, configuration?.triggers)\n    this.logger = mergeDeep({}, DefaultInkEditorConfiguration.logger, configuration?.logger)\n    this.penStyle = mergeDeep({}, DefaultInkEditorConfiguration.penStyle, configuration?.penStyle)\n  }\n}\n", "import { EditorTool } from \"../Constants\"\nimport { PointerEventGrabber, PointerInfo } from \"../grabber\"\nimport { Model, TExport } from \"../model\"\nimport { TStroke, convertPartialStrokesToStrokes } from \"../symbol\"\nimport { RecognizerHTTPV2 } from \"../recognizer\"\nimport { CanvasRenderer } from \"../renderer\"\nimport { TStyle } from \"../style\"\nimport { HistoryManager } from \"../history\"\nimport { DeferredPromise, PartialDeep } from \"../utils\"\nimport { AbstractEditor, EditorOptionsBase } from \"./AbstractEditor\"\nimport { InkEditorConfiguration, TInkEditorConfiguration } from \"./InkEditorConfiguration\"\n\n/**\n * @group Editor\n */\nexport type TInkEditorOptions = PartialDeep<EditorOptionsBase &\n{\n  configuration: TInkEditorConfiguration\n}> &\n{\n  override?: {\n    grabber?: PointerEventGrabber\n    recognizer?: RecognizerHTTPV2\n  }\n}\n\n/**\n * @group Editor\n */\nexport class InkEditor extends AbstractEditor {\n  #configuration: InkEditorConfiguration\n  #model: Model\n  #exportTimer?: ReturnType<typeof setTimeout>\n  #penStyle: TStyle\n  grabber: PointerEventGrabber\n  renderer: CanvasRenderer\n  recognizer: RecognizerHTTPV2\n  history: HistoryManager\n  #tool: EditorTool = EditorTool.Write\n\n  constructor(rootElement: HTMLElement, options?: TInkEditorOptions) {\n    super(rootElement, options)\n\n    this.#configuration = new InkEditorConfiguration(options?.configuration)\n\n    this.#penStyle = Object.assign({}, this.#configuration.penStyle)\n\n    if (options?.override?.grabber) {\n      const CustomGrabber = options.override.grabber as unknown as typeof PointerEventGrabber\n      this.grabber = new CustomGrabber(this.#configuration.grabber)\n    }\n    else {\n      this.grabber = new PointerEventGrabber(this.#configuration.grabber)\n    }\n    this.grabber.onPointerDown = this.onPointerDown.bind(this)\n    this.grabber.onPointerMove = this.onPointerMove.bind(this)\n    this.grabber.onPointerUp = this.onPointerUp.bind(this)\n\n    if (options?.override?.recognizer) {\n      const CustomRecognizer = options.override.recognizer as unknown as typeof RecognizerHTTPV2\n      this.recognizer = new CustomRecognizer(this.#configuration)\n    }\n    else {\n      this.recognizer = new RecognizerHTTPV2(this.#configuration)\n    }\n    this.renderer = new CanvasRenderer(this.#configuration.renderer)\n\n    this.tool = EditorTool.Write\n    this.#model = new Model()\n    this.history = new HistoryManager(this.#configuration[\"undo-redo\"], this.event)\n  }\n\n  protected onPointerDown(info: PointerInfo): void {\n    this.logger.info(\"onPointerDown\", { tool: this.tool, info })\n    switch (this.tool) {\n      case EditorTool.Erase: {\n        if (this.model.removeStrokesFromPoint(info.pointer).length > 0) {\n          this.renderer.drawModel(this.model)\n        }\n        break\n      }\n      case EditorTool.Write:\n        this.model.initCurrentStroke(info.pointer, info.pointerType, this.penStyle)\n        this.drawCurrentStroke()\n        break\n      default:\n        this.logger.warn(\"#onPointerDown\", `onPointerDown tool unknow: \"${this.tool}\"`)\n        break\n    }\n  }\n\n  protected onPointerMove(info: PointerInfo): void {\n    this.logger.info(\"onPointerMove\", { tool: this.tool, info })\n    switch (this.tool) {\n      case EditorTool.Erase: {\n        if (this.model.removeStrokesFromPoint(info.pointer).length > 0) {\n          this.renderer.drawModel(this.model)\n        }\n        break\n      }\n      case EditorTool.Write:\n        this.model.appendToCurrentStroke(info.pointer)\n        this.drawCurrentStroke()\n        break\n      default:\n        this.logger.warn(\"#onPointerMove\", `onPointerMove tool unknow: \"${this.tool}\"`)\n        break\n    }\n  }\n\n  protected async onPointerUp(info: PointerInfo): Promise<void> {\n    this.logger.info(\"onPointerUp\", { tool: this.tool, info })\n    switch (this.tool) {\n      case EditorTool.Erase:\n        this.model.removeStrokesFromPoint(info.pointer)\n        if (this.history.stack.at(-1)?.modificationDate !== this.model.modificationDate) {\n          await this.updateModelRendering()\n        }\n        break\n      case EditorTool.Write:\n        this.model.endCurrentStroke(info.pointer)\n        await this.updateModelRendering()\n        break\n      default:\n        this.logger.warn(\"#onPointerUp\", `onPointerUp tool unknow: \"${this.tool}\"`)\n        break\n    }\n  }\n\n  get penStyle(): TStyle\n  {\n    return this.#penStyle\n  }\n  set penStyle(penStyle: PartialDeep<TStyle>)\n  {\n    this.logger.info(\"set penStyle\", { penStyle })\n    this.#penStyle = Object.assign({}, this.#penStyle, penStyle)\n  }\n\n  get initializationPromise(): Promise<void> {\n    return Promise.resolve()\n  }\n\n  get tool(): EditorTool {\n    return this.#tool\n  }\n  set tool(i: EditorTool) {\n    this.#tool = i\n    this.setCursorStyle()\n  }\n\n  protected setCursorStyle(): void {\n    switch (this.tool) {\n      case EditorTool.Erase:\n        this.layers.root.classList.remove(\"draw\")\n        this.layers.root.classList.add(\"erase\")\n        break\n      default:\n        this.layers.root.classList.add(\"draw\")\n        this.layers.root.classList.remove(\"erase\")\n        break\n    }\n  }\n\n  get model(): Model {\n    return this.#model\n  }\n\n  get configuration(): InkEditorConfiguration {\n    return this.#configuration\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      this.logger.info(\"initialize\")\n      this.layers.render()\n      this.layers.showLoader()\n\n      const compStyles = window.getComputedStyle(this.layers.root)\n      this.model.width = Math.max(parseInt(compStyles.width.replace(\"px\", \"\")), this.#configuration.renderer.minWidth)\n      this.model.height = Math.max(parseInt(compStyles.height.replace(\"px\", \"\")), this.#configuration.renderer.minHeight)\n      this.history.push(this.model)\n      this.layers.rendering.classList.add(this.configuration.recognition.type.toLowerCase().replace(\" \", \"-\"))\n      this.renderer.init(this.layers.rendering, this.#configuration.renderer.guides.enable ? { x: this.#configuration.renderer.guides.gap, y: this.#configuration.renderer.guides.gap } : undefined)\n      this.grabber.attach(this.layers.rendering)\n    } catch (error) {\n      this.logger.error(\"initialize\", error)\n      this.layers.showMessageError(error as Error)\n      throw error\n    }\n    finally {\n      this.logger.debug(\"initialize\", \"finally\")\n      this.layers.hideLoader()\n      this.layers.updateState(true)\n    }\n  }\n\n  drawCurrentStroke(): void {\n    this.logger.debug(\"drawCurrentStroke\", { stroke: this.model.currentSymbol })\n    this.renderer.drawPendingStroke(this.model.currentSymbol)\n  }\n\n  async updateModelRendering(): Promise<Model> {\n    this.logger.info(\"updateModelRendering\")\n    this.renderer.drawModel(this.model)\n    const deferred = new DeferredPromise<Model>()\n    this.history.push(this.model)\n    if (this.#configuration.triggers.exportContent !== \"DEMAND\") {\n      clearTimeout(this.#exportTimer)\n      const currentModel = this.model.clone()\n      this.#exportTimer = setTimeout(async () => {\n        try {\n          currentModel.mergeExport(await this.recognizer.send(currentModel.symbols))\n          this.history.updateStack(currentModel)\n          if (this.model.modificationDate === currentModel.modificationDate) {\n            this.model.exports = currentModel.exports\n          }\n          deferred.resolve(this.model)\n        } catch (error) {\n          this.logger.error(\"updateModelRendering\", { error })\n          this.layers.showMessageError(error as Error)\n          this.event.emitError(error as Error)\n          deferred.reject(error as Error)\n        }\n      }, this.#configuration.triggers.exportContent === \"QUIET_PERIOD\" ? this.#configuration.triggers.exportContentDelay : 0)\n    } else {\n      deferred.resolve(this.model)\n    }\n    await deferred.promise\n    this.event.emitExported(this.model.exports as TExport)\n    this.logger.debug(\"updateModelRendering\", this.model.exports)\n    return deferred.promise\n  }\n\n  async importPointEvents(strokes: PartialDeep<TStroke>[]): Promise<Model> {\n    try {\n      convertPartialStrokesToStrokes(strokes)\n        .forEach((stroke) => {\n          this.model.addStroke(stroke)\n        })\n      const newModel = await this.updateModelRendering()\n      Object.assign(this.#model, newModel)\n      this.event.emitImported(this.model.exports as TExport)\n      return this.model\n    } catch (error) {\n      this.layers.showMessageError(error as Error)\n      this.event.emitError(error as Error)\n      throw error as Error\n    }\n  }\n\n  async resize({ height, width }: { height?: number, width?: number } = {}): Promise<void> {\n    this.logger.info(\"resize\", { height, width })\n    const compStyles = window.getComputedStyle(this.layers.root)\n    this.model.height = height || Math.max(parseInt(compStyles.height.replace(\"px\", \"\")), this.configuration.renderer.minHeight)\n    this.model.width = width || Math.max(parseInt(compStyles.width.replace(\"px\", \"\")), this.configuration.renderer.minWidth)\n    this.renderer.resize(this.model)\n    this.logger.debug(\"resize\", { model: this.model })\n    this.event.emitExported(this.model.exports as TExport)\n  }\n\n  async undo(): Promise<void> {\n    this.logger.info(\"undo\")\n    this.#model = this.history.undo() as Model\n    this.renderer.drawModel(this.#model)\n    this.history.updateStack(this.#model)\n    this.event.emitExported(this.#model.exports as TExport)\n    this.logger.debug(\"undo\", this.#model)\n  }\n\n  async redo(): Promise<void> {\n    this.logger.info(\"redo\")\n    this.#model = this.history.redo() as Model\n    this.renderer.drawModel(this.#model)\n    this.history.updateStack(this.#model)\n    this.event.emitExported(this.#model.exports as TExport)\n    this.logger.debug(\"redo\", this.#model)\n  }\n\n  async clear(): Promise<void> {\n    this.logger.info(\"clear\")\n    this.model.clear()\n    this.history.push(this.model)\n    this.renderer.drawModel(this.model)\n    this.event.emitExported(this.model.exports as TExport)\n    this.event.emitCleared()\n    this.logger.debug(\"clear\", this.model)\n  }\n\n  async destroy(): Promise<void> {\n    this.logger.info(\"destroy\")\n    this.event.removeAllListeners()\n    this.grabber.detach()\n    this.layers.destroy()\n    this.renderer.destroy()\n    return Promise.resolve()\n  }\n}\n", "import { LoggerCategory, LoggerManager } from \"../logger\"\nimport { EditorType } from \"./AbstractEditor\"\nimport { InteractiveInkEditor, TInteractiveInkEditorOptions } from \"./InteractiveInkEditor\"\nimport { InkEditorDeprecated, TInkEditorDeprecatedOptions } from \"./InkEditorDeprecated\"\nimport { InteractiveInkSSREditor, TInteractiveInkSSREditorOptions } from \"./InteractiveInkSSREditor\"\nimport { InkEditor, TInkEditorOptions } from \"./InkEditor\"\n\n/**\n * @group Editor\n * @hideconstructor\n */\nexport class Editor\n{\n  protected static logger = LoggerManager.getLogger(LoggerCategory.EDITOR)\n  protected static instance: InteractiveInkEditor | InkEditorDeprecated | InteractiveInkSSREditor | InkEditor |undefined\n\n  static async load<T extends EditorType>(rootElement: HTMLElement, type: T, options: T extends \"INTERACTIVEINK\" ? TInteractiveInkEditorOptions : T extends \"INKV1\" ? TInkEditorDeprecatedOptions : TInteractiveInkSSREditorOptions extends \"INKV2\" ? TInkEditorOptions : TInteractiveInkSSREditorOptions):\n    Promise<T extends \"INTERACTIVEINK\" ? InteractiveInkEditor : T extends \"INKV1\" ? InkEditorDeprecated : InteractiveInkSSREditor extends \"INKV2\" ? InkEditor : InteractiveInkSSREditor>\n  {\n    Editor.logger.info(\"load\", { type, options })\n    if (!options) {\n        throw new Error(`Param 'options' missing`)\n    }\n    if (Editor.instance) {\n      await Editor.instance.destroy()\n    }\n\n    switch (type) {\n      case \"INTERACTIVEINK\":\n        Editor.instance = new InteractiveInkEditor(rootElement, options as TInteractiveInkEditorOptions)\n        break\n      case \"INKV1\":\n        Editor.instance = new InkEditorDeprecated(rootElement, options as TInkEditorDeprecatedOptions)\n        break\n      case \"INKV2\":\n        Editor.instance = new InkEditor(rootElement, options as TInkEditorOptions)\n        break;\n      // case \"INTERACTIVEINKSSR\":\n      default:\n        Editor.instance = new InteractiveInkSSREditor(rootElement, options as TInteractiveInkSSREditorOptions)\n        break\n    }\n\n    await Editor.instance.initialize()\n\n    return Editor.instance as T extends \"INTERACTIVEINK\" ? InteractiveInkEditor : T extends \"INKV1\" ? InkEditorDeprecated : InteractiveInkSSREditor extends \"INKV2\" ? InkEditor : InteractiveInkSSREditor\n  }\n\n  static getInstance(): InteractiveInkEditor | InkEditorDeprecated | InteractiveInkSSREditor | InkEditor | undefined\n  {\n    return Editor.instance\n  }\n\n}\n"],
  "mappings": "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",
  "names": ["module", "_", "EditorTool", "EditorWriteTool", "SvgElementRole", "ResizeDirection", "SELECTION_MARGIN", "DeferredPromise", "constructor", "promise", "resolve", "reject", "isFullFilled", "isPending", "this", "Promise", "async", "v", "isValidNumber", "x", "isNaN", "parseFloat", "toString", "isFinite", "isBetween", "val", "min", "max", "computeAverage", "arr", "reduce", "p", "c", "length", "computeDistance", "p1", "p2", "distance", "Math", "hypot", "y", "computeAngleAxeRadian", "begin", "end", "atan2", "createPointsOnSegment", "spaceBetweenPoint", "points", "globalDistance", "spaceWithP1", "push", "scalaire", "v1", "v2", "computeNearestPointOnSegment", "seg", "vectP1P", "vectP1P2", "scalaireP1P_P1P2", "scalaireP1P2_P1P2", "t", "isPointInsideBox", "point", "box", "width", "height", "convertRadianToDegree", "radian", "PI", "toFixed", "convertDegreeToRadian", "degree", "computeRotatedPoint", "center", "dx", "dy", "cos", "sin", "computePointOnEllipse", "radiusX", "radiusY", "phi", "theta", "cosPhi", "sinPhi", "M", "abs", "N", "computeDistanceBetweenPointAndSegment", "findIntersectionBetween2Segment", "seg1", "seg2", "S1dx", "S1dy", "S2dx", "S2dy", "S1S2dx", "S1S2dy", "ua_t", "ub_t", "u_b", "ua", "ub", "findIntersectBetweenSegmentAndCircle", "r", "result", "a", "pow", "b", "cc", "deter", "e", "sqrt", "u1", "u2", "computeAngleRadian", "p1c", "p2c", "p1p2", "acos", "getClosestPoints", "points1", "points2", "minDistance", "Number", "MAX_SAFE_INTEGER", "forEach", "_p1", "_p2", "d", "getClosestPoint", "closest", "index", "i", "isPointInsidePolygon", "inside", "j", "isVersionSuperiorOrEqual", "source", "target", "sourceParts", "split", "targetParts", "computeHmac", "message", "applicationKey", "hmacKey", "enc", "TextEncoder", "messageEncoded", "encode", "keyEncoded", "key", "crypto", "subtle", "importKey", "name", "hash", "signature", "sign", "buffer", "Uint8Array", "Array", "prototype", "map", "call", "padStart", "join", "convertMillimeterToPixel", "mm", "convertPixelToMillimeter", "px", "convertBoundingBoxMillimeterToPixel", "createUUID", "dt", "Date", "now", "replace", "random", "floor", "mergeDeep", "sources", "isObject", "item", "isArray", "shift", "Object", "assign", "concat", "isDeepEqual", "object1", "object2", "objKeys1", "keys", "objKeys2", "value1", "value2", "isObjects", "object", "getAvailableFontList", "configuration", "server", "scheme", "host", "recognition", "lang", "serverConfig", "response", "fetch", "json", "sort", "getAvailableLanguageList", "computeLinksPointers", "angle", "radius", "computeMiddlePointer", "point1", "point2", "getApiInfos", "ok", "version", "gitCommit", "nativeVersion", "LoggerLevel", "LoggerCategory", "Logger", "category", "level", "functionName", "data", "DEBUG", "dataLog", "from", "console", "debug", "INFO", "info", "WARN", "warn", "error", "LoggerManager", "has", "set", "ERROR", "get", "config", "lc", "getLogger", "static", "Map", "DefaultLoggerConfiguration", "EDITOR", "RECOGNIZER", "GRABBER", "RENDERER", "EDITOR_EVENT", "MODEL", "SYMBOL", "SMARTGUIDE", "GESTURE", "STYLE", "HISTORY", "TRANSFORMER", "CONVERTER", "WRITE", "SELECTION", "SVGDEBUG", "MENU", "EditorEventName", "EditorEvent", "EventTarget", "element", "super", "logger", "abortController", "AbortController", "removeAllListeners", "abort", "type", "evt", "CustomEvent", "bubbles", "composed", "detail", "undefined", "dispatchEvent", "sessionId", "emit", "SESSION_OPENED", "callback", "addEventListener", "signal", "emitLoaded", "LOADED", "notif", "NOTIF", "err", "exports", "EXPORTED", "undoRedoContext", "CHANGED", "canClear", "empty", "idle", "IDLE", "emitCleared", "CLEARED", "CONVERTED", "IMPORTED", "symbols", "SELECTED", "mode", "TOOL_CHANGED", "emitUIpdated", "UI_UPDATED", "emitSynchronized", "SYNCHRONIZED", "gesture", "GESTURED", "ExportType", "JIIXELementType", "JIIXNodeKind", "JIIXEdgeKind", "EditorLayer", "root", "rootClassCss", "ui", "rendering", "onCloseModal", "classList", "add", "createLayerRender", "createLayerUI", "render", "styleElement", "document", "createElement", "appendChild", "createTextNode", "prepend", "createLoader", "loaderHTML", "style", "display", "showLoader", "loader", "hideLoader", "createMessageOverlay", "overlay", "closeMessageModal", "modal", "contains", "hideMessageModal", "text", "innerText", "remove", "createMessageModal", "closeBtn", "bind", "createMessage", "setTimeout", "timeout", "createBusy", "busy", "createState", "showState", "state", "hideState", "destroy", "lastChild", "removeChild", "AbstractEditor", "rootElement", "options", "layers", "event", "loggerConfiguration", "override", "cssClass", "editor", "loggerConfig", "setLoggerLevel", "Box", "boundindBox", "Error", "boxes", "vertices", "getCorners", "wrapper", "child", "box1", "box2", "xMin", "xMid", "xMax", "yMin", "yMid", "yMax", "corners", "getCenter", "snapPoints", "isContained", "containsPoint", "boundaries", "overlaps", "DefaultStyle", "color", "DefaultPenStyle", "DefaultTheme", "ink", "i", "r", "module", "t", "e", "o", "n", "exports", "l", "call", "m", "c", "d", "Object", "defineProperty", "configurable", "enumerable", "get", "__esModule", "default", "prototype", "hasOwnProperty", "p", "s", "TypeError", "value", "Symbol", "iterator", "constructor", "this", "toJSON", "console", "error", "u", "split", "forEach", "trim", "indexOf", "substring", "length", "replace", "_trimSemiColon", "toCSS", "slice", "parser", "JsonCSS", "StyleHelper", "themeToCSS", "json", "style", "theme", "Number", "ink", "width", "penStyle", "css", "penStyleString", "stringToJSON", "JSONToString", "entries", "map", "k", "v", "join", "StyleManager", "penStyleClasses", "currentPenStyle", "logger", "LoggerManager", "getLogger", "LoggerCategory", "STYLE", "info", "setTheme", "setPenStyleClasses", "setPenStyle", "mergeDeep", "structuredClone", "DefaultPenStyle", "debug", "DefaultTheme", "penStyleClass", "DecoratorKind", "SymbolType", "EdgeKind", "EdgeDecoration", "ShapeKind", "RecognizedKind", "IIDecorator", "kind", "id", "createUUID", "DefaultStyle", "clone", "MatrixTransform", "xx", "yx", "xy", "yy", "tx", "ty", "identity", "mat", "point", "x", "y", "rotation", "hypotAc", "Math", "hypot", "acos", "hypotBd", "PI", "matrix", "invert", "denom", "multiply", "radian", "center", "translate", "cosAngle", "round", "cos", "sinAngle", "sin", "applyToPoint", "toCssString", "IISymbolBase", "type", "creationTime", "modificationDate", "selected", "deleting", "transform", "Date", "now", "assign", "opacity", "edges", "isClosed", "vertices", "p1", "p2", "seg", "some", "edge", "findIntersectionBetween2Segment", "OIEdgeBase", "startDecoration", "endDecoration", "super", "Edge", "bounds", "bb", "Box", "createFromPoints", "SELECTION_MARGIN", "height", "snapPoints", "box", "isContained", "e1", "getSides", "e2", "isValidPoint", "isValidNumber", "IIEdgeArc", "startAngle", "sweepAngle", "radiusX", "radiusY", "phi", "Arc", "_vertices", "Map", "set", "verticesId", "computedVertices", "abs", "sqrt", "pow", "nbVertices", "max", "angleStep", "endAngle", "angle", "push", "computePointOnEllipse", "has", "at", "partial", "Error", "arc", "IIEdgeLine", "start", "end", "Line", "line", "IIEdgePolyLine", "points", "PolyEdge", "polyline", "OIShapeBase", "Shape", "IIShapeCircle", "radius", "Circle", "_bounds", "computedBondingBox", "firstPoint", "perimeter", "nbPoint", "rad", "computeRotatedPoint", "boundingBox", "findIntersectBetweenSegmentAndCircle", "origin", "target", "min", "circle", "IIShapeEllipse", "orientation", "Ellipse", "theta", "ellipse", "IIShapePolygon", "Polygon", "polygon", "poly", "xMin", "yMin", "xMax", "yMax", "xMid", "yMid", "IIStroke", "pointerType", "Stroke", "decorators", "pointers", "strokeToSplit", "before", "after", "stroke", "partStroke", "result", "lastPointBeforeStroke", "closestLastPointBeforeStroke", "getClosestPoint", "index", "newStrokes", "strokeAfter", "firstPointAfterStroke", "closestFirstPointStrokeAfter", "distance", "ratio", "pressure", "isNaN", "lastPointer", "delta", "pointer", "filterPointByAcquisitionDelta", "computeDistance", "computePressure", "formatToSend", "undefined", "errors", "flag", "pp", "pIndex", "addPointer", "convertPartialStrokesToOIStrokes", "strokes", "j", "create", "message", "IIRecognizedBase", "Recognized", "flatMap", "createFromBoxes", "updateChildrenStyle", "child", "overlaps", "strokeId", "strokeIds", "strokeRemoved", "filter", "includes", "IIRecognizedArc", "JSON", "parse", "stringify", "ws", "IIRecognizedCircle", "IIRecognizedEllipse", "IIRecognizedLine", "IIRecognizedPolyLine", "IIRecognizedPolygon", "Polygone", "IIRecognizedText", "lines", "Text", "baseline", "xHeight", "label", "IISymbolGroup", "children", "Group", "chars", "color", "containsSymbol", "containsOnlyStroke", "extractText", "extractStrokes", "symbolIds", "removeChilds", "group", "every", "texts", "symbolId", "symbol", "containsStroke", "s1", "removeStrokes", "IIText", "convertDegreeToRadian", "degree", "corners", "offsetY", "char", "boxBox", "updateChildrenFont", "fontSize", "fontWeight", "charCorners", "getCharCorners", "isPointInsidePolygon", "containsPoint", "text", "fill", "IIEraser", "Eraser", "convertPartialStrokesToStrokes", "ji", "Model", "rowHeight", "creationDate", "positions", "currentSymbol", "symbols", "converts", "idle", "MODEL", "lastSentPosition", "lastReceivedPosition", "globalDistance", "isBetween", "val", "_strokeList", "strokePointer", "updatedStroke", "strokeIndex", "findIndex", "splice", "getStrokeFromPoint", "strokeToRemove", "removeStroke", "extractUnsentStrokes", "dpi", "pxWidth", "addPoint", "addStroke", "position", "updatePositionReceived", "clonedModel", "clear", "IIModel", "symbolsSelected", "symbolsToDelete", "find", "resetSelection", "getSymbolsByRowOrdered", "rows", "rowIndex", "getSymbolRowIndex", "row", "sort", "s2", "r1", "r2", "source", "reduce", "previous", "current", "updatedSymbol", "sIndex", "fromIndex", "toIndex", "sym", "symbolIndex", "model", "added", "removed", "DefaultServerHTTPConfiguration", "scheme", "host", "applicationKey", "hmacKey", "version", "DefaultServerWebsocketConfiguration", "websocket", "pingEnabled", "pingDelay", "maxPingLostCount", "autoReconnect", "maxRetryCount", "fileChunkSize", "DefaultEraserConfiguration", "DefaultDiagramConvertConfiguration", "types", "DefaultDiagramConfiguration", "convert", "eraser", "mimeTypes", "DefaultJiixConfiguration", "ids", "words", "DefaultExportConfiguration", "jiix", "DefaultMarginConfiguration", "top", "left", "right", "bottom", "DefaultSolverConfiguration", "enable", "DefaultMathUndoRedoConfiguration", "mode", "DefaultMathConfiguration", "solver", "margin", "DefaultRawContentConfiguration", "recognition", "classification", "DefaultDebugConfiguration", "DefaultRecognitionRendererConfiguration", "DefaultTextGuidesConfiguration", "DefaultTextConfiguration", "guides", "DefaultTextGuidesConfigurationV2", "DefaultTexConfigurationV2", "DefaultConvertionConfiguration", "force", "DefaultShapeConvertConfiguration", "DefaultShapeBeautificationConfiguration", "DefaultShapeConfiguration", "beautification", "RecognizerEventName", "RecognizerError", "RecognizerEvent", "EventTarget", "abortController", "AbortController", "removeAllListeners", "abort", "data", "evt", "CustomEvent", "bubbles", "composed", "detail", "dispatchEvent", "emitStartInitialization", "emit", "START_INITIALIZATION", "callback", "addEventListener", "signal", "emitEndtInitialization", "END_INITIALIZATION", "sessionId", "SESSION_OPENED", "undoRedoContext", "CONTENT_CHANGED", "canClear", "empty", "IDLE", "EXPORTED", "err", "ERROR", "emitConnectionClose", "code", "CONNECTION_CLOSE", "svgPatch", "SVG_PATCH", "DefaulRecognitionHTTPV1ConfigurationConfiguration", "export", "math", "diagram", "renderer", "lang", "DefaultRecognizerHTTPV1Configuration", "server", "RecognizerHTTPV1Configuration", "configuration", "Set", "isVersionSuperiorOrEqual", "RecognizerHTTPV1", "config", "RECOGNIZER", "url", "postConfig", "strokeGroupByPenStyle", "groupIndex", "sg", "isPenStyleEqual", "ps1", "ps2", "strokeGroupsToSend", "newGroup", "penStyleToCSS", "contentType", "charAt", "toUpperCase", "toLowerCase", "xDPI", "yDPI", "strokeGroups", "mimeType", "headers", "Headers", "append", "hmac", "computeHmac", "getApiInfos", "method", "request", "Request", "response", "fetch", "blob", "catch", "async", "tryFetch", "post", "then", "res", "_t", "UNKNOW", "WRONG_CREDENTIALS", "CANT_ESTABLISH", "requestedMimeTypes", "conversionState", "a", "myModel", "getMimeTypes", "buildData", "dataToConcert", "Promise", "promises", "mergeConvert", "resolve", "String", "reject", "all", "mergeExport", "DefaultRecognizerHTTPV2RecognitionConfiguration", "DefaultRecognizerHTTPV2Configuration", "RecognizerHTTPV2Configuration", "shape", "RecognizerHTTPV2", "formatStrokes", "scaleX", "reqInit", "body", "ok", "TRecognizerWebSocketMessageType", "ignoreGestureStrokes", "DefaultRecognizerWebSocketConfiguration", "RecognizerWebSocketConfiguration", "_f", "_e", "_d", "_h", "_g", "gestures", "initialized", "RecognizerWebSocket", "socket", "pingCount", "reconnectionCount", "currentPartId", "currentErrorCode", "contextlessGestureDeferred", "transformStrokeDeferred", "eraseStrokeDeferred", "replaceStrokeDeferred", "exportDeferredMap", "closeDeferred", "waitForIdleDeferred", "undoDeferred", "redoDeferred", "clearDeferred", "event", "DeferredPromise", "addStrokeDeferred", "values", "from", "removeEventListener", "openCallback", "closeCallback", "messageCallback", "bind", "GOING_AWAY", "PROTOCOL_ERROR", "UNSUPPORTED_DATA", "ABNORMAL_CLOSURE", "INVALID_FRAME_PAYLOAD", "POLICY_VIOLATION", "MESSAGE_TOO_BIG", "INTERNAL_ERROR", "SERVICE_RESTART", "TRY_AGAIN", "BAD_GATEWAY", "TLS_HANDSHAKE", "clearSocketListener", "rejectDeferredPending", "pingWorker", "terminate", "resetAllDeferred", "send", "hmacChallenge", "postMessage", "onmessage", "readyState", "close", "pixelTomm", "iinkSessionId", "scaleY", "manageSessionDescriptionMessage", "emitSessionOpened", "partChangeMessage", "partId", "emitContentChanged", "canUndo", "canRedo", "toString", "key", "exportMessage", "emitExported", "manageWaitForIdle", "emitIdle", "errorMessage", "NO_ACTIVITY", "TOO_OLD", "NO_SESSION_FOUND", "emitError", "manageGestureDetected", "gestureMessage", "Pong", "HMAC_Challenge", "manageHMACChallenge", "Authenticated", "manageAuthenticated", "SessionDescription", "NewPart", "manageNewPartMessage", "PartChanged", "managePartChangeMessage", "ContentChanged", "manageContentChangedMessage", "Exported", "manageExportMessage", "GestureDetected", "websocketMessage", "ContextlessGesture", "manageContextlessGesture", "manageErrorMessage", "init", "WebSocket", "promise", "initPing", "CONNECTING", "OPEN", "CLOSING", "CLOSED", "waitForIdle", "processGestures", "addStrokes", "buildAddStrokesMessage", "oldStrokeIds", "buildReplaceStrokesMessage", "transformationType", "buildTransformTranslateMessage", "x0", "y0", "buildTransformRotateMessage", "buildTransformScaleMessage", "buildTransformMatrixMessage", "buildEraseStrokesMessage", "isFullFilled", "buildUndoRedoChanges", "changes", "changesMessages", "replaced", "oldStrokes", "tr", "rotate", "scale", "undo", "actions", "redo", "mt", "DefaultRecognizerWebSocketSSRRecognitionConfiguration", "RecognizerWebSocketSSRConfiguration", "_c", "RecognizerWebSocketSSR", "viewSizeHeight", "connected", "ackDeferred", "exportDeferred", "convertDeferred", "importDeferred", "resizeDeferred", "importPointEventsDeferred", "toLocaleLowerCase", "infinitePing", "setTimeout", "yDpi", "viewSizeWidth", "_b", "isPending", "warn", "reason", "manageContentPackageDescriptionMessage", "context", "contentChangeMessage", "undoStackIndex", "possibleUndoCount", "svgPatchMessage", "manageAckMessage", "manageContentChangeMessage", "manageSVGPatchMessage", "styleClasses", "localModel", "chunkSize", "random", "readBlob", "FileReader", "fileReader", "onloadend", "ev", "onerror", "readAsText", "importFileId", "importFileMessage", "blobPart", "lastChunk", "size", "fileChuckMessage", "events", "undoExports", "redoExports", "destroy", "CanvasRendererShape", "RENDERER", "table", "returnedAngle", "context2D", "shapeEllipse", "centerPoint", "maxRadius", "minRadius", "z4", "floor", "boundariesPoints", "save", "h", "beginPath", "alpha", "atan2", "cosAlpha", "z1", "z2", "z3", "moveTo", "lineTo", "restore", "headPoint", "beta", "fillStyle", "strokeStyle", "drawShapeEllipse", "drawEllipseArc", "beginDecoration", "drawArrowHead", "beginTangentAngle", "endTangentAngle", "shapeLine", "drawLine", "lastPoint", "lineWidth", "drawShapeLine", "CanvasRendererStroke", "context2d", "begin", "linkPoints1", "computeLinksPointers", "computeAngleAxeRadian", "linkPoints2", "linkPoints", "newAngle", "ctrl", "linkPoints3", "quadraticCurveTo", "NUMBER_POINTS", "NUMBER_QUADRATICS", "renderArc", "computeMiddlePointer", "renderQuadratic", "beginLine", "endLine", "renderLine", "beginFinal", "renderFinal", "endFinal", "closePath", "CanvasRendererText", "string", "textLine", "drawUnderline", "textUnderline", "underline", "topLeftPoint", "firstCharacter", "lastCharacter", "drawText", "textHeight", "textAlign", "justificationType", "textBaseline", "fillText", "underlineList", "drawTextLine", "strokeRenderer", "CanvasRenderer", "shapeRenderer", "textRenderer", "document", "createElement", "canvas", "add", "classList", "window", "devicePixelRatio", "renderingCanvas", "capturingCanvas", "parentNode", "minWidth", "clientWidth", "minHeight", "clientHeight", "getContext", "pixelRatio", "draw", "keys", "element", "createCanvas", "setAttribute", "guide", "backgroundSize", "appendChild", "parent", "renderingCanvasContext", "capturingCanvasContext", "resizeContent", "clearRect", "drawSymbol", "drawModel", "arrowHeadStartMarker", "arrowHeadEndMaker", "selectionFilterId", "removalFilterId", "SVGBuilder", "createLayer", "createElementNS", "XMLNS", "svgEl", "attrs", "createDefs", "marker", "dx", "dy", "deviation", "shadow", "createTransfertFunctionTable", "feFunc", "groupEl", "lineEl", "circleEl", "pathEl", "polygonEl", "rectEl", "createTSpan", "textContent", "objEl", "textEl", "IISVGRendererEdgeUtil", "getLinePath", "getPolyLinePath", "IISVGRendererConst", "createGroup", "pathAttrs", "getSVGPath", "Arrow", "createPath", "IISVGRendererEraserUtil", "startPath", "strokeWith", "acc", "shadowBlur", "IISVGRendererDecoratorUtil", "getSVGElement", "decorator", "Highlight", "createRect", "Surround", "Strikethrough", "Underline", "IISVGRendererShapeUtil", "getPolygonePath", "getCirclePath", "convertRadianToDegree", "IISVGRendererStrokeUtil", "toFixed", "parts", "central", "STROKE_LENGTH", "STROKE_WIDTH", "getArcPath", "NB_QUADRATICS", "getQuadraticPath", "beforeLastPoint", "getFinalPath", "strokeGroup", "deco", "prepend", "IISVGRendererTextUtil", "noSelection", "textGroup", "createText", "textElement", "IISVGRendererRecognizedUtil", "recognizedSymbol", "IISVGRendererGroupUtil", "symbolGroup", "getChildElement", "definitionGroup", "verticalGuides", "IISVGRenderer", "groupGuidesId", "layer", "horizontalGuides", "initLayer", "setProperty", "createSVGTools", "REFY", "markerWidth", "markerHeight", "orient", "arrowHeadStart", "createPolygon", "arrowHeadMarkerAttrs", "defs", "arrowHeadEnd", "createMarker", "crossMarkerAttrs", "refX", "viewBox", "cross", "crossMarker", "filtersGroup", "createFilter", "bfeComponentTransfer", "createComponentTransfert", "bfeFuncA", "removalFilter", "filterUnits", "selectionFilter", "createDropShadow", "getAttribute", "offSet", "gap", "role", "createLine", "guidesGroup", "svgLine", "subOffSet", "subY", "subX", "svgPoint", "createCircle", "remove", "createFilters", "drawGuides", "oncontextmenu", "name", "querySelector", "el", "symbolToMove", "moveEl", "insertAdjacentElement", "nextElementSibling", "previousElementSibling", "appendElement", "oldStroke", "buildElementFromSymbol", "replaceWith", "replaceSymbol", "oldNode", "elements", "removeElement", "drawRect", "box2", "points1", "points2", "getClosestPoints", "attrsLine", "removeGuides", "tagName", "query", "querySelectorAll", "clearElements", "getElements", "firstChild", "SVGStroker", "buildSVGPath", "svgPathElement", "svgPath", "svgElement", "InteractiveInkSSRSVGRenderer", "stroker", "drawStroke", "layerName", "insertAdjacentHTML", "replaceElement", "update", "elementToRemove", "svg", "parentId", "removeChild", "insertBefore", "refId", "selector", "removeAttribute", "updates", "clearPendingStroke", "pendingStrokeGroup", "drawPendingStroke", "erasingStroke", "rect", "getBoundingClientRect", "svgList", "DefaultRendererConfiguration", "DefaultGuidesConfiguration", "DefaultIIRendererConfiguration", "IIConversionManager", "CONVERTER", "editor", "rendering", "convertMillimeterToPixel", "computeAverage", "weight", "convertBoundingBoxMillimeterToPixel", "charFontSize", "computeFontSize", "items", "charStrokes", "charSymbols", "buildChar", "getRootSymbol", "hightlight", "strikethrough", "surround", "onlyText", "_a", "textFontSize", "currentY", "leftX", "currentX", "jiixWords", "word", "texter", "getSpaceWidth", "g", "buildText", "wordStrokes", "isNewLine", "wordSymbol", "roundToLineGuide", "setBounds", "rx", "rectangle", "buildPolygon", "buildRhombus", "buildTriangle", "buildParallelogram", "uniqStrokes", "associatedStroke", "node", "buildCircle", "buildEllipse", "JIIXNodeKind", "Rectangle", "buildRectangle", "Parallelogram", "Rhombus", "y2", "point1", "point2", "p1Decoration", "p2Decoration", "y1", "x2", "unshift", "ry", "convertEdge", "buildLine", "buildArc", "JIIXEdgeKind", "buildPolyEdge", "apply", "extractStrokesFromSymbols", "conversion", "convertText", "strokesToConvert", "convertNode", "conversionResults", "addSymbols", "cs", "removeSymbols", "history", "erased", "interactElementsGroup", "IIResizeManager", "TRANSFORMER", "transformOrigin", "keepRatio", "cosPhi", "sinPhi", "applyOnText", "updateBounds", "applyToSymbol", "applyToStroke", "applyToShape", "applyToEdge", "applyOnGroup", "applyOnRecognizedSymbol", "originY", "scaleElement", "sy", "sx", "InteractElementsGroup", "direction", "setTransformOrigin", "localPoint", "snapResize", "horizontalResize", "deltaX", "deltaY", "continue", "clearSnapToElementLines", "recognizer", "transformScale", "oldSymbols", "svgDebugger", "IIRotationManager", "angleRad", "strokeText", "rotateElement", "closest", "computeAngleRadian", "angleDegree", "snaps", "snapRotation", "transformRotate", "strokesFromSymbols", "passive", "listenerOptions", "xyFloatPrecision", "timestampFloatPrecision", "onPointerDown", "onPointerMove", "delayLongTouch", "PointerEventGrabber", "capturing", "prevent", "preventDefault", "extractPointer", "button", "buttons", "pointerDownHandler", "getPointerInfos", "level", "pointerMoveHandler", "pointerInfo", "pointerUpHandler", "onPointerUp", "pointerOutHandler", "layerCapture", "contains", "contextMenuHandler", "onContextMenu", "requestedFloatPrecision", "oneFloat", "clientX", "clientY", "roundFloat", "clientLeft", "scrollLeft", "clientTop", "scrollTop", "isPrimary", "stopPointerEvent", "domElement", "detach", "startSelectionPoint", "IISelectionManager", "grabber", "endSelectionPoint", "selectedGroup", "rotator", "translator", "resizer", "attach", "removeSelectedGroup", "clearSelectingRect", "Translate", "handler", "stopPropagation", "endHandler", "getPoint", "resetSelectedGroup", "translateEl", "hideInteractElements", "Rotate", "attrs1", "attrs3", "Resize", "P_NW", "P_NE", "P_SE", "P_SW", "bindEl", "cursor", "def", "lineResize", "cornerResize", "getElementById", "SvgElementRole", "createTranslateRect", "createResizeGroup", "createRotateGroup", "SURROUND_ATTRS", "pointIndex", "updateSymbol", "pointEl", "surroundGroup", "createEdgeResizeGroup", "createInteractEdgeGroup", "createInteractElementsGroup", "getBBox", "menu", "groupBox", "show", "drawSelectedGroup", "hide", "drawSelectingRect", "selectionBox", "emitSelected", "updatedSymbols", "currentEl", "found", "parentElement", "unselectAll", "selectSymbol", "updateLayerUI", "IITextManager", "prependElement", "textGroupEl", "getNumberOfChars", "ext", "getExtentOfChar", "drawSymbolHidden", "getElementBoundingBox", "setCharsBounds", "markers", "clipped", "charSymbol", "getBoundingBox", "textSymbol", "textsAfter", "IITranslateManager", "addToHistory", "transformTranslate", "nudge", "snapTranslate", "translateElement", "Pencil", "IIWriteManager", "detectGesture", "currentSymbolOrigin", "tool", "wt", "layers", "root", "gestureManager", "getSymbolsBounds", "strokeBoundsWithMargin", "createCurrentSymbol", "EditorWriteTool", "createRectangleBetweenPoints", "createTriangleBetweenPoints", "createParallelogramBetweenPoints", "createRhombusBetweenPoints", "createBetweenPoints", "DoubleArrow", "updateCurrentSymbol", "updateRectangleBetweenPoints", "Triangle", "updateTriangleBetweenPoints", "updateParallelogramBetweenPoints", "updateRhombusBetweenPoints", "updateBetweenPoints", "updateCurrentSymbolShape", "updateCurrentSymbolEdge", "localPointer", "needContextLessGesture", "gestureFromContextLess", "getGestureFromContextLess", "localStroke", "pop", "gesture", "addSymbol", "localSymbol", "interactWithBackend", "IIEraseManager", "WRITE", "currentEraser", "isIntersected", "lastSeg", "removeSymbol", "SVGDEBUG", "IIDebugSVGManager", "snapPointsVisibility", "verticesVisibility", "boundingBoxVisibility", "recognitionItemBoxVisibility", "debugSnapPoints", "debugVertices", "hideBoundingBox", "debugRecognitionBox", "debugRecognitionItemBox", "drawCircle", "hideSnapPoints", "showSnapPoints", "hideVertices", "charAttrs", "symbolAttrs", "sa", "drawBoundingBox", "debugBoundingBox", "showBoundingBox", "recognitionGroup", "infos", "w", "infoX", "COLOR", "infosGroupBox", "infosGroup", "rectBox", "originX", "drawConnectionBetweenBox", "hideProperties", "drawRecognitionBox", "candidates", "inf", "x1", "clearRecognitionBox", "recognitionBoxVisibility", "showRecognitionBox", "charY", "charsGroup", "recognitionItemGroup", "charsGroupBox", "showRecognitionItemBox", "drawRecognitionItemBox", "clearRecognitionItemBox", "IIMoveManager", "getInitialHistoryContext", "stackIndex", "HISTORY", "HistoryManager", "stack", "maxStackSize", "shift", "updateContext", "emitChanged", "previousModel", "nextModel", "IIHistoryManager", "updated", "order", "ungroup", "isChangesEmpty", "stackIdx", "reverseChanges", "reversedChanges", "newSymbols", "previousStackItem", "currentStackItem", "nextStackItem", "IIMenu", "thicknessList", "fontSizeList", "fontWeightList", "colors", "title", "head", "btn", "innerHTML", "toggle", "wrapper", "item", "labelEl", "checkbox", "disabled", "initValue", "indeterminate", "checked", "select", "Option", "createMenuItemButton", "icon", "createColorList", "list", "colorEl", "createMenuItemBoolean", "createMenuItemSelect", "createMenuItemButtonList", "createMenuItemColorList", "SurroundAction", "StrikeThroughAction", "InsertAction", "DefaultGestureConfiguration", "Select", "strikeThrough", "surroundAction", "Draw", "LineBreak", "IIGestureManager", "GESTURE", "strikeThroughAction", "gestureAction", "insertAction", "insert", "gestureStroke", "highlight", "symWithDec", "partPointersToRemove", "subStrokes", "ss", "fullStrokeId", "strokePartToErase", "substract", "computeScratchOnText", "getCharsOverlaps", "charsToRemove", "cIndex", "c1", "strokesScratchedResult", "computeScratchOnStrokes", "childrenNotTouch", "results", "concat", "computeScratchOnSymbol", "textScratchedResult", "symbolsToReplace", "symbolsToUpdate", "updateSymbols", "replaceSymbols", "isSymbolAbove", "isSymbolInRow", "symbolsOnGestureInRow", "symbolsAfterGestureInRow", "isSymbolBelow", "symbolToJoin", "childBefore", "childAfter", "symbolsBeforeGestureInRow", "getLastSymbol", "firstSymbolAfter", "getFirstSymbol", "translateX", "lastSymbBefore", "firstSymbolAfterClone", "symbolsToGroup", "strokeTexts", "d1", "symbolsBelow", "lastSymbolBeforeGesture", "firstSymbolAfterGesture", "symbolInNextRow", "strokeSpaceWidth", "symbolsAfterNextRow", "symbolsAbove", "lastSymbolAbove", "strokeOrigin", "subStroke", "createStrokesFromGestureSubStroke", "newGroups", "symbolsAfter", "gs", "strokeIdToSplit", "computeSplitStroke", "symbolToSplit", "computeSplitStrokeInGroup", "strokesToSplit", "strokesBefore", "groupToSplit", "groupSymbolsBefore", "groupsSymbolsAfter", "groupBefore", "grouAfter", "strokeTextToSplit", "strokesAfter", "strokeTextBefore", "strokeTextAfter", "textToSplit", "charsBefore", "textBefore", "charsAfter", "textAfter", "newTexts", "symbolsRow", "computeChangesOnSplitStroke", "computeChangesOnSplitGroup", "computeChangesOnSplitStrokeText", "Insert", "applyStrikeThroughGesture", "Erase", "updateSymbolsStyle", "synchronizeStrokesWithJIIX", "gestureType", "applyUnderlineGesture", "applyScratch", "applyJoinGesture", "applyInsertGesture", "applySurroundGesture", "emitGestured", "recognizeGesture", "gestureStrokeId", "strokeAfterIds", "strokeBeforeIds", "symbolsToUnderline", "symbolsToStrikeThrough", "symbolsToErase", "IIMenuSub", "param", "trigger", "content", "menuTitle", "menuTitleElement", "subMenu", "unwrap", "display", "IIMenuAction", "MENU", "menuLanguage", "menuClear", "menuUndo", "menuRedo", "menuConvert", "guideGaps", "isMobile", "createMenuLanguage", "getAvailableLanguageList", "languages", "changeLanguage", "params", "createMenuGesture", "surroundActionValues", "strikeThroughActionValues", "splitActionValues", "writer", "Write", "EditorTool", "subMenuWrapper", "createMenuItem", "createMenuGuide", "renderingConfiguration", "createMenuSnap", "createMenuDebug", "menuItems", "createMenuExport", "downloadAsJson", "downloadAsSVG", "downloadAsPNG", "file", "reader", "createMenuImport", "accept", "multiple", "importInput", "importBtn", "innerText", "files", "fileString", "readFileAsText", "createSymbols", "closeAllSubMenu", "render", "action", "createMenuClear", "createMenuUndo", "createMenuRedo", "createMenuConvert", "wrap", "visibility", "lastChild", "menuErase", "menuShape", "menuEdge", "IIMenuTool", "menuSelect", "subMenuEdge", "writeBtn", "menuMove", "Move", "subMenuShape", "subMenuContent", "rectangleIcon", "createShapeSubMenu", "triangle", "rhombus", "square", "nextSibling", "lineIcon", "createEdgeSubMenu", "arrow", "doubleArrow", "_i", "_l", "_k", "_r", "_q", "_u", "createMenuWrite", "createMenuMove", "createMenuSelect", "createMenuErase", "createMenuEdge", "createMenuShape", "menuThickness", "menuFontSize", "menuFontWeight", "menuStrokeOpacity", "IIMenuStyle", "triggerBtn", "menuColorStroke", "menuColorFill", "createMenuStroke", "symbolsStyles", "st", "createWrapCollapsible", "createMenuColorFill", "menuColor", "createMenuThickness", "createMenuFontSize", "fontStyle", "textSymbols", "updateTextFontStyle", "createMenuFontWeight", "createMenuOpacity", "input", "output", "currentOpacity", "writeShape", "duplicateBtn", "groupBtn", "removeBtn", "IIMenuContext", "editMenu", "editInput", "editSaveBtn", "reorderMenu", "decoratorMenu", "menuExport", "symbolsDecorable", "createMenuEdit", "firstChar", "updateDeepIdInGroup", "gr", "symbolsToDuplicate", "duplicatedSymbols", "ungroupSymbol", "groupSymbols", "convertBtn", "convertSymbols", "createMenuReorder", "changeOrderSymbols", "reverse", "createDecoratorSubMenu", "ArrowDown", "b", "createMenuDecorator", "haveSymbolsSelected", "createMenuSelectAll", "selectAll", "showDecorator", "removeProperty", "decos", "updateDecoratorSubMenu", "updateGroupMenu", "createMenuGroup", "createMenuDuplicate", "createMenuRemove", "IIMenuManager", "custom", "CustomMenuStyle", "CustomMenuTool", "CustomMenuAction", "createTextNode", "styleElement", "SnapConfiguration", "DefaultSnapConfiguration", "IISnapManager", "otherSnapPoints", "snapThreshold", "getNearestVerticalGuide", "curr", "getNearestHorizontalGuide", "Infinity", "verticales", "horizontales", "getGuidePointToSnap", "getSnapLinesInfos", "horizontal", "snapLinesInfos", "vertical", "snapLines", "drawSnapToElementLines", "selectionSymbolPoints", "selectionSnapPoints", "lastDeltaX", "lastDeltaY", "gridPoint", "DefaultInteractiveInkEditorConfiguration", "DefaultGrabberConfiguration", "DefaultHistoryConfiguration", "InteractiveInkEditorConfiguration", "snap", "converter", "InteractiveInkEditor", "AbstractEditor", "move", "options", "override", "CustomRecognizer", "addErrorListener", "addExportedListener", "addContentChangedListener", "addSessionOpenedListener", "addEndInitialization", "hideMessageModal", "addIdleListener", "updateLayerState", "setCursorStyle", "emitToolChanged", "resize", "emitUIpdated", "updateState", "timeout", "clearTimeout", "layerUITimer", "showMessageError", "showLoader", "ui", "getComputedStyle", "parseInt", "compStyles", "loadInfo", "hideLoader", "newSession", "emitLoaded", "manageError", "partialShape", "partialEdge", "partialSymbol", "buildShape", "buildEdge", "buildGroup", "partialGroup", "buildStroke", "partialSymbols", "buildSymbol", "updateTextBounds", "symList", "replaceStrokes", "lastWidth", "moveTextAfter", "textIds", "symbolsTranslated", "symToReplace", "eraseStrokes", "changeOrderSymbol", "emitSynchronized", "getSymbolsAndStrokesAssociatedFromJIIXStrokeItems", "strokeIdsUsed", "symIdx", "jiixAssociation", "symAsso", "recognizedText", "symbolRecognized", "groupStrokeIds", "symbolsToRemove", "strokesIds", "partialStrokes", "emitImported", "urlData", "downloadAnchorNode", "fileName", "click", "svgString", "XMLSerializer", "month", "day", "hour", "minute", "toLocaleDateString", "navigator", "language", "selection", "buildBlobFromSymbols", "createObjectURL", "svgBlob", "triggerDownload", "getExportName", "URL", "image", "Image", "onload", "drawImage", "revokeObjectURL", "symbolsToExport", "dataStr", "encodeURIComponent", "backendChanges", "modifications", "extractDifferenceSymbols", "extractBackendChanges", "actionsToBackend", "emitConverted", "emitCleared", "DefaultEditorTriggerConfiguration", "exportContentDelay", "resizeTriggerDelay", "triggers", "InkEditorDeprecatedConfiguration", "DefaultInkEditorDeprecatedConfiguration", "styleManager", "_y", "InkEditorDeprecated", "exportTimer", "rootElement", "_m", "removeStrokesFromPoint", "initCurrentStroke", "drawCurrentStroke", "appendToCurrentStroke", "updateModelRendering", "endCurrentStroke", "initializationPromise", "deferred", "exportContent", "currentModel", "newModel", "updateStack", "deferredResize", "resizeTimer", "resizeModel", "wordToChange", "InteractiveInkSSRSmartGuide", "uuid", "wrapperElement", "ellipsisElement", "convertElement", "copyElement", "candidatesElement", "addListeners", "wordId", "menuElement", "isMenuOpen", "openMenu", "hideCandidates", "addRange", "range", "setSelectionRange", "textArea", "closeMenu", "fakeEl", "createTextAreaElement", "execCommand", "emitNotif", "candidate", "import", "Blob", "ExportType", "JIIX", "prompterTextElement", "SMARTGUIDE", "createRootElement", "createWrapperElement", "createPrompterContainerElement", "createPrompterTextElement", "createEllipsisElement", "createTagElement", "deleteElement", "smartGuideElement", "tagElement", "prompterContainerElement", "marginLeft", "marginRight", "createWordSpan", "span", "createDocumentFragment", "lastWord", "offsetLeft", "populatePrompter", "createCandidatesElement", "createCopyElement", "createDeleteElement", "createMoreMenuElement", "createConvertElement", "isRTL", "documentElement", "pageYOffset", "yPosition", "match", "createRange", "selectNodeContents", "getSelection", "removeAllRanges", "onClickEllipsis", "onClickConvert", "onClickCopy", "onClickDelete", "onClickPrompter", "removeListeners", "onClickCandidate", "smartGuide", "InteractiveInkSSREditorConfiguration", "DefaultInteractiveInkSSREditorConfiguration", "InteractiveInkSSREditor", "penClass", "syncStyle", "jjix", "synchronizeModelWithBackend", "updatesLayer", "onContetChaned", "initializeSmartGuide", "addSVGPatchListener", "onError", "updatePositionSent", "clearErasingStrokes", "unsentStrokes", "blobToImport", "importPointEvents", "str", "exportPoints", "InkEditorConfiguration", "DefaultInkEditorConfiguration", "convertPixelToMillimeter", "InkEditor", "_S", "static", "EDITOR", "Editor", "instance", "initialize"]
}
